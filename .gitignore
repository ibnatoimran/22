/**
 * kh-bmicalc.js
 *
 * @author KidsHealth, The Nemours Foundation, & Omni Developers
 * @description Flash-free replacement of BMI calculation for children and teens
 * from age 2 to 20 years old
 */

 // Get parameters from the URL
 function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

// Tabs Toggle
function toggleTab(tab) {
  if(tab.id == "kh-bmicalc-table-toggle-in") {
    tab.setAttribute("class", "kh-bmicalc-tab kh-bmicalc-tab-active");
    document.getElementById("kh-bmicalc-table-toggle-cm").setAttribute("class", " kh-bmicalc-tab");
  } else {
    tab.setAttribute("class", "kh-bmicalc-tab kh-bmicalc-tab-active");
    document.getElementById("kh-bmicalc-table-toggle-in").setAttribute("class", " kh-bmicalc-tab");
  }
}

var kh_current_month;
var kh_current_year;

// If Server_Month is undefined, get the current year via the client
if(typeof Server_Month !== 'undefined') {
	kh_current_month = Server_Month;
} else {
	var d = new Date();
	kh_current_month = d.getMonth() + 1;

	if(parseInt(kh_current_month) < 10) {
		kh_current_month = "0" + parseInt(kh_current_month);
	}
}

// If Server_Year is undefined, get the current year via the client
if(typeof Server_Year !== 'undefined') {
	kh_current_year = Server_Year;
} else if(typeof KHcopyDate !== 'undefined') {
	kh_current_year = KHcopyDate;
} else {
	var d = new Date();
	kh_current_year = d.getFullYear();
}

// Identify if this is a partner or KidsHealth
var uriLicID;
var printer_friendly_logo = "";

// Use New World Lic ID variable if available. Otherwise grab Lic ID from the URL
if(typeof kidsHealthLicID !== "undefined" && kidsHealthLicID !== "") {
	uriLicID = kidsHealthLicID;
} else {
	uriLicID = getParameterByName('lic');
}

if((uriLicID  !== "undefined" && uriLicID !== "")) {
	printer_friendly_logo = "<div class=\"kh-bmicalc-print-logo\"><img src=\"http://kidshealth.org/licensees/licensee" + uriLicID + "/images/printer_friendly_logo.gif\" /></div>";
} else {
	printer_friendly_logo = "<div class=\"kh-bmicalc-print-logo\" style=\"display: none !important;\"></div>";
}

/*!
 * jsModal - A pure JavaScript modal dialog engine v1.0d
 * http://jsmodal.com/
 *
 * Author: Henry Rune Tang Kai <henry@henrys.se>
 *
 * (c) Copyright 2013 Henry Tang Kai.
 *
 * License: http://www.opensource.org/licenses/mit-license.php
 *
 * Date: 2013-7-11
 */

var Modal = (function () {
		"use strict";
		/*global document: false */
		/*global window: false */

		 // create object method
		var method = {},
				settings = {},

				modalOverlay = document.createElement('div'),
				modalContainer = document.createElement('div'),
				modalHeader = document.createElement('div'),
				modalContent = document.createElement('div'),
				modalClose = document.createElement('div'),

				centerModal,

				closeModalEvent,

				defaultSettings = {
						width: 'auto',
						height: 'auto',
						lock: false,
						hideClose: false,
						draggable: false,
						closeAfter: 0,
						openCallback: false,
						closeCallback: false,
						hideOverlay: false
				};

		// Open the modal
		method.open = function (parameters) {
				settings.width = parameters.width || defaultSettings.width;
				settings.height = parameters.height || defaultSettings.height;
				settings.lock = parameters.lock || defaultSettings.lock;
				settings.hideClose = parameters.hideClose || defaultSettings.hideClose;
				settings.draggable = parameters.draggable || defaultSettings.draggable;
				settings.closeAfter = parameters.closeAfter || defaultSettings.closeAfter;
				settings.closeCallback = parameters.closeCallback || defaultSettings.closeCallback;
				settings.openCallback = parameters.openCallback || defaultSettings.openCallback;
				settings.hideOverlay = parameters.hideOverlay || defaultSettings.hideOverlay;

				centerModal = function () {
						method.center({});
				};

				if (parameters.content && !parameters.ajaxContent) {
						modalContent.innerHTML = parameters.content;
				} else if (parameters.ajaxContent && !parameters.content) {
						modalContainer.className = 'modal-loading';
						method.ajax(parameters.ajaxContent, function insertAjaxResult(ajaxResult) {
								modalContent.innerHTML = ajaxResult;
						});
				} else {
						modalContent.innerHTML = '';
				}

				modalContainer.style.width = settings.width;
				modalContainer.style.height = settings.height;

				method.center({});

				if (settings.lock || settings.hideClose) {
						modalClose.style.visibility = 'hidden';
				}
				if (!settings.hideOverlay) {
						modalOverlay.style.visibility = 'visible';
				}
				modalContainer.style.visibility = 'visible';

				document.onkeypress = function (e) {
						if (e.keyCode === 27 && settings.lock !== true) {
								method.close();
						}
				};

				modalClose.onclick = function () {
						if (!settings.hideClose) {
								method.close();
						} else {
								return false;
						}
				};
				modalOverlay.onclick = function () {
						if (!settings.lock) {
								method.close();
						} else {
								return false;
						}
				};

				if (window.addEventListener) {
						window.addEventListener('resize', centerModal, false);
				} else if (window.attachEvent) {
						window.attachEvent('onresize', centerModal);
				}

				if (settings.draggable) {
						modalHeader.style.cursor = 'move';
						modalHeader.onmousedown = function (e) {
								method.drag(e);
								return false;
						};
				} else {
						modalHeader.onmousedown = function () {
								return false;
						};
				}
				if (settings.closeAfter > 0) {
						closeModalEvent = window.setTimeout(function () {
								method.close();
						}, settings.closeAfter * 1000);
				}
				if (settings.openCallback) {
						settings.openCallback();
				}
		};

		// Drag the modal
		method.drag = function (e) {
				var xPosition = (window.event !== undefined) ? window.event.clientX : e.clientX,
						yPosition = (window.event !== undefined) ? window.event.clientY : e.clientY,
						differenceX = xPosition - modalContainer.offsetLeft,
						differenceY = yPosition - modalContainer.offsetTop;

				document.onmousemove = function (e) {
						xPosition = (window.event !== undefined) ? window.event.clientX : e.clientX;
						yPosition = (window.event !== undefined) ? window.event.clientY : e.clientY;

						modalContainer.style.left = ((xPosition - differenceX) > 0) ? (xPosition - differenceX) + 'px' : 0;
						modalContainer.style.top = ((yPosition - differenceY) > 0) ? (yPosition - differenceY) + 'px' : 0;

						document.onmouseup = function () {
								window.document.onmousemove = null;
						};
				};
		};

		// Perform XMLHTTPRequest
		method.ajax = function (url, successCallback) {
				var i,
						XMLHttpRequestObject = false,
						XMLHttpRequestObjects = [
								function () {
										return new window.XMLHttpRequest();  // IE7+, Firefox, Chrome, Opera, Safari
								},
								function () {
										return new window.ActiveXObject('Msxml2.XMLHTTP.6.0');
								},
								function () {
										return new window.ActiveXObject('Msxml2.XMLHTTP.3.0');
								},
								function () {
										return new window.ActiveXObject('Msxml2.XMLHTTP');
								}
						];

				for (i = 0; i < XMLHttpRequestObjects.length; i += 1) {
						try {
								XMLHttpRequestObject = XMLHttpRequestObjects[i]();
						} catch (ignore) {
						}

						if (XMLHttpRequestObject !== false) {
								break;
						}
				}

				XMLHttpRequestObject.open('GET', url, true);

				XMLHttpRequestObject.onreadystatechange = function () {
						if (XMLHttpRequestObject.readyState === 4) {
								if (XMLHttpRequestObject.status === 200) {
										successCallback(XMLHttpRequestObject.responseText);
										modalContainer.removeAttribute('class');
								} else {
										successCallback(XMLHttpRequestObject.responseText);
										modalContainer.removeAttribute('class');
								}
						}
				};

				XMLHttpRequestObject.send(null);
		};


		// Close the modal
		method.close = function () {
				modalContent.innerHTML = '';
				modalOverlay.setAttribute('style', '');
				modalOverlay.style.cssText = '';
				modalOverlay.style.visibility = 'hidden';
				modalContainer.setAttribute('style', '');
				modalContainer.style.cssText = '';
				modalContainer.style.visibility = 'hidden';
				modalHeader.style.cursor = 'default';
				modalClose.setAttribute('style', '');
				modalClose.style.cssText = '';

				if (closeModalEvent) {
						window.clearTimeout(closeModalEvent);
				}

				if (settings.closeCallback) {
						settings.closeCallback();
				}

				if (window.removeEventListener) {
						window.removeEventListener('resize', centerModal, false);
				} else if (window.detachEvent) {
						window.detachEvent('onresize', centerModal);
				}
		};

		// Center the modal in the viewport
		method.center = function (parameters) {
				var documentHeight = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight),

						modalWidth = Math.max(modalContainer.clientWidth, modalContainer.offsetWidth),
						modalHeight = Math.max(modalContainer.clientHeight, modalContainer.offsetHeight),

						browserWidth = 0,
						browserHeight = 0,

						amountScrolledX = 0,
						amountScrolledY = 0;

				if (typeof (window.innerWidth) === 'number') {
						browserWidth = window.innerWidth;
						browserHeight = window.innerHeight;
				} else if (document.documentElement && document.documentElement.clientWidth) {
						browserWidth = document.documentElement.clientWidth;
						browserHeight = document.documentElement.clientHeight;
				}

				if (typeof (window.pageYOffset) === 'number') {
						amountScrolledY = window.pageYOffset;
						amountScrolledX = window.pageXOffset;
				} else if (document.body && document.body.scrollLeft) {
						amountScrolledY = document.body.scrollTop;
						amountScrolledX = document.body.scrollLeft;
				} else if (document.documentElement && document.documentElement.scrollLeft) {
						amountScrolledY = document.documentElement.scrollTop;
						amountScrolledX = document.documentElement.scrollLeft;
				}

				if (!parameters.horizontalOnly) {
						modalContainer.style.top = amountScrolledY + (browserHeight / 2) - (modalHeight / 2) + 'px';
				}

				modalContainer.style.left = amountScrolledX + (browserWidth / 2) - (modalWidth / 2) + 'px';

				modalOverlay.style.height = documentHeight + 'px';
				modalOverlay.style.width = '100%';
		};

		// Set the id's, append the nested elements, and append the complete modal to the document body
		modalOverlay.setAttribute('id', 'modal-overlay');
		modalContainer.setAttribute('id', 'modal-container');
		modalHeader.setAttribute('id', 'modal-header');
		modalContent.setAttribute('id', 'modal-content');
		modalClose.setAttribute('id', 'modal-close');
		modalHeader.appendChild(modalClose);
		modalContainer.appendChild(modalHeader);
		modalContainer.appendChild(modalContent);

		modalOverlay.style.visibility = 'hidden';
		modalContainer.style.visibility = 'hidden';

		if (window.addEventListener) {
				window.addEventListener('load', function () {
						document.body.appendChild(modalOverlay);
						document.body.appendChild(modalContainer);
				}, false);
		} else if (window.attachEvent) {
				window.attachEvent('onload', function () {
						document.body.appendChild(modalOverlay);
						document.body.appendChild(modalContainer);
				});
		}

		return method;
}());

// Generated by CoffeeScript 1.4.0
/*
#
# Opentip v2.4.6
#
# More info at [www.opentip.org](http://www.opentip.org)
#
# Copyright (c) 2012, Matias Meno
# Graphics by Tjandra Mayerhold
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
*/

var Opentip, firstAdapter, i, mouseMoved, mousePosition, mousePositionObservers, position, vendors, _i, _len, _ref,
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __hasProp = {}.hasOwnProperty;

Opentip = (function() {

  Opentip.prototype.STICKS_OUT_TOP = 1;

  Opentip.prototype.STICKS_OUT_BOTTOM = 2;

  Opentip.prototype.STICKS_OUT_LEFT = 1;

  Opentip.prototype.STICKS_OUT_RIGHT = 2;

  Opentip.prototype["class"] = {
    container: "opentip-container",
    opentip: "opentip",
    header: "ot-header",
    content: "ot-content",
    loadingIndicator: "ot-loading-indicator",
    close: "ot-close",
    goingToHide: "ot-going-to-hide",
    hidden: "ot-hidden",
    hiding: "ot-hiding",
    goingToShow: "ot-going-to-show",
    showing: "ot-showing",
    visible: "ot-visible",
    loading: "ot-loading",
    ajaxError: "ot-ajax-error",
    fixed: "ot-fixed",
    showEffectPrefix: "ot-show-effect-",
    hideEffectPrefix: "ot-hide-effect-",
    stylePrefix: "style-"
  };

  function Opentip(element, content, title, options) {
    var elementsOpentips, hideTrigger, methodToBind, optionSources, prop, styleName, _i, _j, _len, _len1, _ref, _ref1, _ref2, _tmpStyle,
      _this = this;
    this.id = ++Opentip.lastId;
    this.debug("Creating Opentip.");
    Opentip.tips.push(this);
    this.adapter = Opentip.adapter;
    elementsOpentips = this.adapter.data(element, "opentips") || [];
    elementsOpentips.push(this);
    this.adapter.data(element, "opentips", elementsOpentips);
    this.triggerElement = this.adapter.wrap(element);
    if (this.triggerElement.length > 1) {
      throw new Error("You can't call Opentip on multiple elements.");
    }
    if (this.triggerElement.length < 1) {
      throw new Error("Invalid element.");
    }
    this.loaded = false;
    this.loading = false;
    this.visible = false;
    this.waitingToShow = false;
    this.waitingToHide = false;
    this.currentPosition = {
      left: 0,
      top: 0
    };
    this.dimensions = {
      width: 100,
      height: 50
    };
    this.content = "";
    this.redraw = true;
    this.currentObservers = {
      showing: false,
      visible: false,
      hiding: false,
      hidden: false
    };
    options = this.adapter.clone(options);
    if (typeof content === "object") {
      options = content;
      content = title = void 0;
    } else if (typeof title === "object") {
      options = title;
      title = void 0;
    }
    if (title != null) {
      options.title = title;
    }
    if (content != null) {
      this.setContent(content);
    }
    if (options["extends"] == null) {
      if (options.style != null) {
        options["extends"] = options.style;
      } else {
        options["extends"] = Opentip.defaultStyle;
      }
    }
    optionSources = [options];
    _tmpStyle = options;
    while (_tmpStyle["extends"]) {
      styleName = _tmpStyle["extends"];
      _tmpStyle = Opentip.styles[styleName];
      if (_tmpStyle == null) {
        throw new Error("Invalid style: " + styleName);
      }
      optionSources.unshift(_tmpStyle);
      if (!((_tmpStyle["extends"] != null) || styleName === "standard")) {
        _tmpStyle["extends"] = "standard";
      }
    }
    options = (_ref = this.adapter).extend.apply(_ref, [{}].concat(__slice.call(optionSources)));
    options.hideTriggers = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = options.hideTriggers;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        hideTrigger = _ref1[_i];
        _results.push(hideTrigger);
      }
      return _results;
    })();
    if (options.hideTrigger && options.hideTriggers.length === 0) {
      options.hideTriggers.push(options.hideTrigger);
    }
    _ref1 = ["tipJoint", "targetJoint", "stem"];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      prop = _ref1[_i];
      if (options[prop] && typeof options[prop] === "string") {
        options[prop] = new Opentip.Joint(options[prop]);
      }
    }
    if (options.ajax && (options.ajax === true || !options.ajax)) {
      if (this.adapter.tagName(this.triggerElement) === "A") {
        options.ajax = this.adapter.attr(this.triggerElement, "href");
      } else {
        options.ajax = false;
      }
    }
    if (options.showOn === "click" && this.adapter.tagName(this.triggerElement) === "A") {
      this.adapter.observe(this.triggerElement, "click", function(e) {
        e.preventDefault();
        e.stopPropagation();
        return e.stopped = true;
      });
    }
    if (options.target) {
      options.fixed = true;
    }
    if (options.stem === true) {
      options.stem = new Opentip.Joint(options.tipJoint);
    }
    if (options.target === true) {
      options.target = this.triggerElement;
    } else if (options.target) {
      options.target = this.adapter.wrap(options.target);
    }
    this.currentStem = options.stem;
    if (options.delay == null) {
      options.delay = options.showOn === "mouseover" ? 0.2 : 0;
    }
    if (options.targetJoint == null) {
      options.targetJoint = new Opentip.Joint(options.tipJoint).flip();
    }
    this.showTriggers = [];
    this.showTriggersWhenVisible = [];
    this.hideTriggers = [];
    if (options.showOn && options.showOn !== "creation") {
      this.showTriggers.push({
        element: this.triggerElement,
        event: options.showOn
      });
    }
    if (options.ajaxCache != null) {
      options.cache = options.ajaxCache;
      delete options.ajaxCache;
    }
    this.options = options;
    this.bound = {};
    _ref2 = ["prepareToShow", "prepareToHide", "show", "hide", "reposition"];
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      methodToBind = _ref2[_j];
      this.bound[methodToBind] = (function(methodToBind) {
        return function() {
          return _this[methodToBind].apply(_this, arguments);
        };
      })(methodToBind);
    }
    this.adapter.domReady(function() {
      _this.activate();
      if (_this.options.showOn === "creation") {
        return _this.prepareToShow();
      }
    });
  }

  Opentip.prototype._setup = function() {
    var hideOn, hideTrigger, hideTriggerElement, i, _i, _j, _len, _len1, _ref, _ref1, _results;
    this.debug("Setting up the tooltip.");
    this._buildContainer();
    this.hideTriggers = [];
    _ref = this.options.hideTriggers;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      hideTrigger = _ref[i];
      hideTriggerElement = null;
      hideOn = this.options.hideOn instanceof Array ? this.options.hideOn[i] : this.options.hideOn;
      if (typeof hideTrigger === "string") {
        switch (hideTrigger) {
          case "trigger":
            hideOn = hideOn || "mouseout";
            hideTriggerElement = this.triggerElement;
            break;
          case "tip":
            hideOn = hideOn || "mouseover";
            hideTriggerElement = this.container;
            break;
          case "target":
            hideOn = hideOn || "mouseover";
            hideTriggerElement = this.options.target;
            break;
          case "closeButton":
            break;
          default:
            throw new Error("Unknown hide trigger: " + hideTrigger + ".");
        }
      } else {
        hideOn = hideOn || "mouseover";
        hideTriggerElement = this.adapter.wrap(hideTrigger);
      }
      if (hideTriggerElement) {
        this.hideTriggers.push({
          element: hideTriggerElement,
          event: hideOn,
          original: hideTrigger
        });
      }
    }
    _ref1 = this.hideTriggers;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      hideTrigger = _ref1[_j];
      _results.push(this.showTriggersWhenVisible.push({
        element: hideTrigger.element,
        event: "mouseover"
      }));
    }
    return _results;
  };

  Opentip.prototype._buildContainer = function() {
    this.container = this.adapter.create("<div id=\"opentip-" + this.id + "\" class=\"" + this["class"].container + " " + this["class"].hidden + " " + this["class"].stylePrefix + this.options.className + "\"></div>");
    this.adapter.css(this.container, {
      position: "absolute"
    });
    if (this.options.ajax) {
      this.adapter.addClass(this.container, this["class"].loading);
    }
    if (this.options.fixed) {
      this.adapter.addClass(this.container, this["class"].fixed);
    }
    if (this.options.showEffect) {
      this.adapter.addClass(this.container, "" + this["class"].showEffectPrefix + this.options.showEffect);
    }
    if (this.options.hideEffect) {
      return this.adapter.addClass(this.container, "" + this["class"].hideEffectPrefix + this.options.hideEffect);
    }
  };

  Opentip.prototype._buildElements = function() {
    var headerElement, titleElement;
    this.tooltipElement = this.adapter.create("<div class=\"" + this["class"].opentip + "\"><div class=\"" + this["class"].header + "\"></div><div class=\"" + this["class"].content + "\"></div></div>");
    this.backgroundCanvas = this.adapter.wrap(document.createElement("canvas"));
    this.adapter.css(this.backgroundCanvas, {
      position: "absolute"
    });
    if (typeof G_vmlCanvasManager !== "undefined" && G_vmlCanvasManager !== null) {
      G_vmlCanvasManager.initElement(this.adapter.unwrap(this.backgroundCanvas));
    }
    headerElement = this.adapter.find(this.tooltipElement, "." + this["class"].header);
    if (this.options.title) {
      titleElement = this.adapter.create("<h1></h1>");
      this.adapter.update(titleElement, this.options.title, this.options.escapeTitle);
      this.adapter.append(headerElement, titleElement);
    }
    if (this.options.ajax && !this.loaded) {
      this.adapter.append(this.tooltipElement, this.adapter.create("<div class=\"" + this["class"].loadingIndicator + "\"><span>â†»</span></div>"));
    }
    if (__indexOf.call(this.options.hideTriggers, "closeButton") >= 0) {
      this.closeButtonElement = this.adapter.create("<a href=\"javascript:undefined;\" class=\"" + this["class"].close + "\"><span>Close</span></a>");
      this.adapter.append(headerElement, this.closeButtonElement);
    }
    this.adapter.append(this.container, this.backgroundCanvas);
    this.adapter.append(this.container, this.tooltipElement);
    this.adapter.append(document.body, this.container);
    this._newContent = true;
    return this.redraw = true;
  };

  Opentip.prototype.setContent = function(content) {
    this.content = content;
    this._newContent = true;
    if (typeof this.content === "function") {
      this._contentFunction = this.content;
      this.content = "";
    } else {
      this._contentFunction = null;
    }
    if (this.visible) {
      return this._updateElementContent();
    }
  };

  Opentip.prototype._updateElementContent = function() {
    var contentDiv;
    if (this._newContent || (!this.options.cache && this._contentFunction)) {
      contentDiv = this.adapter.find(this.container, "." + this["class"].content);
      if (contentDiv != null) {
        if (this._contentFunction) {
          this.debug("Executing content function.");
          this.content = this._contentFunction(this);
        }
        this.adapter.update(contentDiv, this.content, this.options.escapeContent);
      }
      this._newContent = false;
    }
    this._storeAndLockDimensions();
    return this.reposition();
  };

  Opentip.prototype._storeAndLockDimensions = function() {
    var prevDimension;
    if (!this.container) {
      return;
    }
    prevDimension = this.dimensions;
    this.adapter.css(this.container, {
      width: "auto",
      left: "0px",
      top: "0px"
    });
    this.dimensions = this.adapter.dimensions(this.container);
    this.dimensions.width += 1;
    this.adapter.css(this.container, {
      width: "" + this.dimensions.width + "px",
      top: "" + this.currentPosition.top + "px",
      left: "" + this.currentPosition.left + "px"
    });
    if (!this._dimensionsEqual(this.dimensions, prevDimension)) {
      this.redraw = true;
      return this._draw();
    }
  };

  Opentip.prototype.activate = function() {
    return this._setupObservers("hidden", "hiding");
  };

  Opentip.prototype.deactivate = function() {
    this.debug("Deactivating tooltip.");
    this.hide();
    return this._setupObservers("-showing", "-visible", "-hidden", "-hiding");
  };

  Opentip.prototype._setupObservers = function() {
    var observeOrStop, removeObserver, state, states, trigger, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2,
      _this = this;
    states = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = states.length; _i < _len; _i++) {
      state = states[_i];
      removeObserver = false;
      if (state.charAt(0) === "-") {
        removeObserver = true;
        state = state.substr(1);
      }
      if (this.currentObservers[state] === !removeObserver) {
        continue;
      }
      this.currentObservers[state] = !removeObserver;
      observeOrStop = function() {
        var args, _ref, _ref1;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (removeObserver) {
          return (_ref = _this.adapter).stopObserving.apply(_ref, args);
        } else {
          return (_ref1 = _this.adapter).observe.apply(_ref1, args);
        }
      };
      switch (state) {
        case "showing":
          _ref = this.hideTriggers;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            trigger = _ref[_j];
            observeOrStop(trigger.element, trigger.event, this.bound.prepareToHide);
          }
          observeOrStop((document.onresize != null ? document : window), "resize", this.bound.reposition);
          observeOrStop(window, "scroll", this.bound.reposition);
          break;
        case "visible":
          _ref1 = this.showTriggersWhenVisible;
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            trigger = _ref1[_k];
            observeOrStop(trigger.element, trigger.event, this.bound.prepareToShow);
          }
          break;
        case "hiding":
          _ref2 = this.showTriggers;
          for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
            trigger = _ref2[_l];
            observeOrStop(trigger.element, trigger.event, this.bound.prepareToShow);
          }
          break;
        case "hidden":
          break;
        default:
          throw new Error("Unknown state: " + state);
      }
    }
    return null;
  };

  Opentip.prototype.prepareToShow = function() {
    this._abortHiding();
    this._abortShowing();
    if (this.visible) {
      return;
    }
    this.debug("Showing in " + this.options.delay + "s.");
    if (this.container == null) {
      this._setup();
    }
    if (this.options.group) {
      Opentip._abortShowingGroup(this.options.group, this);
    }
    this.preparingToShow = true;
    this._setupObservers("-hidden", "-hiding", "showing");
    this._followMousePosition();
    if (this.options.fixed && !this.options.target) {
      this.initialMousePosition = mousePosition;
    }
    this.reposition();
    return this._showTimeoutId = this.setTimeout(this.bound.show, this.options.delay || 0);
  };

  Opentip.prototype.show = function() {
    var _this = this;
    this._abortHiding();
    if (this.visible) {
      return;
    }
    this._clearTimeouts();
    if (!this._triggerElementExists()) {
      return this.deactivate();
    }
    this.debug("Showing now.");
    if (this.container == null) {
      this._setup();
    }
    if (this.options.group) {
      Opentip._hideGroup(this.options.group, this);
    }
    this.visible = true;
    this.preparingToShow = false;
    if (this.tooltipElement == null) {
      this._buildElements();
    }
    this._updateElementContent();
    if (this.options.ajax && (!this.loaded || !this.options.cache)) {
      this._loadAjax();
    }
    this._searchAndActivateCloseButtons();
    this._startEnsureTriggerElement();
    this.adapter.css(this.container, {
      zIndex: Opentip.lastZIndex++
    });
    this._setupObservers("-hidden", "-hiding", "-showing", "-visible", "showing", "visible");
    if (this.options.fixed && !this.options.target) {
      this.initialMousePosition = mousePosition;
    }
    this.reposition();
    this.adapter.removeClass(this.container, this["class"].hiding);
    this.adapter.removeClass(this.container, this["class"].hidden);
    this.adapter.addClass(this.container, this["class"].goingToShow);
    this.setCss3Style(this.container, {
      transitionDuration: "0s"
    });
    this.defer(function() {
      var delay;
      if (!_this.visible || _this.preparingToHide) {
        return;
      }
      _this.adapter.removeClass(_this.container, _this["class"].goingToShow);
      _this.adapter.addClass(_this.container, _this["class"].showing);
      delay = 0;
      if (_this.options.showEffect && _this.options.showEffectDuration) {
        delay = _this.options.showEffectDuration;
      }
      _this.setCss3Style(_this.container, {
        transitionDuration: "" + delay + "s"
      });
      _this._visibilityStateTimeoutId = _this.setTimeout(function() {
        _this.adapter.removeClass(_this.container, _this["class"].showing);
        return _this.adapter.addClass(_this.container, _this["class"].visible);
      }, delay);
      return _this._activateFirstInput();
    });
    return this._draw();
  };

  Opentip.prototype._abortShowing = function() {
    if (this.preparingToShow) {
      this.debug("Aborting showing.");
      this._clearTimeouts();
      this._stopFollowingMousePosition();
      this.preparingToShow = false;
      return this._setupObservers("-showing", "-visible", "hiding", "hidden");
    }
  };

  Opentip.prototype.prepareToHide = function() {
    this._abortShowing();
    this._abortHiding();
    if (!this.visible) {
      return;
    }
    this.debug("Hiding in " + this.options.hideDelay + "s");
    this.preparingToHide = true;
    this._setupObservers("-showing", "visible", "-hidden", "hiding");
    return this._hideTimeoutId = this.setTimeout(this.bound.hide, this.options.hideDelay);
  };

  Opentip.prototype.hide = function() {
    var _this = this;
    this._abortShowing();
    if (!this.visible) {
      return;
    }
    this._clearTimeouts();
    this.debug("Hiding!");
    this.visible = false;
    this.preparingToHide = false;
    this._stopEnsureTriggerElement();
    this._setupObservers("-showing", "-visible", "-hiding", "-hidden", "hiding", "hidden");
    if (!this.options.fixed) {
      this._stopFollowingMousePosition();
    }
    if (!this.container) {
      return;
    }
    this.adapter.removeClass(this.container, this["class"].visible);
    this.adapter.removeClass(this.container, this["class"].showing);
    this.adapter.addClass(this.container, this["class"].goingToHide);
    this.setCss3Style(this.container, {
      transitionDuration: "0s"
    });
    return this.defer(function() {
      var hideDelay;
      _this.adapter.removeClass(_this.container, _this["class"].goingToHide);
      _this.adapter.addClass(_this.container, _this["class"].hiding);
      hideDelay = 0;
      if (_this.options.hideEffect && _this.options.hideEffectDuration) {
        hideDelay = _this.options.hideEffectDuration;
      }
      _this.setCss3Style(_this.container, {
        transitionDuration: "" + hideDelay + "s"
      });
      return _this._visibilityStateTimeoutId = _this.setTimeout(function() {
        _this.adapter.removeClass(_this.container, _this["class"].hiding);
        _this.adapter.addClass(_this.container, _this["class"].hidden);
        _this.setCss3Style(_this.container, {
          transitionDuration: "0s"
        });
        if (_this.options.removeElementsOnHide) {
          _this.debug("Removing HTML elements.");
          _this.adapter.remove(_this.container);
          delete _this.container;
          return delete _this.tooltipElement;
        }
      }, hideDelay);
    });
  };

  Opentip.prototype._abortHiding = function() {
    if (this.preparingToHide) {
      this.debug("Aborting hiding.");
      this._clearTimeouts();
      this.preparingToHide = false;
      return this._setupObservers("-hiding", "showing", "visible");
    }
  };

  Opentip.prototype.reposition = function() {
    var position, stem, _ref,
      _this = this;
    position = this.getPosition();
    if (position == null) {
      return;
    }
    stem = this.options.stem;
    if (this.options.containInViewport) {
      _ref = this._ensureViewportContainment(position), position = _ref.position, stem = _ref.stem;
    }
    if (this._positionsEqual(position, this.currentPosition)) {
      return;
    }
    if (!(!this.options.stem || stem.eql(this.currentStem))) {
      this.redraw = true;
    }
    this.currentPosition = position;
    this.currentStem = stem;
    this._draw();
    this.adapter.css(this.container, {
      left: "" + position.left + "px",
      top: "" + position.top + "px"
    });
    return this.defer(function() {
      var rawContainer, redrawFix;
      rawContainer = _this.adapter.unwrap(_this.container);
      rawContainer.style.visibility = "hidden";
      redrawFix = rawContainer.offsetHeight;
      return rawContainer.style.visibility = "visible";
    });
  };

  Opentip.prototype.getPosition = function(tipJoint, targetJoint, stem) {
    var additionalHorizontal, additionalVertical, offsetDistance, position, stemLength, targetDimensions, targetPosition, unwrappedTarget, _ref;
    if (!this.container) {
      return;
    }
    if (tipJoint == null) {
      tipJoint = this.options.tipJoint;
    }
    if (targetJoint == null) {
      targetJoint = this.options.targetJoint;
    }
    position = {};
    if (this.options.target) {
      targetPosition = this.adapter.offset(this.options.target);
      targetDimensions = this.adapter.dimensions(this.options.target);
      position = targetPosition;
      if (targetJoint.right) {
        unwrappedTarget = this.adapter.unwrap(this.options.target);
        if (unwrappedTarget.getBoundingClientRect != null) {
          position.left = unwrappedTarget.getBoundingClientRect().right + ((_ref = window.pageXOffset) != null ? _ref : document.body.scrollLeft);
        } else {
          position.left += targetDimensions.width;
        }
      } else if (targetJoint.center) {
        position.left += Math.round(targetDimensions.width / 2);
      }
      if (targetJoint.bottom) {
        position.top += targetDimensions.height;
      } else if (targetJoint.middle) {
        position.top += Math.round(targetDimensions.height / 2);
      }
      if (this.options.borderWidth) {
        if (this.options.tipJoint.left) {
          position.left += this.options.borderWidth;
        }
        if (this.options.tipJoint.right) {
          position.left -= this.options.borderWidth;
        }
        if (this.options.tipJoint.top) {
          position.top += this.options.borderWidth;
        } else if (this.options.tipJoint.bottom) {
          position.top -= this.options.borderWidth;
        }
      }
    } else {
      if (this.initialMousePosition) {
        position = {
          top: this.initialMousePosition.y,
          left: this.initialMousePosition.x
        };
      } else {
        position = {
          top: mousePosition.y,
          left: mousePosition.x
        };
      }
    }
    if (this.options.autoOffset) {
      stemLength = this.options.stem ? this.options.stemLength : 0;
      offsetDistance = stemLength && this.options.fixed ? 2 : 10;
      additionalHorizontal = tipJoint.middle && !this.options.fixed ? 15 : 0;
      additionalVertical = tipJoint.center && !this.options.fixed ? 15 : 0;
      if (tipJoint.right) {
        position.left -= offsetDistance + additionalHorizontal;
      } else if (tipJoint.left) {
        position.left += offsetDistance + additionalHorizontal;
      }
      if (tipJoint.bottom) {
        position.top -= offsetDistance + additionalVertical;
      } else if (tipJoint.top) {
        position.top += offsetDistance + additionalVertical;
      }
      if (stemLength) {
        if (stem == null) {
          stem = this.options.stem;
        }
        if (stem.right) {
          position.left -= stemLength;
        } else if (stem.left) {
          position.left += stemLength;
        }
        if (stem.bottom) {
          position.top -= stemLength;
        } else if (stem.top) {
          position.top += stemLength;
        }
      }
    }
    position.left += this.options.offset[0];
    position.top += this.options.offset[1];
    if (tipJoint.right) {
      position.left -= this.dimensions.width;
    } else if (tipJoint.center) {
      position.left -= Math.round(this.dimensions.width / 2);
    }
    if (tipJoint.bottom) {
      position.top -= this.dimensions.height;
    } else if (tipJoint.middle) {
      position.top -= Math.round(this.dimensions.height / 2);
    }
    return position;
  };

  Opentip.prototype._ensureViewportContainment = function(position) {
    var needsRepositioning, newSticksOut, originals, revertedX, revertedY, scrollOffset, stem, sticksOut, targetJoint, tipJoint, viewportDimensions, viewportPosition;
    stem = this.options.stem;
    originals = {
      position: position,
      stem: stem
    };
    if (!(this.visible && position)) {
      return originals;
    }
    sticksOut = this._sticksOut(position);
    if (!(sticksOut[0] || sticksOut[1])) {
      return originals;
    }
    tipJoint = new Opentip.Joint(this.options.tipJoint);
    if (this.options.targetJoint) {
      targetJoint = new Opentip.Joint(this.options.targetJoint);
    }
    scrollOffset = this.adapter.scrollOffset();
    viewportDimensions = this.adapter.viewportDimensions();
    viewportPosition = [position.left - scrollOffset[0], position.top - scrollOffset[1]];
    needsRepositioning = false;
    if (viewportDimensions.width >= this.dimensions.width) {
      if (sticksOut[0]) {
        needsRepositioning = true;
        switch (sticksOut[0]) {
          case this.STICKS_OUT_LEFT:
            tipJoint.setHorizontal("left");
            if (this.options.targetJoint) {
              targetJoint.setHorizontal("right");
            }
            break;
          case this.STICKS_OUT_RIGHT:
            tipJoint.setHorizontal("right");
            if (this.options.targetJoint) {
              targetJoint.setHorizontal("left");
            }
        }
      }
    }
    if (viewportDimensions.height >= this.dimensions.height) {
      if (sticksOut[1]) {
        needsRepositioning = true;
        switch (sticksOut[1]) {
          case this.STICKS_OUT_TOP:
            tipJoint.setVertical("top");
            if (this.options.targetJoint) {
              targetJoint.setVertical("bottom");
            }
            break;
          case this.STICKS_OUT_BOTTOM:
            tipJoint.setVertical("bottom");
            if (this.options.targetJoint) {
              targetJoint.setVertical("top");
            }
        }
      }
    }
    if (!needsRepositioning) {
      return originals;
    }
    if (this.options.stem) {
      stem = tipJoint;
    }
    position = this.getPosition(tipJoint, targetJoint, stem);
    newSticksOut = this._sticksOut(position);
    revertedX = false;
    revertedY = false;
    if (newSticksOut[0] && (newSticksOut[0] !== sticksOut[0])) {
      revertedX = true;
      tipJoint.setHorizontal(this.options.tipJoint.horizontal);
      if (this.options.targetJoint) {
        targetJoint.setHorizontal(this.options.targetJoint.horizontal);
      }
    }
    if (newSticksOut[1] && (newSticksOut[1] !== sticksOut[1])) {
      revertedY = true;
      tipJoint.setVertical(this.options.tipJoint.vertical);
      if (this.options.targetJoint) {
        targetJoint.setVertical(this.options.targetJoint.vertical);
      }
    }
    if (revertedX && revertedY) {
      return originals;
    }
    if (revertedX || revertedY) {
      if (this.options.stem) {
        stem = tipJoint;
      }
      position = this.getPosition(tipJoint, targetJoint, stem);
    }
    return {
      position: position,
      stem: stem
    };
  };

  Opentip.prototype._sticksOut = function(position) {
    var positionOffset, scrollOffset, sticksOut, viewportDimensions;
    scrollOffset = this.adapter.scrollOffset();
    viewportDimensions = this.adapter.viewportDimensions();
    positionOffset = [position.left - scrollOffset[0], position.top - scrollOffset[1]];
    sticksOut = [false, false];
    if (positionOffset[0] < 0) {
      sticksOut[0] = this.STICKS_OUT_LEFT;
    } else if (positionOffset[0] + this.dimensions.width > viewportDimensions.width) {
      sticksOut[0] = this.STICKS_OUT_RIGHT;
    }
    if (positionOffset[1] < 0) {
      sticksOut[1] = this.STICKS_OUT_TOP;
    } else if (positionOffset[1] + this.dimensions.height > viewportDimensions.height) {
      sticksOut[1] = this.STICKS_OUT_BOTTOM;
    }
    return sticksOut;
  };

  Opentip.prototype._draw = function() {
    var backgroundCanvas, bulge, canvasDimensions, canvasPosition, closeButton, closeButtonInner, closeButtonOuter, ctx, drawCorner, drawLine, hb, position, stemBase, stemLength, _i, _len, _ref, _ref1, _ref2,
      _this = this;
    if (!(this.backgroundCanvas && this.redraw)) {
      return;
    }
    this.debug("Drawing background.");
    this.redraw = false;
    if (this.currentStem) {
      _ref = ["top", "right", "bottom", "left"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        position = _ref[_i];
        this.adapter.removeClass(this.container, "stem-" + position);
      }
      this.adapter.addClass(this.container, "stem-" + this.currentStem.horizontal);
      this.adapter.addClass(this.container, "stem-" + this.currentStem.vertical);
    }
    closeButtonInner = [0, 0];
    closeButtonOuter = [0, 0];
    if (__indexOf.call(this.options.hideTriggers, "closeButton") >= 0) {
      closeButton = new Opentip.Joint(((_ref1 = this.currentStem) != null ? _ref1.toString() : void 0) === "top right" ? "top left" : "top right");
      closeButtonInner = [this.options.closeButtonRadius + this.options.closeButtonOffset[0], this.options.closeButtonRadius + this.options.closeButtonOffset[1]];
      closeButtonOuter = [this.options.closeButtonRadius - this.options.closeButtonOffset[0], this.options.closeButtonRadius - this.options.closeButtonOffset[1]];
    }
    canvasDimensions = this.adapter.clone(this.dimensions);
    canvasPosition = [0, 0];
    if (this.options.borderWidth) {
      canvasDimensions.width += this.options.borderWidth * 2;
      canvasDimensions.height += this.options.borderWidth * 2;
      canvasPosition[0] -= this.options.borderWidth;
      canvasPosition[1] -= this.options.borderWidth;
    }
    if (this.options.shadow) {
      canvasDimensions.width += this.options.shadowBlur * 2;
      canvasDimensions.width += Math.max(0, this.options.shadowOffset[0] - this.options.shadowBlur * 2);
      canvasDimensions.height += this.options.shadowBlur * 2;
      canvasDimensions.height += Math.max(0, this.options.shadowOffset[1] - this.options.shadowBlur * 2);
      canvasPosition[0] -= Math.max(0, this.options.shadowBlur - this.options.shadowOffset[0]);
      canvasPosition[1] -= Math.max(0, this.options.shadowBlur - this.options.shadowOffset[1]);
    }
    bulge = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    if (this.currentStem) {
      if (this.currentStem.left) {
        bulge.left = this.options.stemLength;
      } else if (this.currentStem.right) {
        bulge.right = this.options.stemLength;
      }
      if (this.currentStem.top) {
        bulge.top = this.options.stemLength;
      } else if (this.currentStem.bottom) {
        bulge.bottom = this.options.stemLength;
      }
    }
    if (closeButton) {
      if (closeButton.left) {
        bulge.left = Math.max(bulge.left, closeButtonOuter[0]);
      } else if (closeButton.right) {
        bulge.right = Math.max(bulge.right, closeButtonOuter[0]);
      }
      if (closeButton.top) {
        bulge.top = Math.max(bulge.top, closeButtonOuter[1]);
      } else if (closeButton.bottom) {
        bulge.bottom = Math.max(bulge.bottom, closeButtonOuter[1]);
      }
    }
    canvasDimensions.width += bulge.left + bulge.right;
    canvasDimensions.height += bulge.top + bulge.bottom;
    canvasPosition[0] -= bulge.left;
    canvasPosition[1] -= bulge.top;
    if (this.currentStem && this.options.borderWidth) {
      _ref2 = this._getPathStemMeasures(this.options.stemBase, this.options.stemLength, this.options.borderWidth), stemLength = _ref2.stemLength, stemBase = _ref2.stemBase;
    }
    backgroundCanvas = this.adapter.unwrap(this.backgroundCanvas);
    backgroundCanvas.width = canvasDimensions.width;
    backgroundCanvas.height = canvasDimensions.height;
    this.adapter.css(this.backgroundCanvas, {
      width: "" + backgroundCanvas.width + "px",
      height: "" + backgroundCanvas.height + "px",
      left: "" + canvasPosition[0] + "px",
      top: "" + canvasPosition[1] + "px"
    });
    ctx = backgroundCanvas.getContext("2d");
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.clearRect(0, 0, backgroundCanvas.width, backgroundCanvas.height);
    ctx.beginPath();
    ctx.fillStyle = this._getColor(ctx, this.dimensions, this.options.background, this.options.backgroundGradientHorizontal);
    ctx.lineJoin = "miter";
    ctx.miterLimit = 500;
    hb = this.options.borderWidth / 2;
    if (this.options.borderWidth) {
      ctx.strokeStyle = this.options.borderColor;
      ctx.lineWidth = this.options.borderWidth;
    } else {
      stemLength = this.options.stemLength;
      stemBase = this.options.stemBase;
    }
    if (stemBase == null) {
      stemBase = 0;
    }
    drawLine = function(length, stem, first) {
      if (first) {
        ctx.moveTo(Math.max(stemBase, _this.options.borderRadius, closeButtonInner[0]) + 1 - hb, -hb);
      }
      if (stem) {
        ctx.lineTo(length / 2 - stemBase / 2, -hb);
        ctx.lineTo(length / 2, -stemLength - hb);
        return ctx.lineTo(length / 2 + stemBase / 2, -hb);
      }
    };
    drawCorner = function(stem, closeButton, i) {
      var angle1, angle2, innerWidth, offset;
      if (stem) {
        ctx.lineTo(-stemBase + hb, 0 - hb);
        ctx.lineTo(stemLength + hb, -stemLength - hb);
        return ctx.lineTo(hb, stemBase - hb);
      } else if (closeButton) {
        offset = _this.options.closeButtonOffset;
        innerWidth = closeButtonInner[0];
        if (i % 2 !== 0) {
          offset = [offset[1], offset[0]];
          innerWidth = closeButtonInner[1];
        }
        angle1 = Math.acos(offset[1] / _this.options.closeButtonRadius);
        angle2 = Math.acos(offset[0] / _this.options.closeButtonRadius);
        ctx.lineTo(-innerWidth + hb, -hb);
        return ctx.arc(hb - offset[0], -hb + offset[1], _this.options.closeButtonRadius, -(Math.PI / 2 + angle1), angle2, false);
      } else {
        ctx.lineTo(-_this.options.borderRadius + hb, -hb);
        return ctx.quadraticCurveTo(hb, -hb, hb, _this.options.borderRadius - hb);
      }
    };
    ctx.translate(-canvasPosition[0], -canvasPosition[1]);
    ctx.save();
    (function() {
      var cornerStem, i, lineLength, lineStem, positionIdx, positionX, positionY, rotation, _j, _ref3, _results;
      _results = [];
      for (i = _j = 0, _ref3 = Opentip.positions.length / 2; 0 <= _ref3 ? _j < _ref3 : _j > _ref3; i = 0 <= _ref3 ? ++_j : --_j) {
        positionIdx = i * 2;
        positionX = i === 0 || i === 3 ? 0 : _this.dimensions.width;
        positionY = i < 2 ? 0 : _this.dimensions.height;
        rotation = (Math.PI / 2) * i;
        lineLength = i % 2 === 0 ? _this.dimensions.width : _this.dimensions.height;
        lineStem = new Opentip.Joint(Opentip.positions[positionIdx]);
        cornerStem = new Opentip.Joint(Opentip.positions[positionIdx + 1]);
        ctx.save();
        ctx.translate(positionX, positionY);
        ctx.rotate(rotation);
        drawLine(lineLength, lineStem.eql(_this.currentStem), i === 0);
        ctx.translate(lineLength, 0);
        drawCorner(cornerStem.eql(_this.currentStem), cornerStem.eql(closeButton), i);
        _results.push(ctx.restore());
      }
      return _results;
    })();
    ctx.closePath();
    ctx.save();
    if (this.options.shadow) {
      ctx.shadowColor = this.options.shadowColor;
      ctx.shadowBlur = this.options.shadowBlur;
      ctx.shadowOffsetX = this.options.shadowOffset[0];
      ctx.shadowOffsetY = this.options.shadowOffset[1];
    }
    ctx.fill();
    ctx.restore();
    if (this.options.borderWidth) {
      ctx.stroke();
    }
    ctx.restore();
    if (closeButton) {
      return (function() {
        var crossCenter, crossHeight, crossWidth, hcs, linkCenter;
        crossWidth = crossHeight = _this.options.closeButtonRadius * 2;
        if (closeButton.toString() === "top right") {
          linkCenter = [_this.dimensions.width - _this.options.closeButtonOffset[0], _this.options.closeButtonOffset[1]];
          crossCenter = [linkCenter[0] + hb, linkCenter[1] - hb];
        } else {
          linkCenter = [_this.options.closeButtonOffset[0], _this.options.closeButtonOffset[1]];
          crossCenter = [linkCenter[0] - hb, linkCenter[1] - hb];
        }
        ctx.translate(crossCenter[0], crossCenter[1]);
        hcs = _this.options.closeButtonCrossSize / 2;
        ctx.save();
        ctx.beginPath();
        ctx.strokeStyle = _this.options.closeButtonCrossColor;
        ctx.lineWidth = _this.options.closeButtonCrossLineWidth;
        ctx.lineCap = "round";
        ctx.moveTo(-hcs, -hcs);
        ctx.lineTo(hcs, hcs);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(hcs, -hcs);
        ctx.lineTo(-hcs, hcs);
        ctx.stroke();
        ctx.restore();
        return _this.adapter.css(_this.closeButtonElement, {
          left: "" + (linkCenter[0] - hcs - _this.options.closeButtonLinkOverscan) + "px",
          top: "" + (linkCenter[1] - hcs - _this.options.closeButtonLinkOverscan) + "px",
          width: "" + (_this.options.closeButtonCrossSize + _this.options.closeButtonLinkOverscan * 2) + "px",
          height: "" + (_this.options.closeButtonCrossSize + _this.options.closeButtonLinkOverscan * 2) + "px"
        });
      })();
    }
  };

  Opentip.prototype._getPathStemMeasures = function(outerStemBase, outerStemLength, borderWidth) {
    var angle, distanceBetweenTips, halfAngle, hb, rhombusSide, stemBase, stemLength;
    hb = borderWidth / 2;
    halfAngle = Math.atan((outerStemBase / 2) / outerStemLength);
    angle = halfAngle * 2;
    rhombusSide = hb / Math.sin(angle);
    distanceBetweenTips = 2 * rhombusSide * Math.cos(halfAngle);
    stemLength = hb + outerStemLength - distanceBetweenTips;
    if (stemLength < 0) {
      throw new Error("Sorry but your stemLength / stemBase ratio is strange.");
    }
    stemBase = (Math.tan(halfAngle) * stemLength) * 2;
    return {
      stemLength: stemLength,
      stemBase: stemBase
    };
  };

  Opentip.prototype._getColor = function(ctx, dimensions, color, horizontal) {
    var colorStop, gradient, i, _i, _len;
    if (horizontal == null) {
      horizontal = false;
    }
    if (typeof color === "string") {
      return color;
    }
    if (horizontal) {
      gradient = ctx.createLinearGradient(0, 0, dimensions.width, 0);
    } else {
      gradient = ctx.createLinearGradient(0, 0, 0, dimensions.height);
    }
    for (i = _i = 0, _len = color.length; _i < _len; i = ++_i) {
      colorStop = color[i];
      gradient.addColorStop(colorStop[0], colorStop[1]);
    }
    return gradient;
  };

  Opentip.prototype._searchAndActivateCloseButtons = function() {
    var element, _i, _len, _ref;
    _ref = this.adapter.findAll(this.container, "." + this["class"].close);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      this.hideTriggers.push({
        element: this.adapter.wrap(element),
        event: "click"
      });
    }
    if (this.currentObservers.showing) {
      this._setupObservers("-showing", "showing");
    }
    if (this.currentObservers.visible) {
      return this._setupObservers("-visible", "visible");
    }
  };

  Opentip.prototype._activateFirstInput = function() {
    var input;
    input = this.adapter.unwrap(this.adapter.find(this.container, "input, textarea"));
    return input != null ? typeof input.focus === "function" ? input.focus() : void 0 : void 0;
  };

  Opentip.prototype._followMousePosition = function() {
    if (!this.options.fixed) {
      return Opentip._observeMousePosition(this.bound.reposition);
    }
  };

  Opentip.prototype._stopFollowingMousePosition = function() {
    if (!this.options.fixed) {
      return Opentip._stopObservingMousePosition(this.bound.reposition);
    }
  };

  Opentip.prototype._clearShowTimeout = function() {
    return clearTimeout(this._showTimeoutId);
  };

  Opentip.prototype._clearHideTimeout = function() {
    return clearTimeout(this._hideTimeoutId);
  };

  Opentip.prototype._clearTimeouts = function() {
    clearTimeout(this._visibilityStateTimeoutId);
    this._clearShowTimeout();
    return this._clearHideTimeout();
  };

  Opentip.prototype._triggerElementExists = function() {
    var el;
    el = this.adapter.unwrap(this.triggerElement);
    while (el.parentNode) {
      if (el.parentNode.tagName === "BODY") {
        return true;
      }
      el = el.parentNode;
    }
    return false;
  };

  Opentip.prototype._loadAjax = function() {
    var _this = this;
    if (this.loading) {
      return;
    }
    this.loaded = false;
    this.loading = true;
    this.adapter.addClass(this.container, this["class"].loading);
    this.setContent("");
    this.debug("Loading content from " + this.options.ajax);
    return this.adapter.ajax({
      url: this.options.ajax,
      method: this.options.ajaxMethod,
      onSuccess: function(responseText) {
        _this.debug("Loading successful.");
        _this.adapter.removeClass(_this.container, _this["class"].loading);
        return _this.setContent(responseText);
      },
      onError: function(error) {
        var message;
        message = _this.options.ajaxErrorMessage;
        _this.debug(message, error);
        _this.setContent(message);
        return _this.adapter.addClass(_this.container, _this["class"].ajaxError);
      },
      onComplete: function() {
        _this.adapter.removeClass(_this.container, _this["class"].loading);
        _this.loading = false;
        _this.loaded = true;
        _this._searchAndActivateCloseButtons();
        _this._activateFirstInput();
        return _this.reposition();
      }
    });
  };

  Opentip.prototype._ensureTriggerElement = function() {
    if (!this._triggerElementExists()) {
      this.deactivate();
      return this._stopEnsureTriggerElement();
    }
  };

  Opentip.prototype._ensureTriggerElementInterval = 1000;

  Opentip.prototype._startEnsureTriggerElement = function() {
    var _this = this;
    return this._ensureTriggerElementTimeoutId = setInterval((function() {
      return _this._ensureTriggerElement();
    }), this._ensureTriggerElementInterval);
  };

  Opentip.prototype._stopEnsureTriggerElement = function() {
    return clearInterval(this._ensureTriggerElementTimeoutId);
  };

  return Opentip;

})();

vendors = ["khtml", "ms", "o", "moz", "webkit"];

Opentip.prototype.setCss3Style = function(element, styles) {
  var prop, value, vendor, vendorProp, _results;
  element = this.adapter.unwrap(element);
  _results = [];
  for (prop in styles) {
    if (!__hasProp.call(styles, prop)) continue;
    value = styles[prop];
    if (element.style[prop] != null) {
      _results.push(element.style[prop] = value);
    } else {
      _results.push((function() {
        var _i, _len, _results1;
        _results1 = [];
        for (_i = 0, _len = vendors.length; _i < _len; _i++) {
          vendor = vendors[_i];
          vendorProp = "" + (this.ucfirst(vendor)) + (this.ucfirst(prop));
          if (element.style[vendorProp] != null) {
            _results1.push(element.style[vendorProp] = value);
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }).call(this));
    }
  }
  return _results;
};

Opentip.prototype.defer = function(func) {
  return setTimeout(func, 0);
};

Opentip.prototype.setTimeout = function(func, seconds) {
  return setTimeout(func, seconds ? seconds * 1000 : 0);
};

Opentip.prototype.ucfirst = function(string) {
  if (string == null) {
    return "";
  }
  return string.charAt(0).toUpperCase() + string.slice(1);
};

Opentip.prototype.dasherize = function(string) {
  return string.replace(/([A-Z])/g, function(_, character) {
    return "-" + (character.toLowerCase());
  });
};

mousePositionObservers = [];

mousePosition = {
  x: 0,
  y: 0
};

mouseMoved = function(e) {
  var observer, _i, _len, _results;
  mousePosition = Opentip.adapter.mousePosition(e);
  _results = [];
  for (_i = 0, _len = mousePositionObservers.length; _i < _len; _i++) {
    observer = mousePositionObservers[_i];
    _results.push(observer());
  }
  return _results;
};

Opentip.followMousePosition = function() {
  return Opentip.adapter.observe(document.body, "mousemove", mouseMoved);
};

Opentip._observeMousePosition = function(observer) {
  return mousePositionObservers.push(observer);
};

Opentip._stopObservingMousePosition = function(removeObserver) {
  var observer;
  return mousePositionObservers = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = mousePositionObservers.length; _i < _len; _i++) {
      observer = mousePositionObservers[_i];
      if (observer !== removeObserver) {
        _results.push(observer);
      }
    }
    return _results;
  })();
};

Opentip.Joint = (function() {

  function Joint(pointerString) {
    if (pointerString == null) {
      return;
    }
    if (pointerString instanceof Opentip.Joint) {
      pointerString = pointerString.toString();
    }
    this.set(pointerString);
    this;

  }

  Joint.prototype.set = function(string) {
    string = string.toLowerCase();
    this.setHorizontal(string);
    this.setVertical(string);
    return this;
  };

  Joint.prototype.setHorizontal = function(string) {
    var i, valid, _i, _j, _len, _len1, _results;
    valid = ["left", "center", "right"];
    for (_i = 0, _len = valid.length; _i < _len; _i++) {
      i = valid[_i];
      if (~string.indexOf(i)) {
        this.horizontal = i.toLowerCase();
      }
    }
    if (this.horizontal == null) {
      this.horizontal = "center";
    }
    _results = [];
    for (_j = 0, _len1 = valid.length; _j < _len1; _j++) {
      i = valid[_j];
      _results.push(this[i] = this.horizontal === i ? i : void 0);
    }
    return _results;
  };

  Joint.prototype.setVertical = function(string) {
    var i, valid, _i, _j, _len, _len1, _results;
    valid = ["top", "middle", "bottom"];
    for (_i = 0, _len = valid.length; _i < _len; _i++) {
      i = valid[_i];
      if (~string.indexOf(i)) {
        this.vertical = i.toLowerCase();
      }
    }
    if (this.vertical == null) {
      this.vertical = "middle";
    }
    _results = [];
    for (_j = 0, _len1 = valid.length; _j < _len1; _j++) {
      i = valid[_j];
      _results.push(this[i] = this.vertical === i ? i : void 0);
    }
    return _results;
  };

  Joint.prototype.eql = function(pointer) {
    return (pointer != null) && this.horizontal === pointer.horizontal && this.vertical === pointer.vertical;
  };

  Joint.prototype.flip = function() {
    var flippedIndex, positionIdx;
    positionIdx = Opentip.position[this.toString(true)];
    flippedIndex = (positionIdx + 4) % 8;
    this.set(Opentip.positions[flippedIndex]);
    return this;
  };

  Joint.prototype.toString = function(camelized) {
    var horizontal, vertical;
    if (camelized == null) {
      camelized = false;
    }
    vertical = this.vertical === "middle" ? "" : this.vertical;
    horizontal = this.horizontal === "center" ? "" : this.horizontal;
    if (vertical && horizontal) {
      if (camelized) {
        horizontal = Opentip.prototype.ucfirst(horizontal);
      } else {
        horizontal = " " + horizontal;
      }
    }
    return "" + vertical + horizontal;
  };

  return Joint;

})();

Opentip.prototype._positionsEqual = function(posA, posB) {
  return (posA != null) && (posB != null) && posA.left === posB.left && posA.top === posB.top;
};

Opentip.prototype._dimensionsEqual = function(dimA, dimB) {
  return (dimA != null) && (dimB != null) && dimA.width === dimB.width && dimA.height === dimB.height;
};

Opentip.prototype.debug = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  if (Opentip.debug && ((typeof console !== "undefined" && console !== null ? console.debug : void 0) != null)) {
    args.unshift("#" + this.id + " |");
    return console.debug.apply(console, args);
  }
};

Opentip.findElements = function() {
  var adapter, content, element, optionName, optionValue, options, _i, _len, _ref, _results;
  adapter = Opentip.adapter;
  _ref = adapter.findAll(document.body, "[data-ot]");
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    element = _ref[_i];
    options = {};
    content = adapter.data(element, "ot");
    if (content === "" || content === "true" || content === "yes") {
      content = adapter.attr(element, "title");
      adapter.attr(element, "title", "");
    }
    content = content || "";
    for (optionName in Opentip.styles.standard) {
      optionValue = adapter.data(element, "ot" + (Opentip.prototype.ucfirst(optionName)));
      if (optionValue != null) {
        if (optionValue === "yes" || optionValue === "true" || optionValue === "on") {
          optionValue = true;
        } else if (optionValue === "no" || optionValue === "false" || optionValue === "off") {
          optionValue = false;
        }
        options[optionName] = optionValue;
      }
    }
    _results.push(new Opentip(element, content, options));
  }
  return _results;
};

Opentip.version = "2.4.6";

Opentip.debug = false;

Opentip.lastId = 0;

Opentip.lastZIndex = 100;

Opentip.tips = [];

Opentip._abortShowingGroup = function(group, originatingOpentip) {
  var opentip, _i, _len, _ref, _results;
  _ref = Opentip.tips;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    opentip = _ref[_i];
    if (opentip !== originatingOpentip && opentip.options.group === group) {
      _results.push(opentip._abortShowing());
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

Opentip._hideGroup = function(group, originatingOpentip) {
  var opentip, _i, _len, _ref, _results;
  _ref = Opentip.tips;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    opentip = _ref[_i];
    if (opentip !== originatingOpentip && opentip.options.group === group) {
      _results.push(opentip.hide());
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

Opentip.adapters = {};

Opentip.adapter = null;

firstAdapter = true;

Opentip.addAdapter = function(adapter) {
  Opentip.adapters[adapter.name] = adapter;
  if (firstAdapter) {
    Opentip.adapter = adapter;
    adapter.domReady(Opentip.findElements);
    adapter.domReady(Opentip.followMousePosition);
    return firstAdapter = false;
  }
};

Opentip.positions = ["top", "topRight", "right", "bottomRight", "bottom", "bottomLeft", "left", "topLeft"];

Opentip.position = {};

_ref = Opentip.positions;
for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
  position = _ref[i];
  Opentip.position[position] = i;
}

Opentip.styles = {
  standard: {
    "extends": null,
    title: void 0,
    escapeTitle: true,
    escapeContent: false,
    className: "standard",
    stem: true,
    delay: null,
    hideDelay: 0.1,
    fixed: false,
    showOn: "mouseover",
    hideTrigger: "trigger",
    hideTriggers: [],
    hideOn: null,
    removeElementsOnHide: false,
    offset: [0, 0],
    containInViewport: true,
    autoOffset: true,
    showEffect: "appear",
    hideEffect: "fade",
    showEffectDuration: 0.3,
    hideEffectDuration: 0.2,
    stemLength: 5,
    stemBase: 8,
    tipJoint: "top left",
    target: null,
    targetJoint: null,
    cache: true,
    ajax: false,
    ajaxMethod: "GET",
    ajaxErrorMessage: "There was a problem downloading the content.",
    group: null,
    style: null,
    background: "#fff18f",
    backgroundGradientHorizontal: false,
    closeButtonOffset: [5, 5],
    closeButtonRadius: 7,
    closeButtonCrossSize: 4,
    closeButtonCrossColor: "#d2c35b",
    closeButtonCrossLineWidth: 1.5,
    closeButtonLinkOverscan: 6,
    borderRadius: 5,
    borderWidth: 1,
    borderColor: "#f2e37b",
    shadow: true,
    shadowBlur: 10,
    shadowOffset: [3, 3],
    shadowColor: "rgba(0, 0, 0, 0.1)"
  },
  glass: {
    "extends": "standard",
    className: "glass",
    background: [[0, "rgba(252, 252, 252, 0.8)"], [0.5, "rgba(255, 255, 255, 0.8)"], [0.5, "rgba(250, 250, 250, 0.9)"], [1, "rgba(245, 245, 245, 0.9)"]],
    borderColor: "#eee",
    closeButtonCrossColor: "rgba(0, 0, 0, 0.2)",
    borderRadius: 15,
    closeButtonRadius: 10,
    closeButtonOffset: [8, 8]
  },
  dark: {
    "extends": "standard",
    className: "dark",
    borderRadius: 13,
    borderColor: "#444",
    closeButtonCrossColor: "rgba(240, 240, 240, 1)",
    shadowColor: "rgba(0, 0, 0, 0.3)",
    shadowOffset: [2, 2],
    background: [[0, "rgba(30, 30, 30, 0.7)"], [0.5, "rgba(30, 30, 30, 0.8)"], [0.5, "rgba(10, 10, 10, 0.8)"], [1, "rgba(10, 10, 10, 0.9)"]]
  },
  alert: {
    "extends": "standard",
    className: "alert",
    borderRadius: 1,
    borderColor: "#AE0D11",
    closeButtonCrossColor: "rgba(255, 255, 255, 1)",
    shadowColor: "rgba(0, 0, 0, 0.3)",
    shadowOffset: [2, 2],
    background: [[0, "rgba(203, 15, 19, 0.7)"], [0.5, "rgba(203, 15, 19, 0.8)"], [0.5, "rgba(189, 14, 18, 0.8)"], [1, "rgba(179, 14, 17, 0.9)"]]
  }
};

Opentip.defaultStyle = "standard";

if (typeof module !== "undefined" && module !== null) {
  module.exports = Opentip;
} else {
  window.Opentip = Opentip;
}


// Generated by CoffeeScript 1.4.0
var Adapter,
  __hasProp = {}.hasOwnProperty,
  __slice = [].slice;

Adapter = (function() {
  var dataValues, lastDataId;

  function Adapter() {}

  Adapter.prototype.name = "native";

  Adapter.prototype.domReady = function(callback) {
    var add, doc, done, init, poll, pre, rem, root, top, win, _ref;
    done = false;
    top = true;
    win = window;
    doc = document;
    if ((_ref = doc.readyState) === "complete" || _ref === "loaded") {
      return callback();
    }
    root = doc.documentElement;
    add = (doc.addEventListener ? "addEventListener" : "attachEvent");
    rem = (doc.addEventListener ? "removeEventListener" : "detachEvent");
    pre = (doc.addEventListener ? "" : "on");
    init = function(e) {
      if (e.type === "readystatechange" && doc.readyState !== "complete") {
        return;
      }
      (e.type === "load" ? win : doc)[rem](pre + e.type, init, false);
      if (!done) {
        done = true;
        return callback();
      }
    };
    poll = function() {
      try {
        root.doScroll("left");
      } catch (e) {
        setTimeout(poll, 50);
        return;
      }
      return init("poll");
    };
    if (doc.readyState !== "complete") {
      if (doc.createEventObject && root.doScroll) {
        try {
          top = !win.frameElement;
        } catch (_error) {}
        if (top) {
          poll();
        }
      }
      doc[add](pre + "DOMContentLoaded", init, false);
      doc[add](pre + "readystatechange", init, false);
      return win[add](pre + "load", init, false);
    }
  };

  Adapter.prototype.create = function(htmlString) {
    var div;
    div = document.createElement("div");
    div.innerHTML = htmlString;
    return this.wrap(div.childNodes);
  };

  Adapter.prototype.wrap = function(element) {
    var el;
    if (!element) {
      element = [];
    } else if (typeof element === "string") {
      element = this.find(document.body, element);
      element = element ? [element] : [];
    } else if (element instanceof NodeList) {
      element = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = element.length; _i < _len; _i++) {
          el = element[_i];
          _results.push(el);
        }
        return _results;
      })();
    } else if (!(element instanceof Array)) {
      element = [element];
    }
    return element;
  };

  Adapter.prototype.unwrap = function(element) {
    return this.wrap(element)[0];
  };

  Adapter.prototype.tagName = function(element) {
    return this.unwrap(element).tagName;
  };

  Adapter.prototype.attr = function(element, attr, value) {
    if (arguments.length === 3) {
      return this.unwrap(element).setAttribute(attr, value);
    } else {
      return this.unwrap(element).getAttribute(attr);
    }
  };

  lastDataId = 0;

  dataValues = {};

  Adapter.prototype.data = function(element, name, value) {
    var dataId;
    dataId = this.attr(element, "data-id");
    if (!dataId) {
      dataId = ++lastDataId;
      this.attr(element, "data-id", dataId);
      dataValues[dataId] = {};
    }
    if (arguments.length === 3) {
      return dataValues[dataId][name] = value;
    } else {
      value = dataValues[dataId][name];
      if (value != null) {
        return value;
      }
      value = this.attr(element, "data-" + (Opentip.prototype.dasherize(name)));
      if (value) {
        dataValues[dataId][name] = value;
      }
      return value;
    }
  };

  Adapter.prototype.find = function(element, selector) {
    return this.unwrap(element).querySelector(selector);
  };

  Adapter.prototype.findAll = function(element, selector) {
    return this.unwrap(element).querySelectorAll(selector);
  };

  Adapter.prototype.update = function(element, content, escape) {
    element = this.unwrap(element);
    if (escape) {
      element.innerHTML = "";
      return element.appendChild(document.createTextNode(content));
    } else {
      return element.innerHTML = content;
    }
  };

  Adapter.prototype.append = function(element, child) {
    var unwrappedChild, unwrappedElement;
    unwrappedChild = this.unwrap(child);
    unwrappedElement = this.unwrap(element);
    return unwrappedElement.appendChild(unwrappedChild);
  };

  Adapter.prototype.remove = function(element) {
    var parentNode;
    element = this.unwrap(element);
    parentNode = element.parentNode;
    if (parentNode != null) {
      return parentNode.removeChild(element);
    }
  };

  Adapter.prototype.addClass = function(element, className) {
    return this.unwrap(element).classList.add(className);
  };

  Adapter.prototype.removeClass = function(element, className) {
    return this.unwrap(element).classList.remove(className);
  };

  Adapter.prototype.css = function(element, properties) {
    var key, value, _results;
    element = this.unwrap(this.wrap(element));
    _results = [];
    for (key in properties) {
      if (!__hasProp.call(properties, key)) continue;
      value = properties[key];
      _results.push(element.style[key] = value);
    }
    return _results;
  };

  Adapter.prototype.dimensions = function(element) {
    var dimensions, revert;
    element = this.unwrap(this.wrap(element));
    dimensions = {
      width: element.offsetWidth,
      height: element.offsetHeight
    };
    if (!(dimensions.width && dimensions.height)) {
      revert = {
        position: element.style.position || '',
        visibility: element.style.visibility || '',
        display: element.style.display || ''
      };
      this.css(element, {
        position: "absolute",
        visibility: "hidden",
        display: "block"
      });
      dimensions = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      this.css(element, revert);
    }
    return dimensions;
  };

  Adapter.prototype.scrollOffset = function() {
    return [window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft, window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop];
  };

  Adapter.prototype.viewportDimensions = function() {
    return {
      width: document.documentElement.clientWidth,
      height: document.documentElement.clientHeight
    };
  };

  Adapter.prototype.mousePosition = function(e) {
    var pos;
    pos = {
      x: 0,
      y: 0
    };
    if (e == null) {
      e = window.event;
    }
    if (e == null) {
      return;
    }
    try {
      if (e.pageX || e.pageY) {
        pos.x = e.pageX;
        pos.y = e.pageY;
      } else if (e.clientX || e.clientY) {
        pos.x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
        pos.y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
      }
    } catch (e) {

    }
    return pos;
  };

  Adapter.prototype.offset = function(element) {
    var offset;
    element = this.unwrap(element);
    offset = {
      top: element.offsetTop,
      left: element.offsetLeft
    };
    while (element = element.offsetParent) {
      offset.top += element.offsetTop;
      offset.left += element.offsetLeft;
      if (element !== document.body) {
        offset.top -= element.scrollTop;
        offset.left -= element.scrollLeft;
      }
    }
    return offset;
  };

  Adapter.prototype.observe = function(element, eventName, observer) {
    return this.unwrap(element).addEventListener(eventName, observer, false);
  };

  Adapter.prototype.stopObserving = function(element, eventName, observer) {
    return this.unwrap(element).removeEventListener(eventName, observer, false);
  };

  Adapter.prototype.ajax = function(options) {
    var request, _ref, _ref1;
    if (options.url == null) {
      throw new Error("No url provided");
    }
    if (window.XMLHttpRequest) {
      request = new XMLHttpRequest;
    } else if (window.ActiveXObject) {
      try {
        request = new ActiveXObject("Msxml2.XMLHTTP");
      } catch (e) {
        try {
          request = new ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {

        }
      }
    }
    if (!request) {
      throw new Error("Can't create XMLHttpRequest");
    }
    request.onreadystatechange = function() {
      if (request.readyState === 4) {
        try {
          if (request.status === 200) {
            if (typeof options.onSuccess === "function") {
              options.onSuccess(request.responseText);
            }
          } else {
            if (typeof options.onError === "function") {
              options.onError("Server responded with status " + request.status);
            }
          }
        } catch (e) {
          if (typeof options.onError === "function") {
            options.onError(e.message);
          }
        }
        return typeof options.onComplete === "function" ? options.onComplete() : void 0;
      }
    };
    request.open((_ref = (_ref1 = options.method) != null ? _ref1.toUpperCase() : void 0) != null ? _ref : "GET", options.url);
    return request.send();
  };

  Adapter.prototype.clone = function(object) {
    var key, newObject, val;
    newObject = {};
    for (key in object) {
      if (!__hasProp.call(object, key)) continue;
      val = object[key];
      newObject[key] = val;
    }
    return newObject;
  };

  Adapter.prototype.extend = function() {
    var key, source, sources, target, val, _i, _len;
    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      for (key in source) {
        if (!__hasProp.call(source, key)) continue;
        val = source[key];
        target[key] = val;
      }
    }
    return target;
  };

  return Adapter;

})();

Opentip.addAdapter(new Adapter);


// Modified by Matias Meno to work in IE8.
// I removed the line 312, as proposed by someone on the google forum.

// Copyright 2006 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Known Issues:
//
// * Patterns are not implemented.
// * Radial gradient are not implemented. The VML version of these look very
//   different from the canvas one.
// * Clipping paths are not implemented.
// * Coordsize. The width and height attribute have higher priority than the
//   width and height style values which isn't correct.
// * Painting mode isn't implemented.
// * Canvas width/height should is using content-box by default. IE in
//   Quirks mode will draw the canvas using border-box. Either change your
//   doctype to HTML5
//   (http://www.whatwg.org/specs/web-apps/current-work/#the-doctype)
//   or use Box Sizing Behavior from WebFX
//   (http://webfx.eae.net/dhtml/boxsizing/boxsizing.html)
// * Non uniform scaling does not correctly scale strokes.
// * Optimize. There is always room for speed improvements.

// Only add this code if we do not already have a canvas implementation
if (!document.createElement('canvas').getContext) {

(function() {

  // alias some functions to make (compiled) code shorter
  var m = Math;
  var mr = m.round;
  var ms = m.sin;
  var mc = m.cos;
  var abs = m.abs;
  var sqrt = m.sqrt;

  // this is used for sub pixel precision
  var Z = 10;
  var Z2 = Z / 2;

  /**
   * This funtion is assigned to the <canvas> elements as element.getContext().
   * @this {HTMLElement}
   * @return {CanvasRenderingContext2D_}
   */
  function getContext() {
    return this.context_ ||
        (this.context_ = new CanvasRenderingContext2D_(this));
  }

  var slice = Array.prototype.slice;

  /**
   * Binds a function to an object. The returned function will always use the
   * passed in {@code obj} as {@code this}.
   *
   * Example:
   *
   *   g = bind(f, obj, a, b)
   *   g(c, d) // will do f.call(obj, a, b, c, d)
   *
   * @param {Function} f The function to bind the object to
   * @param {Object} obj The object that should act as this when the function
   *     is called
   * @param {*} var_args Rest arguments that will be used as the initial
   *     arguments when the function is called
   * @return {Function} A new function that has bound this
   */
  function bind(f, obj, var_args) {
    var a = slice.call(arguments, 2);
    return function() {
      return f.apply(obj, a.concat(slice.call(arguments)));
    };
  }

  var G_vmlCanvasManager_ = {
    init: function(opt_doc) {
      if (/MSIE/.test(navigator.userAgent) && !window.opera) {
        var doc = opt_doc || document;
        // Create a dummy element so that IE will allow canvas elements to be
        // recognized.
        doc.createElement('canvas');
        doc.attachEvent('onreadystatechange', bind(this.init_, this, doc));
      }
    },

    init_: function(doc) {
      // create xmlns
      if (!doc.namespaces['g_vml_']) {
        doc.namespaces.add('g_vml_', 'urn:schemas-microsoft-com:vml',
                           '#default#VML');

      }
      if (!doc.namespaces['g_o_']) {
        doc.namespaces.add('g_o_', 'urn:schemas-microsoft-com:office:office',
                           '#default#VML');
      }

      // Setup default CSS.  Only add one style sheet per document
      if (!doc.styleSheets['ex_canvas_']) {
        var ss = doc.createStyleSheet();
        ss.owningElement.id = 'ex_canvas_';
        ss.cssText = 'canvas{display:inline-block;overflow:hidden;' +
            // default size is 300x150 in Gecko and Opera
            'text-align:left;width:300px;height:150px}' +
            'g_vml_\\:*{behavior:url(#default#VML)}' +
            'g_o_\\:*{behavior:url(#default#VML)}';

      }

      // find all canvas elements
      var els = doc.getElementsByTagName('canvas');
      for (var i = 0; i < els.length; i++) {
        this.initElement(els[i]);
      }
    },

    /**
     * Public initializes a canvas element so that it can be used as canvas
     * element from now on. This is called automatically before the page is
     * loaded but if you are creating elements using createElement you need to
     * make sure this is called on the element.
     * @param {HTMLElement} el The canvas element to initialize.
     * @return {HTMLElement} the element that was created.
     */
    initElement: function(el) {
      if (!el.getContext) {

        el.getContext = getContext;

        // Remove fallback content. There is no way to hide text nodes so we
        // just remove all childNodes. We could hide all elements and remove
        // text nodes but who really cares about the fallback content.
        el.innerHTML = '';

        // do not use inline function because that will leak memory
        el.attachEvent('onpropertychange', onPropertyChange);
        el.attachEvent('onresize', onResize);

        var attrs = el.attributes;
        if (attrs.width && attrs.width.specified) {
          // TODO: use runtimeStyle and coordsize
          // el.getContext().setWidth_(attrs.width.nodeValue);
          el.style.width = attrs.width.nodeValue + 'px';
        } else {
          el.width = el.clientWidth;
        }
        if (attrs.height && attrs.height.specified) {
          // TODO: use runtimeStyle and coordsize
          // el.getContext().setHeight_(attrs.height.nodeValue);
          el.style.height = attrs.height.nodeValue + 'px';
        } else {
          el.height = el.clientHeight;
        }
        //el.getContext().setCoordsize_()
      }
      return el;
    }
  };

  function onPropertyChange(e) {
    var el = e.srcElement;

    switch (e.propertyName) {
      case 'width':
        el.style.width = el.attributes.width.nodeValue + 'px';
        el.getContext().clearRect();
        break;
      case 'height':
        el.style.height = el.attributes.height.nodeValue + 'px';
        el.getContext().clearRect();
        break;
    }
  }

  function onResize(e) {
    var el = e.srcElement;
    if (el.firstChild) {
      el.firstChild.style.width =  el.clientWidth + 'px';
      el.firstChild.style.height = el.clientHeight + 'px';
    }
  }

  G_vmlCanvasManager_.init();

  // precompute "00" to "FF"
  var dec2hex = [];
  for (var i = 0; i < 16; i++) {
    for (var j = 0; j < 16; j++) {
      dec2hex[i * 16 + j] = i.toString(16) + j.toString(16);
    }
  }

  function createMatrixIdentity() {
    return [
      [1, 0, 0],
      [0, 1, 0],
      [0, 0, 1]
    ];
  }

  function matrixMultiply(m1, m2) {
    var result = createMatrixIdentity();

    for (var x = 0; x < 3; x++) {
      for (var y = 0; y < 3; y++) {
        var sum = 0;

        for (var z = 0; z < 3; z++) {
          sum += m1[x][z] * m2[z][y];
        }

        result[x][y] = sum;
      }
    }
    return result;
  }

  function copyState(o1, o2) {
    o2.fillStyle     = o1.fillStyle;
    o2.lineCap       = o1.lineCap;
    o2.lineJoin      = o1.lineJoin;
    o2.lineWidth     = o1.lineWidth;
    o2.miterLimit    = o1.miterLimit;
    o2.shadowBlur    = o1.shadowBlur;
    o2.shadowColor   = o1.shadowColor;
    o2.shadowOffsetX = o1.shadowOffsetX;
    o2.shadowOffsetY = o1.shadowOffsetY;
    o2.strokeStyle   = o1.strokeStyle;
    o2.globalAlpha   = o1.globalAlpha;
    o2.arcScaleX_    = o1.arcScaleX_;
    o2.arcScaleY_    = o1.arcScaleY_;
    o2.lineScale_    = o1.lineScale_;
  }

  function processStyle(styleString) {
    var str, alpha = 1;

    styleString = String(styleString);
    if (styleString.substring(0, 3) == 'rgb') {
      var start = styleString.indexOf('(', 3);
      var end = styleString.indexOf(')', start + 1);
      var guts = styleString.substring(start + 1, end).split(',');

      str = '#';
      for (var i = 0; i < 3; i++) {
        str += dec2hex[Number(guts[i])];
      }

      if (guts.length == 4 && styleString.substr(3, 1) == 'a') {
        alpha = guts[3];
      }
    } else {
      str = styleString;
    }

    return {color: str, alpha: alpha};
  }

  function processLineCap(lineCap) {
    switch (lineCap) {
      case 'butt':
        return 'flat';
      case 'round':
        return 'round';
      case 'square':
      default:
        return 'square';
    }
  }

  /**
   * This class implements CanvasRenderingContext2D interface as described by
   * the WHATWG.
   * @param {HTMLElement} surfaceElement The element that the 2D context should
   * be associated with
   */
  function CanvasRenderingContext2D_(surfaceElement) {
    this.m_ = createMatrixIdentity();

    this.mStack_ = [];
    this.aStack_ = [];
    this.currentPath_ = [];

    // Canvas context properties
    this.strokeStyle = '#000';
    this.fillStyle = '#000';

    this.lineWidth = 1;
    this.lineJoin = 'miter';
    this.lineCap = 'butt';
    this.miterLimit = Z * 1;
    this.globalAlpha = 1;
    this.canvas = surfaceElement;

    var el = surfaceElement.ownerDocument.createElement('div');
    el.style.width =  surfaceElement.clientWidth + 'px';
    el.style.height = surfaceElement.clientHeight + 'px';
    // el.style.overflow = 'hidden';
    el.style.position = 'absolute';
    surfaceElement.appendChild(el);

    this.element_ = el;
    this.arcScaleX_ = 1;
    this.arcScaleY_ = 1;
    this.lineScale_ = 1;
  }

  var contextPrototype = CanvasRenderingContext2D_.prototype;
  contextPrototype.clearRect = function() {
    this.element_.innerHTML = '';
  };

  contextPrototype.beginPath = function() {
    // TODO: Branch current matrix so that save/restore has no effect
    //       as per safari docs.
    this.currentPath_ = [];
  };

  contextPrototype.moveTo = function(aX, aY) {
    var p = this.getCoords_(aX, aY);
    this.currentPath_.push({type: 'moveTo', x: p.x, y: p.y});
    this.currentX_ = p.x;
    this.currentY_ = p.y;
  };

  contextPrototype.lineTo = function(aX, aY) {
    var p = this.getCoords_(aX, aY);
    this.currentPath_.push({type: 'lineTo', x: p.x, y: p.y});

    this.currentX_ = p.x;
    this.currentY_ = p.y;
  };

  contextPrototype.bezierCurveTo = function(aCP1x, aCP1y,
                                            aCP2x, aCP2y,
                                            aX, aY) {
    var p = this.getCoords_(aX, aY);
    var cp1 = this.getCoords_(aCP1x, aCP1y);
    var cp2 = this.getCoords_(aCP2x, aCP2y);
    bezierCurveTo(this, cp1, cp2, p);
  };

  // Helper function that takes the already fixed cordinates.
  function bezierCurveTo(self, cp1, cp2, p) {
    self.currentPath_.push({
      type: 'bezierCurveTo',
      cp1x: cp1.x,
      cp1y: cp1.y,
      cp2x: cp2.x,
      cp2y: cp2.y,
      x: p.x,
      y: p.y
    });
    self.currentX_ = p.x;
    self.currentY_ = p.y;
  }

  contextPrototype.quadraticCurveTo = function(aCPx, aCPy, aX, aY) {
    // the following is lifted almost directly from
    // http://developer.mozilla.org/en/docs/Canvas_tutorial:Drawing_shapes

    var cp = this.getCoords_(aCPx, aCPy);
    var p = this.getCoords_(aX, aY);

    var cp1 = {
      x: this.currentX_ + 2.0 / 3.0 * (cp.x - this.currentX_),
      y: this.currentY_ + 2.0 / 3.0 * (cp.y - this.currentY_)
    };
    var cp2 = {
      x: cp1.x + (p.x - this.currentX_) / 3.0,
      y: cp1.y + (p.y - this.currentY_) / 3.0
    };

    bezierCurveTo(this, cp1, cp2, p);
  };

  contextPrototype.arc = function(aX, aY, aRadius,
                                  aStartAngle, aEndAngle, aClockwise) {
    aRadius *= Z;
    var arcType = aClockwise ? 'at' : 'wa';

    var xStart = aX + mc(aStartAngle) * aRadius - Z2;
    var yStart = aY + ms(aStartAngle) * aRadius - Z2;

    var xEnd = aX + mc(aEndAngle) * aRadius - Z2;
    var yEnd = aY + ms(aEndAngle) * aRadius - Z2;

    // IE won't render arches drawn counter clockwise if xStart == xEnd.
    if (xStart == xEnd && !aClockwise) {
      xStart += 0.125; // Offset xStart by 1/80 of a pixel. Use something
                       // that can be represented in binary
    }

    var p = this.getCoords_(aX, aY);
    var pStart = this.getCoords_(xStart, yStart);
    var pEnd = this.getCoords_(xEnd, yEnd);

    this.currentPath_.push({type: arcType,
                           x: p.x,
                           y: p.y,
                           radius: aRadius,
                           xStart: pStart.x,
                           yStart: pStart.y,
                           xEnd: pEnd.x,
                           yEnd: pEnd.y});

  };

  contextPrototype.rect = function(aX, aY, aWidth, aHeight) {
    this.moveTo(aX, aY);
    this.lineTo(aX + aWidth, aY);
    this.lineTo(aX + aWidth, aY + aHeight);
    this.lineTo(aX, aY + aHeight);
    this.closePath();
  };

  contextPrototype.strokeRect = function(aX, aY, aWidth, aHeight) {
    var oldPath = this.currentPath_;
    this.beginPath();

    this.moveTo(aX, aY);
    this.lineTo(aX + aWidth, aY);
    this.lineTo(aX + aWidth, aY + aHeight);
    this.lineTo(aX, aY + aHeight);
    this.closePath();
    this.stroke();

    this.currentPath_ = oldPath;
  };

  contextPrototype.fillRect = function(aX, aY, aWidth, aHeight) {
    var oldPath = this.currentPath_;
    this.beginPath();

    this.moveTo(aX, aY);
    this.lineTo(aX + aWidth, aY);
    this.lineTo(aX + aWidth, aY + aHeight);
    this.lineTo(aX, aY + aHeight);
    this.closePath();
    this.fill();

    this.currentPath_ = oldPath;
  };

  contextPrototype.createLinearGradient = function(aX0, aY0, aX1, aY1) {
    var gradient = new CanvasGradient_('gradient');
    gradient.x0_ = aX0;
    gradient.y0_ = aY0;
    gradient.x1_ = aX1;
    gradient.y1_ = aY1;
    return gradient;
  };

  contextPrototype.createRadialGradient = function(aX0, aY0, aR0,
                                                   aX1, aY1, aR1) {
    var gradient = new CanvasGradient_('gradientradial');
    gradient.x0_ = aX0;
    gradient.y0_ = aY0;
    gradient.r0_ = aR0;
    gradient.x1_ = aX1;
    gradient.y1_ = aY1;
    gradient.r1_ = aR1;
    return gradient;
  };

  contextPrototype.drawImage = function(image, var_args) {
    var dx, dy, dw, dh, sx, sy, sw, sh;

    // to find the original width we overide the width and height
    var oldRuntimeWidth = image.runtimeStyle.width;
    var oldRuntimeHeight = image.runtimeStyle.height;
    image.runtimeStyle.width = 'auto';
    image.runtimeStyle.height = 'auto';

    // get the original size
    var w = image.width;
    var h = image.height;

    // and remove overides
    image.runtimeStyle.width = oldRuntimeWidth;
    image.runtimeStyle.height = oldRuntimeHeight;

    if (arguments.length == 3) {
      dx = arguments[1];
      dy = arguments[2];
      sx = sy = 0;
      sw = dw = w;
      sh = dh = h;
    } else if (arguments.length == 5) {
      dx = arguments[1];
      dy = arguments[2];
      dw = arguments[3];
      dh = arguments[4];
      sx = sy = 0;
      sw = w;
      sh = h;
    } else if (arguments.length == 9) {
      sx = arguments[1];
      sy = arguments[2];
      sw = arguments[3];
      sh = arguments[4];
      dx = arguments[5];
      dy = arguments[6];
      dw = arguments[7];
      dh = arguments[8];
    } else {
      throw Error('Invalid number of arguments');
    }

    var d = this.getCoords_(dx, dy);

    var w2 = sw / 2;
    var h2 = sh / 2;

    var vmlStr = [];

    var W = 10;
    var H = 10;

    // For some reason that I've now forgotten, using divs didn't work
    vmlStr.push(' <g_vml_:group',
                ' coordsize="', Z * W, ',', Z * H, '"',
                ' coordorigin="0,0"' ,
                ' style="width:', W, 'px;height:', H, 'px;position:absolute;');

    // If filters are necessary (rotation exists), create them
    // filters are bog-slow, so only create them if abbsolutely necessary
    // The following check doesn't account for skews (which don't exist
    // in the canvas spec (yet) anyway.

    if (this.m_[0][0] != 1 || this.m_[0][1]) {
      var filter = [];

      // Note the 12/21 reversal
      filter.push('M11=', this.m_[0][0], ',',
                  'M12=', this.m_[1][0], ',',
                  'M21=', this.m_[0][1], ',',
                  'M22=', this.m_[1][1], ',',
                  'Dx=', mr(d.x / Z), ',',
                  'Dy=', mr(d.y / Z), '');

      // Bounding box calculation (need to minimize displayed area so that
      // filters don't waste time on unused pixels.
      var max = d;
      var c2 = this.getCoords_(dx + dw, dy);
      var c3 = this.getCoords_(dx, dy + dh);
      var c4 = this.getCoords_(dx + dw, dy + dh);

      max.x = m.max(max.x, c2.x, c3.x, c4.x);
      max.y = m.max(max.y, c2.y, c3.y, c4.y);

      vmlStr.push('padding:0 ', mr(max.x / Z), 'px ', mr(max.y / Z),
                  'px 0;filter:progid:DXImageTransform.Microsoft.Matrix(',
                  filter.join(''), ", sizingmethod='clip');")
    } else {
      vmlStr.push('top:', mr(d.y / Z), 'px;left:', mr(d.x / Z), 'px;');
    }

    vmlStr.push(' ">' ,
                '<g_vml_:image src="', image.src, '"',
                ' style="width:', Z * dw, 'px;',
                ' height:', Z * dh, 'px;"',
                ' cropleft="', sx / w, '"',
                ' croptop="', sy / h, '"',
                ' cropright="', (w - sx - sw) / w, '"',
                ' cropbottom="', (h - sy - sh) / h, '"',
                ' />',
                '</g_vml_:group>');

    this.element_.insertAdjacentHTML('BeforeEnd',
                                    vmlStr.join(''));
  };

  contextPrototype.stroke = function(aFill) {
    var lineStr = [];
    var lineOpen = false;
    var a = processStyle(aFill ? this.fillStyle : this.strokeStyle);
    var color = a.color;
    var opacity = a.alpha * this.globalAlpha;

    var W = 10;
    var H = 10;

    lineStr.push('<g_vml_:shape',
                 ' filled="', !!aFill, '"',
                 ' style="position:absolute;width:', W, 'px;height:', H, 'px;"',
                 ' coordorigin="0 0" coordsize="', Z * W, ' ', Z * H, '"',
                 ' stroked="', !aFill, '"',
                 ' path="');

    var newSeq = false;
    var min = {x: null, y: null};
    var max = {x: null, y: null};

    for (var i = 0; i < this.currentPath_.length; i++) {
      var p = this.currentPath_[i];
      var c;

      switch (p.type) {
        case 'moveTo':
          c = p;
          lineStr.push(' m ', mr(p.x), ',', mr(p.y));
          break;
        case 'lineTo':
          lineStr.push(' l ', mr(p.x), ',', mr(p.y));
          break;
        case 'close':
          lineStr.push(' x ');
          p = null;
          break;
        case 'bezierCurveTo':
          lineStr.push(' c ',
                       mr(p.cp1x), ',', mr(p.cp1y), ',',
                       mr(p.cp2x), ',', mr(p.cp2y), ',',
                       mr(p.x), ',', mr(p.y));
          break;
        case 'at':
        case 'wa':
          lineStr.push(' ', p.type, ' ',
                       mr(p.x - this.arcScaleX_ * p.radius), ',',
                       mr(p.y - this.arcScaleY_ * p.radius), ' ',
                       mr(p.x + this.arcScaleX_ * p.radius), ',',
                       mr(p.y + this.arcScaleY_ * p.radius), ' ',
                       mr(p.xStart), ',', mr(p.yStart), ' ',
                       mr(p.xEnd), ',', mr(p.yEnd));
          break;
      }


      // TODO: Following is broken for curves due to
      //       move to proper paths.

      // Figure out dimensions so we can do gradient fills
      // properly
      if (p) {
        if (min.x == null || p.x < min.x) {
          min.x = p.x;
        }
        if (max.x == null || p.x > max.x) {
          max.x = p.x;
        }
        if (min.y == null || p.y < min.y) {
          min.y = p.y;
        }
        if (max.y == null || p.y > max.y) {
          max.y = p.y;
        }
      }
    }
    lineStr.push(' ">');

    if (!aFill) {
      var lineWidth = this.lineScale_ * this.lineWidth;

      // VML cannot correctly render a line if the width is less than 1px.
      // In that case, we dilute the color to make the line look thinner.
      if (lineWidth < 1) {
        opacity *= lineWidth;
      }

      lineStr.push(
        '<g_vml_:stroke',
        ' opacity="', opacity, '"',
        ' joinstyle="', this.lineJoin, '"',
        ' miterlimit="', this.miterLimit, '"',
        ' endcap="', processLineCap(this.lineCap), '"',
        ' weight="', lineWidth, 'px"',
        ' color="', color, '" />'
      );
    } else if (typeof this.fillStyle == 'object') {
      var fillStyle = this.fillStyle;
      var angle = 0;
      var focus = {x: 0, y: 0};

      // additional offset
      var shift = 0;
      // scale factor for offset
      var expansion = 1;

      if (fillStyle.type_ == 'gradient') {
        var x0 = fillStyle.x0_ / this.arcScaleX_;
        var y0 = fillStyle.y0_ / this.arcScaleY_;
        var x1 = fillStyle.x1_ / this.arcScaleX_;
        var y1 = fillStyle.y1_ / this.arcScaleY_;
        var p0 = this.getCoords_(x0, y0);
        var p1 = this.getCoords_(x1, y1);
        var dx = p1.x - p0.x;
        var dy = p1.y - p0.y;
        angle = Math.atan2(dx, dy) * 180 / Math.PI;

        // The angle should be a non-negative number.
        if (angle < 0) {
          angle += 360;
        }

        // Very small angles produce an unexpected result because they are
        // converted to a scientific notation string.
        if (angle < 1e-6) {
          angle = 0;
        }
      } else {
        var p0 = this.getCoords_(fillStyle.x0_, fillStyle.y0_);
        var width  = max.x - min.x;
        var height = max.y - min.y;
        focus = {
          x: (p0.x - min.x) / width,
          y: (p0.y - min.y) / height
        };

        width  /= this.arcScaleX_ * Z;
        height /= this.arcScaleY_ * Z;
        var dimension = m.max(width, height);
        shift = 2 * fillStyle.r0_ / dimension;
        expansion = 2 * fillStyle.r1_ / dimension - shift;
      }

      // We need to sort the color stops in ascending order by offset,
      // otherwise IE won't interpret it correctly.
      var stops = fillStyle.colors_;
      stops.sort(function(cs1, cs2) {
        return cs1.offset - cs2.offset;
      });

      var length = stops.length;
      var color1 = stops[0].color;
      var color2 = stops[length - 1].color;
      var opacity1 = stops[0].alpha * this.globalAlpha;
      var opacity2 = stops[length - 1].alpha * this.globalAlpha;

      var colors = [];
      for (var i = 0; i < length; i++) {
        var stop = stops[i];
        colors.push(stop.offset * expansion + shift + ' ' + stop.color);
      }

      // When colors attribute is used, the meanings of opacity and o:opacity2
      // are reversed.
      lineStr.push('<g_vml_:fill type="', fillStyle.type_, '"',
                   ' method="none" focus="100%"',
                   ' color="', color1, '"',
                   ' color2="', color2, '"',
                   ' colors="', colors.join(','), '"',
                   ' opacity="', opacity2, '"',
                   ' g_o_:opacity2="', opacity1, '"',
                   ' angle="', angle, '"',
                   ' focusposition="', focus.x, ',', focus.y, '" />');
    } else {
      lineStr.push('<g_vml_:fill color="', color, '" opacity="', opacity,
                   '" />');
    }

    lineStr.push('</g_vml_:shape>');

    this.element_.insertAdjacentHTML('beforeEnd', lineStr.join(''));
  };

  contextPrototype.fill = function() {
    this.stroke(true);
  }

  contextPrototype.closePath = function() {
    this.currentPath_.push({type: 'close'});
  };

  /**
   * @private
   */
  contextPrototype.getCoords_ = function(aX, aY) {
    var m = this.m_;
    return {
      x: Z * (aX * m[0][0] + aY * m[1][0] + m[2][0]) - Z2,
      y: Z * (aX * m[0][1] + aY * m[1][1] + m[2][1]) - Z2
    }
  };

  contextPrototype.save = function() {
    var o = {};
    copyState(this, o);
    this.aStack_.push(o);
    this.mStack_.push(this.m_);
    this.m_ = matrixMultiply(createMatrixIdentity(), this.m_);
  };

  contextPrototype.restore = function() {
    copyState(this.aStack_.pop(), this);
    this.m_ = this.mStack_.pop();
  };

  function matrixIsFinite(m) {
    for (var j = 0; j < 3; j++) {
      for (var k = 0; k < 2; k++) {
        if (!isFinite(m[j][k]) || isNaN(m[j][k])) {
          return false;
        }
      }
    }
    return true;
  }

  function setM(ctx, m, updateLineScale) {
    if (!matrixIsFinite(m)) {
      return;
    }
    ctx.m_ = m;

    if (updateLineScale) {
      // Get the line scale.
      // Determinant of this.m_ means how much the area is enlarged by the
      // transformation. So its square root can be used as a scale factor
      // for width.
      var det = m[0][0] * m[1][1] - m[0][1] * m[1][0];
      ctx.lineScale_ = sqrt(abs(det));
    }
  }

  contextPrototype.translate = function(aX, aY) {
    var m1 = [
      [1,  0,  0],
      [0,  1,  0],
      [aX, aY, 1]
    ];

    setM(this, matrixMultiply(m1, this.m_), false);
  };

  contextPrototype.rotate = function(aRot) {
    var c = mc(aRot);
    var s = ms(aRot);

    var m1 = [
      [c,  s, 0],
      [-s, c, 0],
      [0,  0, 1]
    ];

    setM(this, matrixMultiply(m1, this.m_), false);
  };

  contextPrototype.scale = function(aX, aY) {
    this.arcScaleX_ *= aX;
    this.arcScaleY_ *= aY;
    var m1 = [
      [aX, 0,  0],
      [0,  aY, 0],
      [0,  0,  1]
    ];

    setM(this, matrixMultiply(m1, this.m_), true);
  };

  contextPrototype.transform = function(m11, m12, m21, m22, dx, dy) {
    var m1 = [
      [m11, m12, 0],
      [m21, m22, 0],
      [dx,  dy,  1]
    ];

    setM(this, matrixMultiply(m1, this.m_), true);
  };

  contextPrototype.setTransform = function(m11, m12, m21, m22, dx, dy) {
    var m = [
      [m11, m12, 0],
      [m21, m22, 0],
      [dx,  dy,  1]
    ];

    setM(this, m, true);
  };

  /******** STUBS ********/
  contextPrototype.clip = function() {
    // TODO: Implement
  };

  contextPrototype.arcTo = function() {
    // TODO: Implement
  };

  contextPrototype.createPattern = function() {
    return new CanvasPattern_;
  };

  // Gradient / Pattern Stubs
  function CanvasGradient_(aType) {
    this.type_ = aType;
    this.x0_ = 0;
    this.y0_ = 0;
    this.r0_ = 0;
    this.x1_ = 0;
    this.y1_ = 0;
    this.r1_ = 0;
    this.colors_ = [];
  }

  CanvasGradient_.prototype.addColorStop = function(aOffset, aColor) {
    aColor = processStyle(aColor);
    this.colors_.push({offset: aOffset,
                       color: aColor.color,
                       alpha: aColor.alpha});
  };

  function CanvasPattern_() {}

  // set up externs
  G_vmlCanvasManager = G_vmlCanvasManager_;
  CanvasRenderingContext2D = CanvasRenderingContext2D_;
  CanvasGradient = CanvasGradient_;
  CanvasPattern = CanvasPattern_;

})();

} // if


/*
 * classList.js: Cross-browser full element.classList implementation.
 * 2012-11-15
 *
 * By Eli Grey, http://eligrey.com
 * Public Domain.
 * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
 */

/*global self, document, DOMException */

/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js*/

if (typeof document !== "undefined" && !("classList" in document.createElement("a"))) {

(function (view) {

"use strict";

if (!('HTMLElement' in view) && !('Element' in view)) return;

var
	  classListProp = "classList"
	, protoProp = "prototype"
	, elemCtrProto = (view.HTMLElement || view.Element)[protoProp]
	, objCtr = Object
	, strTrim = String[protoProp].trim || function () {
		return this.replace(/^\s+|\s+$/g, "");
	}
	, arrIndexOf = Array[protoProp].indexOf || function (item) {
		var
			  i = 0
			, len = this.length
		;
		for (; i < len; i++) {
			if (i in this && this[i] === item) {
				return i;
			}
		}
		return -1;
	}
	// Vendors: please allow content code to instantiate DOMExceptions
	, DOMEx = function (type, message) {
		this.name = type;
		this.code = DOMException[type];
		this.message = message;
	}
	, checkTokenAndGetIndex = function (classList, token) {
		if (token === "") {
			throw new DOMEx(
				  "SYNTAX_ERR"
				, "An invalid or illegal string was specified"
			);
		}
		if (/\s/.test(token)) {
			throw new DOMEx(
				  "INVALID_CHARACTER_ERR"
				, "String contains an invalid character"
			);
		}
		return arrIndexOf.call(classList, token);
	}
	, ClassList = function (elem) {
		var
			  trimmedClasses = strTrim.call(elem.className)
			, classes = trimmedClasses ? trimmedClasses.split(/\s+/) : []
			, i = 0
			, len = classes.length
		;
		for (; i < len; i++) {
			this.push(classes[i]);
		}
		this._updateClassName = function () {
			elem.className = this.toString();
		};
	}
	, classListProto = ClassList[protoProp] = []
	, classListGetter = function () {
		return new ClassList(this);
	}
;
// Most DOMException implementations don't allow calling DOMException's toString()
// on non-DOMExceptions. Error's toString() is sufficient here.
DOMEx[protoProp] = Error[protoProp];
classListProto.item = function (i) {
	return this[i] || null;
};
classListProto.contains = function (token) {
	token += "";
	return checkTokenAndGetIndex(this, token) !== -1;
};
classListProto.add = function () {
	var
		  tokens = arguments
		, i = 0
		, l = tokens.length
		, token
		, updated = false
	;
	do {
		token = tokens[i] + "";
		if (checkTokenAndGetIndex(this, token) === -1) {
			this.push(token);
			updated = true;
		}
	}
	while (++i < l);

	if (updated) {
		this._updateClassName();
	}
};
classListProto.remove = function () {
	var
		  tokens = arguments
		, i = 0
		, l = tokens.length
		, token
		, updated = false
	;
	do {
		token = tokens[i] + "";
		var index = checkTokenAndGetIndex(this, token);
		if (index !== -1) {
			this.splice(index, 1);
			updated = true;
		}
	}
	while (++i < l);

	if (updated) {
		this._updateClassName();
	}
};
classListProto.toggle = function (token, forse) {
	token += "";

	var
		  result = this.contains(token)
		, method = result ?
			forse !== true && "remove"
		:
			forse !== false && "add"
	;

	if (method) {
		this[method](token);
	}

	return result;
};
classListProto.toString = function () {
	return this.join(" ");
};

if (objCtr.defineProperty) {
	var classListPropDesc = {
		  get: classListGetter
		, enumerable: true
		, configurable: true
	};
	try {
		objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
	} catch (ex) { // IE 8 doesn't support enumerable:true
		if (ex.number === -0x7FF5EC54) {
			classListPropDesc.enumerable = false;
			objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
		}
	}
} else if (objCtr[protoProp].__defineGetter__) {
	elemCtrProto.__defineGetter__(classListProp, classListGetter);
}

}(self));

}


!window.addEventListener && (function (WindowPrototype, DocumentPrototype, ElementPrototype, addEventListener, removeEventListener, dispatchEvent, registry) {
	WindowPrototype[addEventListener] = DocumentPrototype[addEventListener] = ElementPrototype[addEventListener] = function (type, listener) {
		var target = this;

		registry.unshift([target, type, listener, function (event) {
			event.currentTarget = target;
			event.preventDefault = function () { event.returnValue = false };
			event.stopPropagation = function () { event.cancelBubble = true };
			event.target = event.srcElement || target;

			listener.call(target, event);
		}]);

		this.attachEvent("on" + type, registry[0][3]);
	};

	WindowPrototype[removeEventListener] = DocumentPrototype[removeEventListener] = ElementPrototype[removeEventListener] = function (type, listener) {
		for (var index = 0, register; register = registry[index]; ++index) {
			if (register[0] == this && register[1] == type && register[2] == listener) {
				return this.detachEvent("on" + type, registry.splice(index, 1)[0][3]);
			}
		}
	};

	WindowPrototype[dispatchEvent] = DocumentPrototype[dispatchEvent] = ElementPrototype[dispatchEvent] = function (eventObject) {
		return this.fireEvent("on" + eventObject.type, eventObject);
	};
})(Window.prototype, HTMLDocument.prototype, Element.prototype, "addEventListener", "removeEventListener", "dispatchEvent", []);

var Adapter,
  __hasProp = {}.hasOwnProperty,
  __slice = [].slice;

Adapter = (function() {
  var dataValues, lastDataId;

  function Adapter() {}

  Adapter.prototype.name = "native";

  Adapter.prototype.domReady = function(callback) {
    var add, doc, done, init, poll, pre, rem, root, top, win, _ref;

    done = false;
    top = true;
    win = window;
    doc = document;
    if ((_ref = doc.readyState) === "complete" || _ref === "loaded") {
      return callback();
    }
    root = doc.documentElement;
    add = (doc.addEventListener ? "addEventListener" : "attachEvent");
    rem = (doc.addEventListener ? "removeEventListener" : "detachEvent");
    pre = (doc.addEventListener ? "" : "on");
    init = function(e) {
      if (e.type === "readystatechange" && doc.readyState !== "complete") {
        return;
      }
      (e.type === "load" ? win : doc)[rem](pre + e.type, init, false);
      if (!done) {
        done = true;
        return callback();
      }
    };
    poll = function() {
      var e;

      try {
        root.doScroll("left");
      } catch (_error) {
        e = _error;
        setTimeout(poll, 50);
        return;
      }
      return init("poll");
    };
    if (doc.readyState !== "complete") {
      if (doc.createEventObject && root.doScroll) {
        try {
          top = !win.frameElement;
        } catch (_error) {}
        if (top) {
          poll();
        }
      }
      doc[add](pre + "DOMContentLoaded", init, false);
      doc[add](pre + "readystatechange", init, false);
      return win[add](pre + "load", init, false);
    }
  };

  Adapter.prototype.create = function(htmlString) {
    var div;

    div = document.createElement("div");
    div.innerHTML = htmlString;
    return this.wrap(div.childNodes);
  };

  Adapter.prototype.wrap = function(element) {
    var el;

    if (!element) {
      element = [];
    } else if (typeof element === "string") {
      element = this.find(document.body, element);
      element = element ? [element] : [];
    } else if (element instanceof NodeList) {
      element = (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = element.length; _i < _len; _i++) {
          el = element[_i];
          _results.push(el);
        }
        return _results;
      })();
    } else if (!(element instanceof Array)) {
      element = [element];
    }
    return element;
  };

  Adapter.prototype.unwrap = function(element) {
    return this.wrap(element)[0];
  };

  Adapter.prototype.tagName = function(element) {
    return this.unwrap(element).tagName;
  };

  Adapter.prototype.attr = function(element, attr, value) {
    if (arguments.length === 3) {
      return this.unwrap(element).setAttribute(attr, value);
    } else {
      return this.unwrap(element).getAttribute(attr);
    }
  };

  lastDataId = 0;

  dataValues = {};

  Adapter.prototype.data = function(element, name, value) {
    var dataId;

    dataId = this.attr(element, "data-id");
    if (!dataId) {
      dataId = ++lastDataId;
      this.attr(element, "data-id", dataId);
      dataValues[dataId] = {};
    }
    if (arguments.length === 3) {
      return dataValues[dataId][name] = value;
    } else {
      value = dataValues[dataId][name];
      if (value != null) {
        return value;
      }
      value = this.attr(element, "data-" + (Opentip.prototype.dasherize(name)));
      if (value) {
        dataValues[dataId][name] = value;
      }
      return value;
    }
  };

  Adapter.prototype.find = function(element, selector) {
    return this.unwrap(element).querySelector(selector);
  };

  Adapter.prototype.findAll = function(element, selector) {
    return this.unwrap(element).querySelectorAll(selector);
  };

  Adapter.prototype.update = function(element, content, escape) {
    element = this.unwrap(element);
    if (escape) {
      element.innerHTML = "";
      return element.appendChild(document.createTextNode(content));
    } else {
      return element.innerHTML = content;
    }
  };

  Adapter.prototype.append = function(element, child) {
    var unwrappedChild, unwrappedElement;

    unwrappedChild = this.unwrap(child);
    unwrappedElement = this.unwrap(element);
    return unwrappedElement.appendChild(unwrappedChild);
  };

  Adapter.prototype.remove = function(element) {
    var parentNode;

    element = this.unwrap(element);
    parentNode = element.parentNode;
    if (parentNode != null) {
      return parentNode.removeChild(element);
    }
  };

  Adapter.prototype.addClass = function(element, className) {
    return this.unwrap(element).classList.add(className);
  };

  Adapter.prototype.removeClass = function(element, className) {
    return this.unwrap(element).classList.remove(className);
  };

  Adapter.prototype.css = function(element, properties) {
    var key, value, _results;

    element = this.unwrap(this.wrap(element));
    _results = [];
    for (key in properties) {
      if (!__hasProp.call(properties, key)) continue;
      value = properties[key];
      _results.push(element.style[key] = value);
    }
    return _results;
  };

  Adapter.prototype.dimensions = function(element) {
    var dimensions, revert;

    element = this.unwrap(this.wrap(element));
    dimensions = {
      width: element.offsetWidth,
      height: element.offsetHeight
    };
    if (!(dimensions.width && dimensions.height)) {
      revert = {
        position: element.style.position || '',
        visibility: element.style.visibility || '',
        display: element.style.display || ''
      };
      this.css(element, {
        position: "absolute",
        visibility: "hidden",
        display: "block"
      });
      dimensions = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      this.css(element, revert);
    }
    return dimensions;
  };

  Adapter.prototype.scrollOffset = function() {
    return [window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft, window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop];
  };

  Adapter.prototype.viewportDimensions = function() {
    return {
      width: document.documentElement.clientWidth,
      height: document.documentElement.clientHeight
    };
  };

  Adapter.prototype.mousePosition = function(e) {
    var pos;

    pos = {
      x: 0,
      y: 0
    };
    if (e == null) {
      e = window.event;
    }
    if (e == null) {
      return;
    }
    try {
      if (e.pageX || e.pageY) {
        pos.x = e.pageX;
        pos.y = e.pageY;
      } else if (e.clientX || e.clientY) {
        pos.x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
        pos.y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
      }
    } catch (_error) {
      e = _error;
    }
    return pos;
  };

  Adapter.prototype.offset = function(element) {
    var offset;

    element = this.unwrap(element);
    offset = {
      top: element.offsetTop,
      left: element.offsetLeft
    };
    while (element = element.offsetParent) {
      offset.top += element.offsetTop;
      offset.left += element.offsetLeft;
      if (element !== document.body) {
        offset.top -= element.scrollTop;
        offset.left -= element.scrollLeft;
      }
    }
    return offset;
  };

  Adapter.prototype.observe = function(element, eventName, observer) {
    return this.unwrap(element).addEventListener(eventName, observer, false);
  };

  Adapter.prototype.stopObserving = function(element, eventName, observer) {
    return this.unwrap(element).removeEventListener(eventName, observer, false);
  };

  Adapter.prototype.ajax = function(options) {
    var e, request, _ref, _ref1;

    if (options.url == null) {
      throw new Error("No url provided");
    }
    if (window.XMLHttpRequest) {
      request = new XMLHttpRequest;
    } else if (window.ActiveXObject) {
      try {
        request = new ActiveXObject("Msxml2.XMLHTTP");
      } catch (_error) {
        e = _error;
        try {
          request = new ActiveXObject("Microsoft.XMLHTTP");
        } catch (_error) {
          e = _error;
        }
      }
    }
    if (!request) {
      throw new Error("Can't create XMLHttpRequest");
    }
    request.onreadystatechange = function() {
      if (request.readyState === 4) {
        try {
          if (request.status === 200) {
            if (typeof options.onSuccess === "function") {
              options.onSuccess(request.responseText);
            }
          } else {
            if (typeof options.onError === "function") {
              options.onError("Server responded with status " + request.status);
            }
          }
        } catch (_error) {
          e = _error;
          if (typeof options.onError === "function") {
            options.onError(e.message);
          }
        }
        return typeof options.onComplete === "function" ? options.onComplete() : void 0;
      }
    };
    request.open((_ref = (_ref1 = options.method) != null ? _ref1.toUpperCase() : void 0) != null ? _ref : "GET", options.url);
    return request.send();
  };

  Adapter.prototype.clone = function(object) {
    var key, newObject, val;

    newObject = {};
    for (key in object) {
      if (!__hasProp.call(object, key)) continue;
      val = object[key];
      newObject[key] = val;
    }
    return newObject;
  };

  Adapter.prototype.extend = function() {
    var key, source, sources, target, val, _i, _len;

    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      for (key in source) {
        if (!__hasProp.call(source, key)) continue;
        val = source[key];
        target[key] = val;
      }
    }
    return target;
  };

  return Adapter;

})();

Opentip.addAdapter(new Adapter);

// Modified by Matias Meno to work in IE8.
// I removed the line 312, as proposed by someone on the google forum.

// Copyright 2006 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Known Issues:
//
// * Patterns are not implemented.
// * Radial gradient are not implemented. The VML version of these look very
//   different from the canvas one.
// * Clipping paths are not implemented.
// * Coordsize. The width and height attribute have higher priority than the
//   width and height style values which isn't correct.
// * Painting mode isn't implemented.
// * Canvas width/height should is using content-box by default. IE in
//   Quirks mode will draw the canvas using border-box. Either change your
//   doctype to HTML5
//   (http://www.whatwg.org/specs/web-apps/current-work/#the-doctype)
//   or use Box Sizing Behavior from WebFX
//   (http://webfx.eae.net/dhtml/boxsizing/boxsizing.html)
// * Non uniform scaling does not correctly scale strokes.
// * Optimize. There is always room for speed improvements.

// Only add this code if we do not already have a canvas implementation
if (!document.createElement('canvas').getContext) {

(function() {

  // alias some functions to make (compiled) code shorter
  var m = Math;
  var mr = m.round;
  var ms = m.sin;
  var mc = m.cos;
  var abs = m.abs;
  var sqrt = m.sqrt;

  // this is used for sub pixel precision
  var Z = 10;
  var Z2 = Z / 2;

  /**
   * This funtion is assigned to the <canvas> elements as element.getContext().
   * @this {HTMLElement}
   * @return {CanvasRenderingContext2D_}
   */
  function getContext() {
    return this.context_ ||
        (this.context_ = new CanvasRenderingContext2D_(this));
  }

  var slice = Array.prototype.slice;

  /**
   * Binds a function to an object. The returned function will always use the
   * passed in {@code obj} as {@code this}.
   *
   * Example:
   *
   *   g = bind(f, obj, a, b)
   *   g(c, d) // will do f.call(obj, a, b, c, d)
   *
   * @param {Function} f The function to bind the object to
   * @param {Object} obj The object that should act as this when the function
   *     is called
   * @param {*} var_args Rest arguments that will be used as the initial
   *     arguments when the function is called
   * @return {Function} A new function that has bound this
   */
  function bind(f, obj, var_args) {
    var a = slice.call(arguments, 2);
    return function() {
      return f.apply(obj, a.concat(slice.call(arguments)));
    };
  }

  var G_vmlCanvasManager_ = {
    init: function(opt_doc) {
      if (/MSIE/.test(navigator.userAgent) && !window.opera) {
        var doc = opt_doc || document;
        // Create a dummy element so that IE will allow canvas elements to be
        // recognized.
        doc.createElement('canvas');
        doc.attachEvent('onreadystatechange', bind(this.init_, this, doc));
      }
    },

    init_: function(doc) {
      // create xmlns
      if (!doc.namespaces['g_vml_']) {
        doc.namespaces.add('g_vml_', 'urn:schemas-microsoft-com:vml',
                           '#default#VML');

      }
      if (!doc.namespaces['g_o_']) {
        doc.namespaces.add('g_o_', 'urn:schemas-microsoft-com:office:office',
                           '#default#VML');
      }

      // Setup default CSS.  Only add one style sheet per document
      if (!doc.styleSheets['ex_canvas_']) {
        var ss = doc.createStyleSheet();
        ss.owningElement.id = 'ex_canvas_';
        ss.cssText = 'canvas{display:inline-block;overflow:hidden;' +
            // default size is 300x150 in Gecko and Opera
            'text-align:left;width:300px;height:150px}' +
            'g_vml_\\:*{behavior:url(#default#VML)}' +
            'g_o_\\:*{behavior:url(#default#VML)}';

      }

      // find all canvas elements
      var els = doc.getElementsByTagName('canvas');
      for (var i = 0; i < els.length; i++) {
        this.initElement(els[i]);
      }
    },

    /**
     * Public initializes a canvas element so that it can be used as canvas
     * element from now on. This is called automatically before the page is
     * loaded but if you are creating elements using createElement you need to
     * make sure this is called on the element.
     * @param {HTMLElement} el The canvas element to initialize.
     * @return {HTMLElement} the element that was created.
     */
    initElement: function(el) {
      if (!el.getContext) {

        el.getContext = getContext;

        // Remove fallback content. There is no way to hide text nodes so we
        // just remove all childNodes. We could hide all elements and remove
        // text nodes but who really cares about the fallback content.
        el.innerHTML = '';

        // do not use inline function because that will leak memory
        el.attachEvent('onpropertychange', onPropertyChange);
        el.attachEvent('onresize', onResize);

        var attrs = el.attributes;
        if (attrs.width && attrs.width.specified) {
          // TODO: use runtimeStyle and coordsize
          // el.getContext().setWidth_(attrs.width.nodeValue);
          el.style.width = attrs.width.nodeValue + 'px';
        } else {
          el.width = el.clientWidth;
        }
        if (attrs.height && attrs.height.specified) {
          // TODO: use runtimeStyle and coordsize
          // el.getContext().setHeight_(attrs.height.nodeValue);
          el.style.height = attrs.height.nodeValue + 'px';
        } else {
          el.height = el.clientHeight;
        }
        //el.getContext().setCoordsize_()
      }
      return el;
    }
  };

  function onPropertyChange(e) {
    var el = e.srcElement;

    switch (e.propertyName) {
      case 'width':
        el.style.width = el.attributes.width.nodeValue + 'px';
        el.getContext().clearRect();
        break;
      case 'height':
        el.style.height = el.attributes.height.nodeValue + 'px';
        el.getContext().clearRect();
        break;
    }
  }

  function onResize(e) {
    var el = e.srcElement;
    if (el.firstChild) {
      el.firstChild.style.width =  el.clientWidth + 'px';
      el.firstChild.style.height = el.clientHeight + 'px';
    }
  }

  G_vmlCanvasManager_.init();

  // precompute "00" to "FF"
  var dec2hex = [];
  for (var i = 0; i < 16; i++) {
    for (var j = 0; j < 16; j++) {
      dec2hex[i * 16 + j] = i.toString(16) + j.toString(16);
    }
  }

  function createMatrixIdentity() {
    return [
      [1, 0, 0],
      [0, 1, 0],
      [0, 0, 1]
    ];
  }

  function matrixMultiply(m1, m2) {
    var result = createMatrixIdentity();

    for (var x = 0; x < 3; x++) {
      for (var y = 0; y < 3; y++) {
        var sum = 0;

        for (var z = 0; z < 3; z++) {
          sum += m1[x][z] * m2[z][y];
        }

        result[x][y] = sum;
      }
    }
    return result;
  }

  function copyState(o1, o2) {
    o2.fillStyle     = o1.fillStyle;
    o2.lineCap       = o1.lineCap;
    o2.lineJoin      = o1.lineJoin;
    o2.lineWidth     = o1.lineWidth;
    o2.miterLimit    = o1.miterLimit;
    o2.shadowBlur    = o1.shadowBlur;
    o2.shadowColor   = o1.shadowColor;
    o2.shadowOffsetX = o1.shadowOffsetX;
    o2.shadowOffsetY = o1.shadowOffsetY;
    o2.strokeStyle   = o1.strokeStyle;
    o2.globalAlpha   = o1.globalAlpha;
    o2.arcScaleX_    = o1.arcScaleX_;
    o2.arcScaleY_    = o1.arcScaleY_;
    o2.lineScale_    = o1.lineScale_;
  }

  function processStyle(styleString) {
    var str, alpha = 1;

    styleString = String(styleString);
    if (styleString.substring(0, 3) == 'rgb') {
      var start = styleString.indexOf('(', 3);
      var end = styleString.indexOf(')', start + 1);
      var guts = styleString.substring(start + 1, end).split(',');

      str = '#';
      for (var i = 0; i < 3; i++) {
        str += dec2hex[Number(guts[i])];
      }

      if (guts.length == 4 && styleString.substr(3, 1) == 'a') {
        alpha = guts[3];
      }
    } else {
      str = styleString;
    }

    return {color: str, alpha: alpha};
  }

  function processLineCap(lineCap) {
    switch (lineCap) {
      case 'butt':
        return 'flat';
      case 'round':
        return 'round';
      case 'square':
      default:
        return 'square';
    }
  }

  /**
   * This class implements CanvasRenderingContext2D interface as described by
   * the WHATWG.
   * @param {HTMLElement} surfaceElement The element that the 2D context should
   * be associated with
   */
  function CanvasRenderingContext2D_(surfaceElement) {
    this.m_ = createMatrixIdentity();

    this.mStack_ = [];
    this.aStack_ = [];
    this.currentPath_ = [];

    // Canvas context properties
    this.strokeStyle = '#000';
    this.fillStyle = '#000';

    this.lineWidth = 1;
    this.lineJoin = 'miter';
    this.lineCap = 'butt';
    this.miterLimit = Z * 1;
    this.globalAlpha = 1;
    this.canvas = surfaceElement;

    var el = surfaceElement.ownerDocument.createElement('div');
    el.style.width =  surfaceElement.clientWidth + 'px';
    el.style.height = surfaceElement.clientHeight + 'px';
    // el.style.overflow = 'hidden';
    el.style.position = 'absolute';
    surfaceElement.appendChild(el);

    this.element_ = el;
    this.arcScaleX_ = 1;
    this.arcScaleY_ = 1;
    this.lineScale_ = 1;
  }

  var contextPrototype = CanvasRenderingContext2D_.prototype;
  contextPrototype.clearRect = function() {
    this.element_.innerHTML = '';
  };

  contextPrototype.beginPath = function() {
    // TODO: Branch current matrix so that save/restore has no effect
    //       as per safari docs.
    this.currentPath_ = [];
  };

  contextPrototype.moveTo = function(aX, aY) {
    var p = this.getCoords_(aX, aY);
    this.currentPath_.push({type: 'moveTo', x: p.x, y: p.y});
    this.currentX_ = p.x;
    this.currentY_ = p.y;
  };

  contextPrototype.lineTo = function(aX, aY) {
    var p = this.getCoords_(aX, aY);
    this.currentPath_.push({type: 'lineTo', x: p.x, y: p.y});

    this.currentX_ = p.x;
    this.currentY_ = p.y;
  };

  contextPrototype.bezierCurveTo = function(aCP1x, aCP1y,
                                            aCP2x, aCP2y,
                                            aX, aY) {
    var p = this.getCoords_(aX, aY);
    var cp1 = this.getCoords_(aCP1x, aCP1y);
    var cp2 = this.getCoords_(aCP2x, aCP2y);
    bezierCurveTo(this, cp1, cp2, p);
  };

  // Helper function that takes the already fixed cordinates.
  function bezierCurveTo(self, cp1, cp2, p) {
    self.currentPath_.push({
      type: 'bezierCurveTo',
      cp1x: cp1.x,
      cp1y: cp1.y,
      cp2x: cp2.x,
      cp2y: cp2.y,
      x: p.x,
      y: p.y
    });
    self.currentX_ = p.x;
    self.currentY_ = p.y;
  }

  contextPrototype.quadraticCurveTo = function(aCPx, aCPy, aX, aY) {
    // the following is lifted almost directly from
    // http://developer.mozilla.org/en/docs/Canvas_tutorial:Drawing_shapes

    var cp = this.getCoords_(aCPx, aCPy);
    var p = this.getCoords_(aX, aY);

    var cp1 = {
      x: this.currentX_ + 2.0 / 3.0 * (cp.x - this.currentX_),
      y: this.currentY_ + 2.0 / 3.0 * (cp.y - this.currentY_)
    };
    var cp2 = {
      x: cp1.x + (p.x - this.currentX_) / 3.0,
      y: cp1.y + (p.y - this.currentY_) / 3.0
    };

    bezierCurveTo(this, cp1, cp2, p);
  };

  contextPrototype.arc = function(aX, aY, aRadius,
                                  aStartAngle, aEndAngle, aClockwise) {
    aRadius *= Z;
    var arcType = aClockwise ? 'at' : 'wa';

    var xStart = aX + mc(aStartAngle) * aRadius - Z2;
    var yStart = aY + ms(aStartAngle) * aRadius - Z2;

    var xEnd = aX + mc(aEndAngle) * aRadius - Z2;
    var yEnd = aY + ms(aEndAngle) * aRadius - Z2;

    // IE won't render arches drawn counter clockwise if xStart == xEnd.
    if (xStart == xEnd && !aClockwise) {
      xStart += 0.125; // Offset xStart by 1/80 of a pixel. Use something
                       // that can be represented in binary
    }

    var p = this.getCoords_(aX, aY);
    var pStart = this.getCoords_(xStart, yStart);
    var pEnd = this.getCoords_(xEnd, yEnd);

    this.currentPath_.push({type: arcType,
                           x: p.x,
                           y: p.y,
                           radius: aRadius,
                           xStart: pStart.x,
                           yStart: pStart.y,
                           xEnd: pEnd.x,
                           yEnd: pEnd.y});

  };

  contextPrototype.rect = function(aX, aY, aWidth, aHeight) {
    this.moveTo(aX, aY);
    this.lineTo(aX + aWidth, aY);
    this.lineTo(aX + aWidth, aY + aHeight);
    this.lineTo(aX, aY + aHeight);
    this.closePath();
  };

  contextPrototype.strokeRect = function(aX, aY, aWidth, aHeight) {
    var oldPath = this.currentPath_;
    this.beginPath();

    this.moveTo(aX, aY);
    this.lineTo(aX + aWidth, aY);
    this.lineTo(aX + aWidth, aY + aHeight);
    this.lineTo(aX, aY + aHeight);
    this.closePath();
    this.stroke();

    this.currentPath_ = oldPath;
  };

  contextPrototype.fillRect = function(aX, aY, aWidth, aHeight) {
    var oldPath = this.currentPath_;
    this.beginPath();

    this.moveTo(aX, aY);
    this.lineTo(aX + aWidth, aY);
    this.lineTo(aX + aWidth, aY + aHeight);
    this.lineTo(aX, aY + aHeight);
    this.closePath();
    this.fill();

    this.currentPath_ = oldPath;
  };

  contextPrototype.createLinearGradient = function(aX0, aY0, aX1, aY1) {
    var gradient = new CanvasGradient_('gradient');
    gradient.x0_ = aX0;
    gradient.y0_ = aY0;
    gradient.x1_ = aX1;
    gradient.y1_ = aY1;
    return gradient;
  };

  contextPrototype.createRadialGradient = function(aX0, aY0, aR0,
                                                   aX1, aY1, aR1) {
    var gradient = new CanvasGradient_('gradientradial');
    gradient.x0_ = aX0;
    gradient.y0_ = aY0;
    gradient.r0_ = aR0;
    gradient.x1_ = aX1;
    gradient.y1_ = aY1;
    gradient.r1_ = aR1;
    return gradient;
  };

  contextPrototype.drawImage = function(image, var_args) {
    var dx, dy, dw, dh, sx, sy, sw, sh;

    // to find the original width we overide the width and height
    var oldRuntimeWidth = image.runtimeStyle.width;
    var oldRuntimeHeight = image.runtimeStyle.height;
    image.runtimeStyle.width = 'auto';
    image.runtimeStyle.height = 'auto';

    // get the original size
    var w = image.width;
    var h = image.height;

    // and remove overides
    image.runtimeStyle.width = oldRuntimeWidth;
    image.runtimeStyle.height = oldRuntimeHeight;

    if (arguments.length == 3) {
      dx = arguments[1];
      dy = arguments[2];
      sx = sy = 0;
      sw = dw = w;
      sh = dh = h;
    } else if (arguments.length == 5) {
      dx = arguments[1];
      dy = arguments[2];
      dw = arguments[3];
      dh = arguments[4];
      sx = sy = 0;
      sw = w;
      sh = h;
    } else if (arguments.length == 9) {
      sx = arguments[1];
      sy = arguments[2];
      sw = arguments[3];
      sh = arguments[4];
      dx = arguments[5];
      dy = arguments[6];
      dw = arguments[7];
      dh = arguments[8];
    } else {
      throw Error('Invalid number of arguments');
    }

    var d = this.getCoords_(dx, dy);

    var w2 = sw / 2;
    var h2 = sh / 2;

    var vmlStr = [];

    var W = 10;
    var H = 10;

    // For some reason that I've now forgotten, using divs didn't work
    vmlStr.push(' <g_vml_:group',
                ' coordsize="', Z * W, ',', Z * H, '"',
                ' coordorigin="0,0"' ,
                ' style="width:', W, 'px;height:', H, 'px;position:absolute;');

    // If filters are necessary (rotation exists), create them
    // filters are bog-slow, so only create them if abbsolutely necessary
    // The following check doesn't account for skews (which don't exist
    // in the canvas spec (yet) anyway.

    if (this.m_[0][0] != 1 || this.m_[0][1]) {
      var filter = [];

      // Note the 12/21 reversal
      filter.push('M11=', this.m_[0][0], ',',
                  'M12=', this.m_[1][0], ',',
                  'M21=', this.m_[0][1], ',',
                  'M22=', this.m_[1][1], ',',
                  'Dx=', mr(d.x / Z), ',',
                  'Dy=', mr(d.y / Z), '');

      // Bounding box calculation (need to minimize displayed area so that
      // filters don't waste time on unused pixels.
      var max = d;
      var c2 = this.getCoords_(dx + dw, dy);
      var c3 = this.getCoords_(dx, dy + dh);
      var c4 = this.getCoords_(dx + dw, dy + dh);

      max.x = m.max(max.x, c2.x, c3.x, c4.x);
      max.y = m.max(max.y, c2.y, c3.y, c4.y);

      vmlStr.push('padding:0 ', mr(max.x / Z), 'px ', mr(max.y / Z),
                  'px 0;filter:progid:DXImageTransform.Microsoft.Matrix(',
                  filter.join(''), ", sizingmethod='clip');")
    } else {
      vmlStr.push('top:', mr(d.y / Z), 'px;left:', mr(d.x / Z), 'px;');
    }

    vmlStr.push(' ">' ,
                '<g_vml_:image src="', image.src, '"',
                ' style="width:', Z * dw, 'px;',
                ' height:', Z * dh, 'px;"',
                ' cropleft="', sx / w, '"',
                ' croptop="', sy / h, '"',
                ' cropright="', (w - sx - sw) / w, '"',
                ' cropbottom="', (h - sy - sh) / h, '"',
                ' />',
                '</g_vml_:group>');

    this.element_.insertAdjacentHTML('BeforeEnd',
                                    vmlStr.join(''));
  };

  contextPrototype.stroke = function(aFill) {
    var lineStr = [];
    var lineOpen = false;
    var a = processStyle(aFill ? this.fillStyle : this.strokeStyle);
    var color = a.color;
    var opacity = a.alpha * this.globalAlpha;

    var W = 10;
    var H = 10;

    lineStr.push('<g_vml_:shape',
                 ' filled="', !!aFill, '"',
                 ' style="position:absolute;width:', W, 'px;height:', H, 'px;"',
                 ' coordorigin="0 0" coordsize="', Z * W, ' ', Z * H, '"',
                 ' stroked="', !aFill, '"',
                 ' path="');

    var newSeq = false;
    var min = {x: null, y: null};
    var max = {x: null, y: null};

    for (var i = 0; i < this.currentPath_.length; i++) {
      var p = this.currentPath_[i];
      var c;

      switch (p.type) {
        case 'moveTo':
          c = p;
          lineStr.push(' m ', mr(p.x), ',', mr(p.y));
          break;
        case 'lineTo':
          lineStr.push(' l ', mr(p.x), ',', mr(p.y));
          break;
        case 'close':
          lineStr.push(' x ');
          p = null;
          break;
        case 'bezierCurveTo':
          lineStr.push(' c ',
                       mr(p.cp1x), ',', mr(p.cp1y), ',',
                       mr(p.cp2x), ',', mr(p.cp2y), ',',
                       mr(p.x), ',', mr(p.y));
          break;
        case 'at':
        case 'wa':
          lineStr.push(' ', p.type, ' ',
                       mr(p.x - this.arcScaleX_ * p.radius), ',',
                       mr(p.y - this.arcScaleY_ * p.radius), ' ',
                       mr(p.x + this.arcScaleX_ * p.radius), ',',
                       mr(p.y + this.arcScaleY_ * p.radius), ' ',
                       mr(p.xStart), ',', mr(p.yStart), ' ',
                       mr(p.xEnd), ',', mr(p.yEnd));
          break;
      }


      // TODO: Following is broken for curves due to
      //       move to proper paths.

      // Figure out dimensions so we can do gradient fills
      // properly
      if (p) {
        if (min.x == null || p.x < min.x) {
          min.x = p.x;
        }
        if (max.x == null || p.x > max.x) {
          max.x = p.x;
        }
        if (min.y == null || p.y < min.y) {
          min.y = p.y;
        }
        if (max.y == null || p.y > max.y) {
          max.y = p.y;
        }
      }
    }
    lineStr.push(' ">');

    if (!aFill) {
      var lineWidth = this.lineScale_ * this.lineWidth;

      // VML cannot correctly render a line if the width is less than 1px.
      // In that case, we dilute the color to make the line look thinner.
      if (lineWidth < 1) {
        opacity *= lineWidth;
      }

      lineStr.push(
        '<g_vml_:stroke',
        ' opacity="', opacity, '"',
        ' joinstyle="', this.lineJoin, '"',
        ' miterlimit="', this.miterLimit, '"',
        ' endcap="', processLineCap(this.lineCap), '"',
        ' weight="', lineWidth, 'px"',
        ' color="', color, '" />'
      );
    } else if (typeof this.fillStyle == 'object') {
      var fillStyle = this.fillStyle;
      var angle = 0;
      var focus = {x: 0, y: 0};

      // additional offset
      var shift = 0;
      // scale factor for offset
      var expansion = 1;

      if (fillStyle.type_ == 'gradient') {
        var x0 = fillStyle.x0_ / this.arcScaleX_;
        var y0 = fillStyle.y0_ / this.arcScaleY_;
        var x1 = fillStyle.x1_ / this.arcScaleX_;
        var y1 = fillStyle.y1_ / this.arcScaleY_;
        var p0 = this.getCoords_(x0, y0);
        var p1 = this.getCoords_(x1, y1);
        var dx = p1.x - p0.x;
        var dy = p1.y - p0.y;
        angle = Math.atan2(dx, dy) * 180 / Math.PI;

        // The angle should be a non-negative number.
        if (angle < 0) {
          angle += 360;
        }

        // Very small angles produce an unexpected result because they are
        // converted to a scientific notation string.
        if (angle < 1e-6) {
          angle = 0;
        }
      } else {
        var p0 = this.getCoords_(fillStyle.x0_, fillStyle.y0_);
        var width  = max.x - min.x;
        var height = max.y - min.y;
        focus = {
          x: (p0.x - min.x) / width,
          y: (p0.y - min.y) / height
        };

        width  /= this.arcScaleX_ * Z;
        height /= this.arcScaleY_ * Z;
        var dimension = m.max(width, height);
        shift = 2 * fillStyle.r0_ / dimension;
        expansion = 2 * fillStyle.r1_ / dimension - shift;
      }

      // We need to sort the color stops in ascending order by offset,
      // otherwise IE won't interpret it correctly.
      var stops = fillStyle.colors_;
      stops.sort(function(cs1, cs2) {
        return cs1.offset - cs2.offset;
      });

      var length = stops.length;
      var color1 = stops[0].color;
      var color2 = stops[length - 1].color;
      var opacity1 = stops[0].alpha * this.globalAlpha;
      var opacity2 = stops[length - 1].alpha * this.globalAlpha;

      var colors = [];
      for (var i = 0; i < length; i++) {
        var stop = stops[i];
        colors.push(stop.offset * expansion + shift + ' ' + stop.color);
      }

      // When colors attribute is used, the meanings of opacity and o:opacity2
      // are reversed.
      lineStr.push('<g_vml_:fill type="', fillStyle.type_, '"',
                   ' method="none" focus="100%"',
                   ' color="', color1, '"',
                   ' color2="', color2, '"',
                   ' colors="', colors.join(','), '"',
                   ' opacity="', opacity2, '"',
                   ' g_o_:opacity2="', opacity1, '"',
                   ' angle="', angle, '"',
                   ' focusposition="', focus.x, ',', focus.y, '" />');
    } else {
      lineStr.push('<g_vml_:fill color="', color, '" opacity="', opacity,
                   '" />');
    }

    lineStr.push('</g_vml_:shape>');

    this.element_.insertAdjacentHTML('beforeEnd', lineStr.join(''));
  };

  contextPrototype.fill = function() {
    this.stroke(true);
  }

  contextPrototype.closePath = function() {
    this.currentPath_.push({type: 'close'});
  };

  /**
   * @private
   */
  contextPrototype.getCoords_ = function(aX, aY) {
    var m = this.m_;
    return {
      x: Z * (aX * m[0][0] + aY * m[1][0] + m[2][0]) - Z2,
      y: Z * (aX * m[0][1] + aY * m[1][1] + m[2][1]) - Z2
    }
  };

  contextPrototype.save = function() {
    var o = {};
    copyState(this, o);
    this.aStack_.push(o);
    this.mStack_.push(this.m_);
    this.m_ = matrixMultiply(createMatrixIdentity(), this.m_);
  };

  contextPrototype.restore = function() {
    copyState(this.aStack_.pop(), this);
    this.m_ = this.mStack_.pop();
  };

  function matrixIsFinite(m) {
    for (var j = 0; j < 3; j++) {
      for (var k = 0; k < 2; k++) {
        if (!isFinite(m[j][k]) || isNaN(m[j][k])) {
          return false;
        }
      }
    }
    return true;
  }

  function setM(ctx, m, updateLineScale) {
    if (!matrixIsFinite(m)) {
      return;
    }
    ctx.m_ = m;

    if (updateLineScale) {
      // Get the line scale.
      // Determinant of this.m_ means how much the area is enlarged by the
      // transformation. So its square root can be used as a scale factor
      // for width.
      var det = m[0][0] * m[1][1] - m[0][1] * m[1][0];
      ctx.lineScale_ = sqrt(abs(det));
    }
  }

  contextPrototype.translate = function(aX, aY) {
    var m1 = [
      [1,  0,  0],
      [0,  1,  0],
      [aX, aY, 1]
    ];

    setM(this, matrixMultiply(m1, this.m_), false);
  };

  contextPrototype.rotate = function(aRot) {
    var c = mc(aRot);
    var s = ms(aRot);

    var m1 = [
      [c,  s, 0],
      [-s, c, 0],
      [0,  0, 1]
    ];

    setM(this, matrixMultiply(m1, this.m_), false);
  };

  contextPrototype.scale = function(aX, aY) {
    this.arcScaleX_ *= aX;
    this.arcScaleY_ *= aY;
    var m1 = [
      [aX, 0,  0],
      [0,  aY, 0],
      [0,  0,  1]
    ];

    setM(this, matrixMultiply(m1, this.m_), true);
  };

  contextPrototype.transform = function(m11, m12, m21, m22, dx, dy) {
    var m1 = [
      [m11, m12, 0],
      [m21, m22, 0],
      [dx,  dy,  1]
    ];

    setM(this, matrixMultiply(m1, this.m_), true);
  };

  contextPrototype.setTransform = function(m11, m12, m21, m22, dx, dy) {
    var m = [
      [m11, m12, 0],
      [m21, m22, 0],
      [dx,  dy,  1]
    ];

    setM(this, m, true);
  };

  /******** STUBS ********/
  contextPrototype.clip = function() {
    // TODO: Implement
  };

  contextPrototype.arcTo = function() {
    // TODO: Implement
  };

  contextPrototype.createPattern = function() {
    return new CanvasPattern_;
  };

  // Gradient / Pattern Stubs
  function CanvasGradient_(aType) {
    this.type_ = aType;
    this.x0_ = 0;
    this.y0_ = 0;
    this.r0_ = 0;
    this.x1_ = 0;
    this.y1_ = 0;
    this.r1_ = 0;
    this.colors_ = [];
  }

  CanvasGradient_.prototype.addColorStop = function(aOffset, aColor) {
    aColor = processStyle(aColor);
    this.colors_.push({offset: aOffset,
                       color: aColor.color,
                       alpha: aColor.alpha});
  };

  function CanvasPattern_() {}

  // set up externs
  G_vmlCanvasManager = G_vmlCanvasManager_;
  CanvasRenderingContext2D = CanvasRenderingContext2D_;
  CanvasGradient = CanvasGradient_;
  CanvasPattern = CanvasPattern_;

})();

} // if

var Percentile = function() {

  // Sets up all the percentile data
  this.setup = function() {
    var boys_bmi = new Array('24|-1.982373595|16.54777487|0.080127429|14.71929257|18.11954923', '25|-1.924100169|16.49442763|0.079233994|14.68360841|18.03668013', '26|-1.86549793|16.44259552|0.078389356|14.64843329|17.95700228', '27|-1.807261899|16.3922434|0.077593501|14.61378626|17.88047101', '28|-1.750118905|16.34333654|0.076846462|14.57968578|17.80704259', '29|-1.69481584|16.29584097|0.076148308|14.54614966|17.73667414', '30|-1.642106779|16.24972371|0.075499126|14.51319492|17.66932346', '31|-1.592744414|16.20495268|0.074898994|14.48083795|17.6049486', '32|-1.547442391|16.16149871|0.074347997|14.44909329|17.54350898', '33|-1.506902601|16.11933258|0.073846139|14.41797561|17.48496295', '34|-1.471770047|16.07842758|0.07339337|14.38749811|17.42926933', '35|-1.442628957|16.03875896|0.072989551|14.35767293|17.37638677', '36|-1.419991255|16.00030401|0.072634432|14.32851119|17.32627356', '37|-1.404277619|15.96304277|0.072327649|14.30002256|17.27888795', '38|-1.39586317|15.92695418|0.07206864|14.27221761|17.23418554', '39|-1.394935252|15.89202582|0.071856805|14.24510202|17.19212545', '40|-1.401671596|15.85824093|0.071691278|14.21868433|17.15266201', '41|-1.416100312|15.82558822|0.071571093|14.19297011|17.11575098', '42|-1.438164899|15.79405728|0.071495113|14.16796472|17.08134677', '43|-1.467669032|15.76364255|0.071462106|14.14367089|17.04940504', '44|-1.504376347|15.73433668|0.071470646|14.12009269|17.0198786', '45|-1.547942838|15.70613566|0.071519218|14.09723246|16.99272087', '46|-1.597896397|15.67904062|0.071606277|14.07508966|16.96788739', '47|-1.653732283|15.65305192|0.071730167|14.05366443|16.94533215', '48|-1.714869347|15.62817269|0.071889214|14.03295533|16.92501028', '49|-1.780673181|15.604408|0.072081737|14.01295984|16.90687779', '50|-1.850468473|15.58176458|0.072306081|13.99367445|16.89089179', '51|-1.923551865|15.56025067|0.072560637|13.97509464|16.87701073', '52|-1.999220429|15.5398746|0.07284384|13.95721572|16.86519374', '53|-2.076707178|15.52064993|0.073154324|13.94002947|16.85540483', '54|-2.155348017|15.50258427|0.073490667|13.92353116|16.8476049', '55|-2.234438552|15.48568973|0.073851672|13.90771281|16.84175987', '56|-2.313321723|15.46997718|0.074236235|13.89256678|16.8378366', '57|-2.391381273|15.45545692|0.074643374|13.87808525|16.83580365', '58|-2.468032491|15.44213961|0.075072264|13.86425959|16.83563223', '59|-2.542781541|15.43003207|0.075522104|13.85108308|16.83729272', '60|-2.61516595|15.41914163|0.07599225|13.83854804|16.84075838', '61|-2.684789516|15.40947356|0.076482128|13.82664746|16.84600319', '62|-2.751316949|15.40103139|0.076991232|13.81537489|16.85300198', '63|-2.81445945|15.39381785|0.077519149|13.8047237|16.86173124', '64|-2.87402476|15.38783094|0.07806539|13.79469004|16.87216519', '65|-2.92984048|15.38306945|0.078629592|13.78526882|16.88428085', '66|-2.981796828|15.37952958|0.079211369|13.77645627|16.89805459', '67|-3.029831343|15.37720582|0.079810334|13.76824936|16.91346275', '68|-3.073924224|15.37609107|0.080426086|13.76064574|16.93048153', '69|-3.114093476|15.37617677|0.081058206|13.75364373|16.94908693', '70|-3.15039004|15.37745304|0.081706249|13.7472423|16.96925461', '71|-3.182893018|15.37990886|0.082369741|13.74144099|16.99095993', '72|-3.21170511|15.38353217|0.083048178|13.73623987|17.01417786', '73|-3.23694834|15.38831005|0.083741021|13.73163946|17.03888299', '74|-3.25876011|15.39422883|0.0844477|13.72764072|17.06504953', '75|-3.277281546|15.40127496|0.085167651|13.72424433|17.09265223', '76|-3.292683774|15.40943252|0.085900184|13.72145289|17.12166319', '77|-3.305124073|15.41868691|0.086644667|13.71926775|17.15205629', '78|-3.314768951|15.42902273|0.087400421|13.71769094|17.18380454', '79|-3.321785992|15.44042439|0.088166744|13.71672458|17.21688072', '80|-3.326345795|15.45287581|0.088942897|13.71637124|17.25125697', '81|-3.328602731|15.46636218|0.089728202|13.71663233|17.28690708', '82|-3.328725277|15.48086704|0.090521875|13.71751078|17.32380254', '83|-3.32687018|15.49637465|0.091323162|13.71900887|17.3619157', '84|-3.323188896|15.51286936|0.092131305|13.72112886|17.40121891', '85|-3.317827016|15.53033563|0.092945544|13.72387293|17.44168456', '86|-3.310923871|15.54875807|0.093765118|13.72724315|17.48328513', '87|-3.302612272|15.56812143|0.09458927|13.7312415|17.52599317', '88|-3.293018361|15.58841065|0.095417247|13.73586983|17.56978138', '89|-3.282260813|15.60961101|0.096248301|13.7411299|17.61462266', '90|-3.270454609|15.63170735|0.097081694|13.74702309|17.66048985', '91|-3.257703616|15.65468563|0.097916698|13.753551|17.70735632', '92|-3.244108214|15.67853139|0.098752593|13.7607148|17.75519541', '93|-3.229761713|15.70323052|0.099588675|13.76851558|17.80398077', '94|-3.214751287|15.72876911|0.100424251|13.77695423|17.85368626', '95|-3.199158184|15.75513347|0.101258643|13.78603145|17.90428602', '96|-3.18305795|15.78231007|0.102091189|13.79574779|17.95575444', '97|-3.166520664|15.8102856|0.102921245|13.80610355|18.00806622', '98|-3.1496103|15.83904708|0.103748189|13.81709878|18.06119653', '99|-3.132389637|15.86858123|0.104571386|13.82873375|18.1151201', '100|-3.114911153|15.89887562|0.105390269|13.84100784|18.16981303', '101|-3.097226399|15.92991765|0.106204258|13.85392068|18.22525119', '102|-3.079383079|15.96169481|0.107012788|13.86747174|18.28141055', '103|-3.061423765|15.99419489|0.107815327|13.88166013|18.33826774', '104|-3.043386071|16.02740607|0.108611374|13.89648454|18.39579999', '105|-3.025310003|16.0613159|0.109400388|13.91194439|18.45398355', '106|-3.007225737|16.09591292|0.110181915|13.92803786|18.51279647', '107|-2.989164598|16.13118532|0.110955478|13.94476358|18.57221621', '108|-2.971148225|16.16712234|0.111720691|13.9621189|18.63222223', '109|-2.953208047|16.20371168|0.112477059|13.98010297|18.69279128', '110|-2.935363951|16.24094239|0.1132242|13.99871328|18.75390266', '111|-2.917635157|16.27880346|0.113961734|14.01794738|18.81553565', '112|-2.900039803|16.31728385|0.114689291|14.03780282|18.87766958', '113|-2.882593796|16.35637267|0.115406523|14.0582769|18.94028419', '114|-2.865311266|16.39605916|0.116113097|14.07936677|19.00335954', '115|-2.848204697|16.43633265|0.116808702|14.10106937|19.06687603', '116|-2.831285052|16.47718256|0.117493042|14.1233815|19.13081436', '117|-2.81456189|16.51859843|0.11816584|14.14629977|19.19515554', '118|-2.79804347|16.56056987|0.118826835|14.16982063|19.25988094', '119|-2.781736856|16.60308661|0.119475785|14.19394037|19.3249722', '120|-2.765648008|16.64613844|0.120112464|14.21865508|19.3904113', '121|-2.749782197|16.68971518|0.120736656|14.24396081|19.45618042', '122|-2.734142443|16.73380695|0.121348181|14.26985313|19.52226247', '123|-2.718732873|16.77840363|0.121946849|14.29632789|19.58864006', '124|-2.703555506|16.82349538|0.122532501|14.32338048|19.65529649', '125|-2.688611957|16.86907238|0.123104991|14.35100623|19.72221531', '126|-2.673903164|16.91512487|0.123664186|14.37920031|19.78938034', '127|-2.659429443|16.96164317|0.124209969|14.40795771|19.85677572', '128|-2.645190534|17.00861766|0.124742239|14.43727329|19.92438591', '129|-2.631185649|17.05603879|0.125260905|14.46714175|19.99219565', '130|-2.617413511|17.10389705|0.125765895|14.49755765|20.06019002', '131|-2.603872392|17.15218302|0.126257147|14.52851537|20.12835437', '132|-2.590560148|17.20088732|0.126734613|14.56000917|20.19667437', '133|-2.577474253|17.25000062|0.12719826|14.59203313|20.265136', '134|-2.564611831|17.29951367|0.127648067|14.62458122|20.33372554', '135|-2.551969684|17.34941726|0.128084023|14.65764722|20.40242956', '136|-2.539539972|17.39970308|0.128506192|14.69122381|20.4712365', '137|-2.527325681|17.45036072|0.128914497|14.72530601|20.54013114', '138|-2.515320235|17.50138161|0.129309001|14.75988661|20.60910189', '139|-2.503519447|17.55275674|0.129689741|14.79495883|20.6781365', '140|-2.491918934|17.60447714|0.130056765|14.83051578|20.74722303', '141|-2.480514136|17.6565339|0.130410133|14.86655039|20.81634983', '142|-2.469300331|17.70891811|0.130749913|14.90305549|20.88550554', '143|-2.458272656|17.76162094|0.131076187|14.94002374|20.95467909', '144|-2.447426113|17.81463359|0.131389042|14.97744768|21.02385969', '145|-2.436755595|17.86794729|0.131688579|15.01531973|21.09303687', '146|-2.426255887|17.92155332|0.131974905|15.05363215|21.1622004', '147|-2.415921689|17.97544299|0.132248138|15.09237707|21.23134038', '148|-2.405747619|18.02960765|0.132508403|15.13154651|21.30044717', '149|-2.395728233|18.08403868|0.132755834|15.17113234|21.36951141', '150|-2.385858029|18.1387275|0.132990575|15.2111263|21.43852405', '151|-2.376131459|18.19366555|0.133212776|15.25152001|21.5074763', '152|-2.366542942|18.24884431|0.133422595|15.29230496|21.57635964', '153|-2.357086871|18.3042553|0.133620197|15.33347251|21.64516586', '154|-2.347757625|18.35989003|0.133805756|15.37501389|21.71388701', '155|-2.338549576|18.41574009|0.133979452|15.41692023|21.78251541', '156|-2.3294571|18.47179706|0.13414147|15.4591825|21.85104367', '157|-2.320474586|18.52805255|0.134292005|15.50179159|21.91946467', '158|-2.311596446|18.5844982|0.134431256|15.54473823|21.98777156', '159|-2.302817124|18.64112567|0.134559427|15.58801305|22.05595776', '160|-2.294131107|18.69792663|0.134676731|15.63160658|22.12401698', '161|-2.285532933|18.75489278|0.134783385|15.67550919|22.19194317', '162|-2.277017201|18.81201584|0.134879611|15.71971118|22.25973057', '163|-2.268578584|18.86928753|0.134965637|15.7642027|22.32737368', '164|-2.260211837|18.92669959|0.135041695|15.80897382|22.39486727', '165|-2.251911809|18.98424378|0.135108024|15.85401448|22.46220636', '166|-2.243673453|19.04191185|0.135164867|15.89931451|22.52938625', '167|-2.235491842|19.09969557|0.135212469|15.94486363|22.5964025', '168|-2.227362173|19.15758672|0.135251083|15.99065148|22.66325092', '169|-2.21927979|19.21557707|0.135280963|16.03666757|22.7299276', '170|-2.211240187|19.27365839|0.135302371|16.0829013|22.79642886', '171|-2.203239029|19.33182247|0.135315568|16.129342|22.86275131', '172|-2.195272161|19.39006106|0.135320824|16.17597888|22.92889179', '173|-2.187335625|19.44836594|0.135318407|16.22280106|22.99484741', '174|-2.179425674|19.50672885|0.135308594|16.26979755|23.06061552', '175|-2.171538789|19.56514153|0.135291662|16.31695728|23.12619375', '176|-2.163671689|19.62359571|0.135267891|16.3642691|23.19157996', '177|-2.155821357|19.6820831|0.135237567|16.41172173|23.25677226', '178|-2.147985046|19.74059538|0.135200976|16.45930384|23.32176902', '179|-2.140160305|19.7991242|0.135158409|16.50700399|23.38656886', '180|-2.132344989|19.85766121|0.135110159|16.55481067|23.45117065', '181|-2.124537282|19.916198|0.135056522|16.60271228|23.5155735', '182|-2.116735712|19.97472615|0.134997797|16.65069714|23.57977678', '183|-2.108939167|20.03323719|0.134934285|16.69875348|23.6437801', '184|-2.10114692|20.09172262|0.134866291|16.74686947|23.70758332', '185|-2.093358637|20.15017387|0.134794121|16.79503318|23.77118654', '186|-2.085574403|20.20858236|0.134718085|16.84323264|23.83459013', '187|-2.077794735|20.26693944|0.134638494|16.89145577|23.89779468', '188|-2.070020599|20.32523642|0.134555663|16.93969043|23.96080104', '189|-2.062253431|20.38346455|0.13446991|16.98792443|24.02361032', '190|-2.054495145|20.44161501|0.134381553|17.03614547|24.08622386', '191|-2.046748156|20.49967894|0.134290916|17.08434122|24.14864327', '192|-2.039015385|20.5576474|0.134198323|17.13249925|24.21087038', '193|-2.031300282|20.6155114|0.134104101|17.18060709|24.2729073', '194|-2.023606828|20.67326189|0.134008581|17.22865219|24.33475639', '195|-2.015942013|20.73088905|0.133912066|17.27662259|24.39641931', '196|-2.008305745|20.7883851|0.133814954|17.32450423|24.4579009', '197|-2.000706389|20.84574003|0.133717552|17.37228509|24.51920324', '198|-1.993150137|20.90294449|0.1336202|17.41995236|24.58032971', '199|-1.985643741|20.95998909|0.133523244|17.46749315|24.64128395', '200|-1.97819451|21.01686433|0.133427032|17.51489451|24.70206989', '201|-1.970810308|21.07356067|0.133331914|17.56214342|24.76269168', '202|-1.96349954|21.1300685|0.133238245|17.60922679|24.82315378', '203|-1.956271141|21.18637813|0.133146383|17.65613146|24.88346091', '204|-1.949134561|21.24247982|0.13305669|17.70284417|24.94361805', '205|-1.942099744|21.29836376|0.132969531|17.74935161|25.00363048', '206|-1.935177101|21.35402009|0.132885274|17.79564039|25.06350375', '207|-1.92837748|21.40943891|0.132804292|17.84169701|25.1232437', '208|-1.921712136|21.46461026|0.132726962|17.8875079|25.18285645', '209|-1.915192685|21.51952414|0.132653664|17.9330594|25.24234842', '210|-1.908831065|21.57417053|0.132584784|17.97833773|25.30172632', '211|-1.902639482|21.62853937|0.132520711|18.02332903|25.36099716', '212|-1.896630358|21.68262062|0.132461838|18.06801933|25.42016826', '213|-1.890816268|21.73640419|0.132408563|18.11239453|25.47924723', '214|-1.885209876|21.78988003|0.132361289|18.15644042|25.538242', '215|-1.879823505|21.84303819|0.132320427|18.20014256|25.59716095', '216|-1.874670324|21.8958685|0.132286382|18.24348662|25.65601244', '217|-1.869760299|21.94836168|0.1322596|18.28645727|25.71480629', '218|-1.865113245|22.00050569|0.132240418|18.32904183|25.77354888', '219|-1.860734944|22.05229242|0.13222933|18.37122369|25.83225207', '220|-1.85663384|22.10371305|0.132226801|18.41298696|25.89092687', '221|-1.852827186|22.15475603|0.132233201|18.45431794|25.94958116', '222|-1.849323204|22.20541249|0.132248993|18.49520062|26.00822631', '223|-1.846131607|22.255673|0.132274625|18.53561932|26.06687321', '224|-1.843261294|22.30552831|0.132310549|18.57555819|26.1255331', '225|-1.840720248|22.3549693|0.132357221|18.61500111|26.18421759', '226|-1.83851544|22.40398706|0.132415103|18.65393178|26.24293861', '227|-1.83665586|22.45257182|0.132484631|18.69233437|26.30170723', '228|-1.835138046|22.50071778|0.132566359|18.73019025|26.36053932', '229|-1.833972004|22.54841437|0.132660699|18.7674838|26.41944523', '230|-1.833157751|22.59565422|0.132768153|18.80419732|26.47843912', '231|-1.83269562|22.64242956|0.132889211|18.84031318|26.53753478', '232|-1.832584342|22.68873292|0.133024368|18.87581348|26.59674639', '233|-1.832820974|22.73455713|0.133174129|18.91067999|26.65608851', '234|-1.833400825|22.7798953|0.133338999|18.9448942|26.71557609', '235|-1.834317405|22.82474087|0.133519496|18.97843726|26.77522448', '236|-1.83555752|22.86908912|0.133716192|19.0112887|26.83505132', '237|-1.837119466|22.91293151|0.133929525|19.04343134|26.89506944', '238|-1.838987063|22.95626373|0.134160073|19.07484425|26.95529697', '239|-1.841146139|22.99908062|0.134408381|19.10550722|27.01575092', '240|-1.84233016|23.02029424|0.134539365|19.12055111|27.04606818');
    var girls_bmi = new Array('24|-1.024496827|16.38804056|0.085025838|14.3801866|17.97371413', '25|-1.102698353|16.3189719|0.084214052|14.34527262|17.88748812', '26|-1.18396635|16.25207985|0.083455124|14.31096806|17.80489051', '27|-1.268071036|16.18734669|0.082748284|14.27727686|17.72586396', '28|-1.354751525|16.12475448|0.082092737|14.24420303|17.65035137', '29|-1.443689692|16.06428762|0.081487717|14.21174909|17.57829774', '30|-1.53454192|16.00593001|0.080932448|14.17991775|17.50964839', '31|-1.626928093|15.94966631|0.080426175|14.14871111|17.44434994', '32|-1.720434829|15.89548197|0.079968176|14.11813062|17.38235043', '33|-1.814635262|15.84336179|0.079557735|14.08817793|17.32359846', '34|-1.909076262|15.79329146|0.079194187|14.0588539|17.26804436', '35|-2.003296102|15.7452564|0.078876895|14.03015932|17.21563951', '36|-2.096828937|15.69924188|0.078605255|14.00209476|17.16633643', '37|-2.189211877|15.65523282|0.078378696|13.97466073|17.12008872', '38|-2.279991982|15.61321371|0.078196674|13.94785767|17.07685104', '39|-2.368732949|15.57316843|0.078058667|13.92168608|17.03657894', '40|-2.455021314|15.53508019|0.077964169|13.89614655|16.99922885', '41|-2.538471972|15.49893145|0.077912684|13.87123981|16.96475788', '42|-2.618732901|15.46470384|0.077903716|13.84696678|16.93312378', '43|-2.695488973|15.43237817|0.077936763|13.82332865|16.90428477', '44|-2.768464816|15.40193436|0.078011309|13.80032682|16.87819947', '45|-2.837426693|15.37335154|0.078126817|13.77796299|16.85482681', '46|-2.902178205|15.34660842|0.078282739|13.75623885|16.83412628', '47|-2.962580386|15.32168181|0.078478449|13.73515717|16.81605638', '48|-3.018521987|15.29854897|0.078713325|13.71472021|16.80057671', '49|-3.069936555|15.27718618|0.078986694|13.6949307|16.78764654', '50|-3.116795864|15.2575692|0.079297841|13.67579162|16.77722512', '51|-3.159107331|15.23967338|0.079646006|13.65730608|16.76927159', '52|-3.196911083|15.22347371|0.080030389|13.63947739|16.76374505', '53|-3.230276759|15.20894491|0.080450145|13.62230894|16.76060449', '54|-3.259300182|15.19606152|0.080904391|13.60580421|16.75980884', '55|-3.284099963|15.18479799|0.081392203|13.58996673|16.76131695', '56|-3.30481415|15.17512871|0.081912623|13.57480002|16.76508763', '57|-3.321596954|15.16702811|0.082464661|13.56030761|16.77107966', '58|-3.334615646|15.16047068|0.083047295|13.54649295|16.77925184', '59|-3.344047622|15.15543107|0.083659478|13.53335941|16.78956298', '60|-3.35007771|15.15188405|0.084300139|13.52091027|16.80197195', '61|-3.352893805|15.14980479|0.0849682|13.50914853|16.81643792', '62|-3.352691376|15.14916825|0.085662539|13.4980774|16.83291965', '63|-3.34966438|15.14994984|0.086382035|13.48769977|16.85137625', '64|-3.343998803|15.15212585|0.087125591|13.47801782|16.87176785', '65|-3.335889574|15.15567186|0.087892047|13.4690344|16.89405345', '66|-3.325522491|15.16056419|0.088680264|13.46075175|16.91819285', '67|-3.31307846|15.16677947|0.089489106|13.45317191|16.94414613', '68|-3.298732648|15.17429464|0.090317434|13.44629667|16.97187362', '69|-3.282653831|15.18308694|0.091164117|13.44012761|17.00133593', '70|-3.265003896|15.1931339|0.092028028|13.43466608|17.03249399', '71|-3.245937506|15.20441335|0.092908048|13.42991321|17.065309', '72|-3.225606516|15.21690296|0.093803033|13.42587042|17.09974172', '73|-3.204146115|15.2305815|0.094711916|13.42253788|17.13575468', '74|-3.181690237|15.24542745|0.095633595|13.41991629|17.17330968', '75|-3.158363475|15.26141966|0.096566992|13.41800595|17.21236911', '76|-3.134282833|15.27853728|0.097511046|13.41680692|17.25289572', '77|-3.109557879|15.29675967|0.09846471|13.41631905|17.29485256', '78|-3.084290931|15.31606644|0.099426955|13.41654198|17.33820304', '79|-3.058577292|15.33643745|0.100396769|13.41747514|17.38291092', '80|-3.032505499|15.35785274|0.101373159|13.41911775|17.42894029', '81|-3.0061576|15.38029261|0.10235515|13.42146884|17.4762556', '82|-2.979609448|15.40373754|0.103341788|13.42452722|17.52482162', '83|-2.952930993|15.42816819|0.104332139|13.42829152|17.57460349', '84|-2.926186592|15.45356545|0.105325289|13.43276016|17.6255667', '85|-2.899435307|15.47991037|0.106320346|13.43793139|17.67767708', '86|-2.872731211|15.50718419|0.10731644|13.44380325|17.7309008', '87|-2.846123683|15.53536829|0.108312721|13.45037362|17.78520438', '88|-2.819657704|15.56444426|0.109308364|13.45764018|17.8405547', '89|-2.793374145|15.5943938|0.110302563|13.46560044|17.89691898', '90|-2.767310047|15.6251988|0.111294537|13.47425174|17.95426475', '91|-2.741498897|15.65684126|0.112283526|13.48359125|18.01255992', '92|-2.715970894|15.68930333|0.113268793|13.49361598|18.07177271', '93|-2.690753197|15.7225673|0.114249622|13.50432278|18.13187166', '94|-2.665870146|15.75661555|0.115225321|13.51570835|18.19282565', '95|-2.641343436|15.79143062|0.116195218|13.52776922|18.25460388', '96|-2.617192204|15.82699517|0.117158667|13.54050176|18.31717594', '97|-2.593430614|15.86329241|0.118115073|13.55390172|18.38051241', '98|-2.570076037|15.90030484|0.119063807|13.56796556|18.44458291', '99|-2.547141473|15.93801545|0.12000429|13.58268918|18.50935798', '100|-2.524635245|15.97640787|0.120935994|13.59806788|18.57480931', '101|-2.502569666|16.01546483|0.121858355|13.61409768|18.6409074', '102|-2.48095189|16.05516984|0.12277087|13.63077388|18.70762408', '103|-2.459785573|16.09550688|0.123673085|13.6480912|18.77493214', '104|-2.439080117|16.13645881|0.124564484|13.6660455|18.84280276', '105|-2.418838304|16.17800955|0.125444639|13.68463148|18.91120897', '106|-2.399063683|16.22014281|0.126313121|13.70384401|18.98012366', '107|-2.379756861|16.26284277|0.127169545|13.72367745|19.04952063', '108|-2.360920527|16.30609316|0.128013515|13.74412656|19.11937316', '109|-2.342557728|16.34987759|0.128844639|13.7651862|19.18965453', '110|-2.324663326|16.39418118|0.129662637|13.78684956|19.26034062', '111|-2.307240716|16.43898741|0.130467138|13.80911155|19.33140487', '112|-2.290287663|16.48428082|0.131257852|13.83196589|19.4028226', '113|-2.273803847|16.53004554|0.132034479|13.85540667|19.47456869', '114|-2.257782149|16.57626713|0.132796819|13.87942647|19.54662051', '115|-2.242227723|16.62292864|0.133544525|13.90402053|19.6189515', '116|-2.227132805|16.67001572|0.134277436|13.92918106|19.69153965', '117|-2.212495585|16.71751288|0.134995324|13.95490163|19.7643612', '118|-2.19831275|16.76540496|0.135697996|13.98117536|19.83739314', '119|-2.184580762|16.81367689|0.136385276|14.00799522|19.91061278', '120|-2.171295888|16.86231366|0.137057004|14.03535405|19.98399779', '121|-2.158454232|16.91130036|0.137713039|14.06324456|20.05752615', '122|-2.146051754|16.96062216|0.138353254|14.0916593|20.13117619', '123|-2.134084303|17.0102643|0.138977537|14.12059071|20.20492657', '124|-2.122547629|17.06021213|0.139585795|14.15003106|20.27875629', '125|-2.111437411|17.11045106|0.140177947|14.17997251|20.35264468', '126|-2.100749266|17.16096656|0.140753927|14.21040706|20.42657139', '127|-2.090478774|17.21174424|0.141313686|14.2413266|20.50051644', '128|-2.080621484|17.26276973|0.141857186|14.27272286|20.57446015', '129|-2.071172932|17.31402878|0.142384404|14.30458743|20.64838321', '130|-2.062128649|17.3655072|0.142895332|14.33691178|20.72226661', '131|-2.053484173|17.4171909|0.143389972|14.36968723|20.79609169', '132|-2.045235058|17.46906585|0.143868341|14.40290497|20.86984014', '133|-2.03737688|17.52111811|0.144330469|14.43655605|20.94349396', '134|-2.029906684|17.57333347|0.144776372|14.47063181|21.01703489', '135|-2.022817914|17.62569869|0.145206138|14.50512237|21.09044653', '136|-2.016107084|17.67819987|0.145619819|14.54001862|21.16371155', '137|-2.009769905|17.7308234|0.146017491|14.57531107|21.2368133', '138|-2.003802134|17.78355575|0.146399239|14.61099007|21.30973548', '139|-1.998199572|17.83638347|0.146765161|14.64704584|21.38246211', '140|-1.992958064|17.88929321|0.147115364|14.68346846|21.45497756', '141|-1.988073505|17.94227168|0.147449967|14.72024789|21.52726655', '142|-1.983541835|17.9953057|0.147769097|14.75737391|21.5993141', '143|-1.979359041|18.04838216|0.148072891|14.7948362|21.6711056', '144|-1.975521156|18.10148804|0.148361495|14.83262428|21.74262677', '145|-1.972024258|18.15461039|0.148635067|14.87072753|21.81386368', '146|-1.968864465|18.20773639|0.148893769|14.90913518|21.88480271', '147|-1.966037938|18.26085325|0.149137776|14.94783635|21.95543061', '148|-1.963540872|18.31394832|0.14936727|14.98681999|22.02573445', '149|-1.961369499|18.36700902|0.149582439|15.0260749|22.09570166', '150|-1.959520079|18.42002284|0.149783482|15.06558978|22.16531999', '151|-1.9579889|18.47297739|0.149970604|15.10535314|22.23457754', '152|-1.956772271|18.52586035|0.15014402|15.14535337|22.30346276', '153|-1.95586652|18.57865951|0.15030395|15.18557871|22.37196443', '154|-1.955267984|18.63136275|0.150450621|15.22601726|22.44007167', '155|-1.954973011|18.68395801|0.15058427|15.26665697|22.50777397', '156|-1.954977947|18.73643338|0.150705138|15.30748565|22.57506113', '157|-1.955279136|18.788777|0.150813475|15.34849095|22.6419233', '158|-1.955872909|18.84097713|0.150909535|15.38966039|22.70835101', '159|-1.956755579|18.89302212|0.150993582|15.43098133|22.77433508', '160|-1.957923436|18.94490041|0.151065883|15.47244099|22.83986672', '161|-1.959372737|18.99660055|0.151126714|15.51402643|22.90493747', '162|-1.9610997|19.04811118|0.151176355|15.55572457|22.96953922', '163|-1.963100496|19.09942105|0.151215094|15.59752218|23.03366421', '164|-1.96537124|19.15051899|0.151243223|15.63940588|23.09730502', '165|-1.967907983|19.20139397|0.151261042|15.68136213|23.16045458', '166|-1.970706706|19.25203503|0.151268855|15.72337724|23.2231062', '167|-1.973763307|19.30243131|0.151266974|15.76543738|23.28525349', '168|-1.977073595|19.35257209|0.151255713|15.80752854|23.34689045', '169|-1.980633277|19.40244671|0.151235395|15.84963659|23.40801143', '170|-1.984437954|19.45204465|0.151206347|15.89174721|23.46861112', '171|-1.988483106|19.50135548|0.151168902|15.93384595|23.52868458', '172|-1.992764085|19.55036888|0.151123398|15.97591819|23.5882272', '173|-1.997276103|19.59907464|0.15107018|16.01794916|23.64723476', '174|-2.002014224|19.64746266|0.151009595|16.05992392|23.70570337', '175|-2.00697335|19.69552294|0.150942|16.10182739|23.76362952', '176|-2.012148213|19.7432456|0.150867753|16.14364432|23.82101004', '177|-2.017533363|19.79062086|0.150787221|16.1853593|23.87784214', '178|-2.023123159|19.83763907|0.150700774|16.22695676|23.93412338', '179|-2.028911755|19.88429066|0.150608788|16.26842096|23.98985168', '180|-2.034893091|19.9305662|0.150511645|16.30973602|24.04502533', '181|-2.041060881|19.97645636|0.150409731|16.35088587|24.09964299', '182|-2.047408604|20.02195192|0.15030344|16.3918543|24.15370368', '183|-2.05392949|20.06704377|0.150193169|16.43262492|24.20720678', '184|-2.060616513|20.11172291|0.150079322|16.47318119|24.26015204', '185|-2.067462375|20.15598047|0.149962308|16.5135064|24.3125396', '186|-2.074459502|20.19980767|0.14984254|16.55358366|24.36436993', '187|-2.081600029|20.24319586|0.149720441|16.59339594|24.41564391', '188|-2.088875793|20.28613648|0.149596434|16.63292602|24.46636278', '189|-2.096278323|20.32862109|0.149470953|16.67215653|24.51652812', '190|-2.103798828|20.37064138|0.149344433|16.71106993|24.56614194', '191|-2.111428194|20.41218911|0.149217319|16.74964852|24.61520657', '192|-2.119156972|20.45325617|0.14909006|16.78787442|24.66372475', '193|-2.126975375|20.49383457|0.14896311|16.82572959|24.71169957', '194|-2.134873266|20.5339164|0.148836931|16.86319583|24.75913451', '195|-2.142840157|20.57349387|0.148711989|16.90025476|24.80603342', '196|-2.150865204|20.61255929|0.148588757|16.93688787|24.85240053', '197|-2.158937201|20.65110506|0.148467715|16.97307644|24.89824041', '198|-2.167044578|20.6891237|0.148349348|17.00880162|24.94355805', '199|-2.175176987|20.72660728|0.14823412|17.04404492|24.98835785', '200|-2.183317362|20.76355011|0.148122614|17.07878553|25.03264836', '201|-2.191457792|20.79994337|0.148015249|17.11300574|25.07643282', '202|-2.199583649|20.83578051|0.147912564|17.14668547|25.11971866', '203|-2.207681525|20.87105449|0.147815078|17.17980508|25.16251271', '204|-2.215737645|20.90575839|0.147723315|17.21234472|25.20482218', '205|-2.223739902|20.93988477|0.147637768|17.24428517|25.24665348', '206|-2.231667995|20.97342858|0.147559083|17.27560407|25.28801794', '207|-2.239511942|21.00638171|0.147487716|17.30628297|25.32892108', '208|-2.247257081|21.0387374|0.14742421|17.33630159|25.3693713', '209|-2.254885145|21.07048996|0.147369174|17.36563825|25.40937929', '210|-2.26238209|21.10163241|0.147323144|17.39427286|25.44895346', '211|-2.269731517|21.13215845|0.147286698|17.42218439|25.48810377', '212|-2.276917229|21.16206171|0.147260415|17.44935184|25.52684029', '213|-2.283925442|21.1913351|0.147244828|17.47575509|25.56517184', '214|-2.290731442|21.21997472|0.147240683|17.50136974|25.603114', '215|-2.29732427|21.24797262|0.147248467|17.52617667|25.64067435', '216|-2.303687802|21.27532239|0.14726877|17.55015468|25.67786376', '217|-2.309799971|21.30201933|0.147302299|17.57328018|25.714697', '218|-2.315651874|21.32805489|0.147349514|17.59553468|25.75118107', '219|-2.32121731|21.35342563|0.147411215|17.61689275|25.7873338', '220|-2.326481911|21.37812462|0.147487979|17.63733356|25.82316611', '221|-2.331428139|21.40214589|0.147580453|17.6568349|25.85869115', '222|-2.336038473|21.42548351|0.147689289|17.67537444|25.89392241', '223|-2.34029545|21.44813156|0.14781515|17.69292976|25.92887369', '224|-2.344181703|21.47008412|0.147958706|17.70947829|25.96355908', '225|-2.34768|21.49133529|0.148120633|17.72499741|25.99799301', '226|-2.350773286|21.51187918|0.148301619|17.73946435|26.03219019', '227|-2.353444725|21.53170989|0.148502355|17.75285625|26.06616563', '228|-2.355677743|21.55082155|0.148723546|17.76515018|26.09993465', '229|-2.35745607|21.56920824|0.148965902|17.77632308|26.13351285', '230|-2.358763788|21.58686406|0.149230142|17.78635182|26.16691611', '231|-2.359585369|21.60378309|0.149516994|17.79521318|26.20016061', '232|-2.359905726|21.61995939|0.149827195|17.80288385|26.23326279', '233|-2.359710258|21.635387|0.150161492|17.80934044|26.26623937', '234|-2.358980464|21.65006126|0.150520734|17.81455755|26.29911039', '235|-2.357714508|21.6639727|0.150905439|17.81851675|26.33188509', '236|-2.355892424|21.67711736|0.151316531|17.82119134|26.36458581', '237|-2.353501353|21.68948935|0.151754808|17.82255737|26.39723077', '238|-2.350528726|21.70108288|0.152221086|17.8225906|26.42983873', '239|-2.346962247|21.71189225|0.152716206|17.82126653|26.4624291', '240|-2.34495843|21.71699934|0.152974718|17.82009046|26.47871966');

    this.boys_data = {};
    this.girls_data = {};

    // Convert those data string arrays into something meaningful
    for (var i = 0; i < boys_bmi.length; i++) {
      var arr = boys_bmi[i].split('|')
      for (var j = 0; j < arr.length; j++) {
        arr[j] = parseFloat(arr[j]);
      }
      this.boys_data[arr[0]] = arr;
    };

    for (var i = 0; i < girls_bmi.length; i++) {
      var arr = girls_bmi[i].split('|');
      for (var j = 0; j < arr.length; j++) {
        arr[j] = parseFloat(arr[j]);
      }
      this.girls_data[arr[0]] = arr;
    };

  }
  this.setup();

  // Calculates the percentile position of the provided gender (bool), age (int in years), and bmi in decimal form.
  this.calculate = function(isMale, age, bmi) {
    if (age < 2) {
      age = 2;
    }
    if (age > 23) {
      age = 23;
    }

    var percentiles_array;
    isMale ? percentiles_array = this.boys_data : percentiles_array = this.girls_data;
    var key = (Math.round(age)*12)
    , L = 0
    , M = 0
    , S = 0
    , P = 0
    , Z = 0;

    L = percentiles_array[key][1];
    M = percentiles_array[key][2];
    S = percentiles_array[key][3];

    if ((!isNaN(M)) && (!isNaN(S))) {
      if (L == 0) {
        Z = Math.log(bmi/M)/S;
      } else {
        Z = (Math.pow((bmi/M), L)-1)/(L*S);
      }

      P=1-1/Math.sqrt(2*3.14159265)*Math.exp(-Math.pow(Math.abs(Z),2)/2)*(0.4361836*(1/(1+0.33267*Math.abs(Z)))-0.1201676*Math.pow((1/(1+0.33267*Math.abs(Z))),2)+0.937298*Math.pow((1/(1+0.33267*Math.abs(Z))),3));

      var centile = 0;
      if (Z>0) {
        centile = (P*100);
      } else {
        centile = (100-(P*100));
      }

      centile = Math.round(centile);
      return centile;
    } else {
      return -1; // error val
    }

  };

  // Takes a BMI Classification and returns the proper response text
  this.getBMIClassificationResponseText = function(percentile) {
    var classification = this.getBMIClassification(percentile);
    if (classification == "U") {
      return "underweight";
    } else if (classification == "N") {
      return "at a healthy weight";
    } else if (classification == "R") {
      return "overweight";
    } else if (classification == "O") {
      return "obese";
    }
  };

  // Takes a BMI percentile and returns a BMI classification character
  this.getBMIClassification = function(percent) {
    if (percent > 95) {
      return "O"; // Obese
    } else if (percent > 85) {
      return "R"; // Overweight
    } else if (percent < 0) {
      return "ERR"; // Error
    } else if (percent < 5) {
      return "U"; // Underweight
    } else { // Normal weight
      return "N";
    }
  };

  // Takes a BMI decimal and returns BMI classification
  this.getBMIStatus = function(bmi) {
    if (bmi < 16) {
      return "Severely Underweight";
    } else if (bmi < 18.5) {
      return "Underweight";
    } else if (bmi < 25) {
      return "Normal";
    } else if (bmi < 30) {
      return "Overweight";
    } else if ((bmi > 30) && (bmi < 35)) {
      return "Obese";
    } else {
      return "Severely Obese";
    }
  };

};

/****************
 * BMI Calculator
 ***************/
// Extends the Date function to return month strings.
Date.prototype.getStringMonth = function() {
  var m = this.getMonth()+1;
  if (m == 1) {
    return "January";
  } else if (m == 2) {
    return "February";
  } else if (m == 3) {
    return "March";
  } else if (m == 4) {
    return "April";
  } else if (m == 5) {
    return "May";
  } else if (m == 6) {
    return "June";
  } else if (m == 7) {
    return "July";
  } else if (m == 8) {
    return "August";
  } else if (m == 9) {
    return "September";
  } else if (m == 10) {
    return "October";
  } else if (m == 11) {
    return "November";
  } else if (m == 12) {
    return "December";
  } else {
    return "Invalid Month."
  }
};

/**
 * helper()
 *
 * Detects IE and enables debug logging
 */
var Helper = function()  {

  // Allows for sane event handling with IE
  this.addEvent = function(event, element, func) {
    if (element.addEventListener) {
      element.addEventListener(event, func, false)
    } else if (element.attachEvent) {
      element.attachEvent("on"+event, func)
    } else {
      element[event] = func;
    }
  };

  // Returns false if not using IE
  this.isIE = function() {
    var ua = navigator.userAgent.toLowerCase();
    return (ua.indexOf('msie') != -1) ? parseInt(ua.split('msie')[1]) : false;
  };

  // Set to false to disable console logging
  this.debug = false;
  this.debugAll = false;

  // Logs all arguments to the console
  this.log = function(args) {
    if (this.debug && console && console.log) {
      console.log(Array.prototype.slice.call(arguments));
    }
  };

};

var BMICalculator = function() {

  var alwaysShowGraphs = true;

  // Load the IE helper function
  if (typeof Helper != "undefined") {
    var helper = new Helper();
  } else {
    alert("Could not find Helper class. BMI Calculator will not function without.");
  }

  // Load the Percentile computation function
  if (typeof Percentile != "undefined") {
    percentileHelper = new Percentile();
  } else {
    alert("Could not find Percentile class. BMI Calculator will not function without");
  }

  // Private object variables
  var that = this
  , tableUnits = 'inches'
  , isMale = false
  , showGraphs = false
  , calculatedLookBelow = document.getElementById('kh-bmicalc-look-below');

  // Public array of data_point objects
  this.dataPoints = [];

  /**
   * tableAddEntry()
   *
   * Adds another entry to the BMI calculation table
   */
  this.tableAddEntry = function() {
    var tableEntryClone = that.tableEntryDefault.cloneNode(true);
    that.tableEntryTotal += 1;
    tableEntryClone.id = tableEntryClone.id + that.tableEntryTotal;
    //helper.log(that.tableEntryDefault);
    that.tableBody.appendChild(tableEntryClone);
  };

  /**
   * tableResetEntries()
   *
   * Resets the talbes entries back to the default
   */
  this.tableResetEntries = function() {
    while (that.tableBody.firstChild) {
      that.tableBody.removeChild(that.tableBody.firstChild);
    }
    that.tableEntryTotal = -1;
    that.tableAddEntry();
  };

  /**
   * cloneNode(node)
   *
   * A fix for IE8 so a node is properly cloned
   */
  this.cloneNode = function(node) {
    // If the node is a text node, then re-create it rather than clone it
    var clone = node.nodeType == 3 ? document.createTextNode(node.nodeValue) : node.cloneNode(false);
    // Recurse
    var child = node.firstChild;
    while(child) {
      clone.appendChild(cloneNode(child));
      child = child.nextSibling;
    }

    return clone;
  };

  /**
   * tableToggleUnits(units)
   *
   * Toggles the table units between metric and imperial units
   */
  this.tableToggleUnits = function(units) {
    while (this.tableCellHeight.firstChild) {
      this.tableCellHeight.removeChild(this.tableCellHeight.firstChild);
    }

    var defaultChild = this.tableEntryDefault.children[1];
    while (defaultChild.firstChild) {
      defaultChild.removeChild(defaultChild.firstChild);
    }

    tableUnits = units;

		// Check to see if the heights select box exists already. If not, create it for the first time
		//if(this.tableCellHeight.children.length === 0) {
//			var selectBox = this.selectBoxUnitIn;
//		}
//
//		for(var i = 0; i < this.tableBody.children.length; i++) {
//			if(units === "inches") {
//				var selectBox = this.selectBoxUnitIn;
//				this.tableBody.children[i].children[1].removeChild(this.tableBody.children[i].children[1].firstChild);
//				this.tableBody.children[i].children[1].appendChild(selectBox.cloneNode(true));
//				this.tableEntryDefault.children[i].appendChild(selectBox.cloneNode(true));
//				this.tableEntryDefault.children[i].children[1].innerHTML = "lbs";
//			} else {
//				var selectBox = this.selectBoxUnitCm;
//				this.tableBody.children[i].children[1].removeChild(this.tableBody.children[i].children[1].firstChild);
//				this.tableBody.children[i].children[1].appendChild(selectBox.cloneNode(true));
//				this.tableEntryDefault.children[i].appendChild(selectBox.cloneNode(true));
//				this.tableEntryDefault.children[i].children[1].innerHTML = "kgs";
//			}
//		}

    if(units === "inches") {
      var selectBox = this.selectBoxUnitIn;
      this.tableCellHeight.appendChild(selectBox.cloneNode(true));
      this.tableEntryDefault.children[1].appendChild(selectBox.cloneNode(true));
      this.tableEntryDefault.children[2].children[1].innerHTML = "lbs";
    } else {
      var selectBox = this.selectBoxUnitCm;
      this.tableCellHeight.appendChild(selectBox.cloneNode(true));
      this.tableEntryDefault.children[1].appendChild(selectBox.cloneNode(true));
      this.tableEntryDefault.children[2].children[1].innerHTML = "kgs";
    }

    this.tableResetEntries();
  };

  var MS_IN_A_DAY = 86400000; // Constant for how many milliseconds are in a day
  // Takes two Date objects set to birthday and current date, returns age in decimal form.
  this.computeAge = function(birth_date, current_date) {
    var ageDiff = current_date - birth_date;
    return (ageDiff / MS_IN_A_DAY)/365;
  };

  /**
   * getDateTimeObject(string)
   *
   * Takes a string in the form of YYYY/MM and returns the date
   */
  this.getDateTimeObject = function(string) {
    var strArr = string.split("/")
    if (strArr.length != 2) {
      return false;
    } else {
      return new Date(strArr[0], strArr[1]-1, 1, 0, 0, 0);
    }
  };

  /**
   * calculateBMIWeightRange(data_point)
   *
   * Calcualtes the weight range of a specific data point and returns an object with a lo_weight_rand
   * and a hi_weight_range
   */
  this.calculateBMIWeightRange = function(data_point) {
    if (isMale) {
      var percentiles_array = percentileHelper.boys_data;
    } else {
      var percentiles_array = percentileHelper.girls_data;
    }

    var low_bmi = 0
    , high_bmi = 0
    , key = (Math.round(data_point.age)*12);

    if (!isNaN(percentiles_array[key][4]))
      low_bmi = percentiles_array[key][4];

    if (!isNaN(percentiles_array[key][5]))
      high_bmi = percentiles_array[key][5];

    var ret = {};

    if ((low_bmi > 0) && (high_bmi > 0)) {
      if (tableUnits == "inches") {
        ret.lo_weight_range = that.calculateStandardBMIWeight(isMale, data_point, low_bmi);
        ret.hi_weight_range = that.calculateStandardBMIWeight(isMale, data_point, high_bmi);
      } else {
        ret.lo_weight_range = that.calculateMetricBMIWeight(isMale, data_point, low_bmi);
        ret.hi_weight_range = that.calculateMetricBMIWeight(isMale, data_point, high_bmi);
      }
    }
    return ret;
  };

  /**
   * calculateStandardBMIWeight(isMale, data_point, bmi)
   *
   * Calculates the appropriate weight for a height and bmi
   */
  this.calculateStandardBMIWeight = function(isMale, data_point, bmi) {
    var inches = data_point.height
    return Math.round(((inches * inches) * bmi) / 703);
  };

  /**
   * calculateMetricBMIWeight(isMale, data_point, bmi
   *
   * Calculates the appropriate metric weight for a height and bmi
   */
  this.calculateMetricBMIWeight = function(isMale, data_point, bmi) {
    var cm = data_point.height;
    return Math.round(bmi * (cm * cm / 1000)) / 10;
  };

  /**
   * calculateTableBMI()
   *
   * Return array of BMI's based on the data in the table
   */
  this.calculateTableBMI = function() {
    that.dataPoints = [];
    var entries = this.tableBody.children;
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i].children
      , date   = that.getDateTimeObject(entry[0].children[1].options[entry[0].children[1].selectedIndex].value + "/" + entry[0].children[0].options[entry[0].children[0].selectedIndex].value)
      , height = entry[1].children[0].value
      , weight = entry[2].children[0].value
      , bmi = that.calculateBMI(height, weight);

      if (date && height && weight && bmi) {
        var point = {};
        point.index = i;
        point.date = date;
        point.height = height;
        point.weight = weight;
        point.bmi = bmi;
        point.age = that.computeAge(that.birthDate, date);
        point.percentile = percentileHelper.calculate(isMale, point.age, point.bmi);
        that.dataPoints.push(point);
      }
    }

    if (point) {
      that.updateHorizontalGraph(point);
      that.updateResultsString(point);
    }
    that.lineGraphDraw();
  };

  /**
   * calculateBMI(height, weight)
   *
   * Calculates a given BMI based off the current table unit setting
   */
  this.calculateBMI = function(height, weight) {
    if (tableUnits == 'inches') {
		// Calculate BMI for US units of measurement
      var ret = Math.round((weight * 703 * 10) / (height * height)) / 10;
      return ret;
    } else {
		// Calculate BMI for Metric measurements
			var ret = Math.round((weight / (height * height)) * 100000) / 10
      return ret;
    }
  };

  /**
   * buildResultsHTML(data_point)
   *
   * Build the HTML for insertion into the DOM upon calculating a BMI
   */
  this.buildResultsHTML = function(data_point) {
    var str = "Your BMI is <strong>";
    str = str + data_point.bmi.toPrecision(3) + ".</strong>";

    str = str + " That puts you <strong>";
    if (data_point.percentile < 5) {
      str = str + "below the 5th";
    } else if (data_point.percentile > 95) {
      str = str + "above the 95th";
    } else {
      str = str + "in the " + data_point.percentile;
    }

    str = str + " percentile</strong>, which indicates you are "

    var classification = percentileHelper.getBMIClassification(data_point.percentile);

    if (classification == "U") {
      var status = "underweight";
    } else if ( classification == "N") {
      var status = "at a healthy weight";
    } else if (classification == "R") {
      var status = "overweight";
    } else if (classification == "O") {
      var status = "obese";
    } else {
      var status = "";
    }


    str = str + "<strong>" + status + ".</strong>";
    str = str + " The healthy weight range for your height and age is ";

    var wRange = this.calculateBMIWeightRange(data_point)
    , wRangeStr = wRange.lo_weight_range + " to " + wRange.hi_weight_range;

    if (tableUnits == "inches") {
      wRangeStr = wRangeStr + " lbs.";
    } else {
      wRangeStr = wRangeStr + " kgs.";
    }

    str = str + "<strong>" + wRangeStr + "</strong>";
    return str;
  };

  // Private variables for Results Text
  var resultsTextHolder = document.getElementById('kh-bmicalc-graph-bar-results');

  var resultsTextBMI = document.getElementById('kh-bmicalc-results-text-bmi')
  , resultsTextDateMonth = document.getElementById('kh-bmicalc-results-date-month')
  , resultsTextDateYear  = document.getElementById('kh-bmicalc-results-date-year')
  , resultsTextHolder = document.getElementById('kh-bmicalc-graph-bar-results')

  /**
   * updateResultsString(point)
   *
   * Takes a data point object and it updates the results text on the graph
   */
  this.updateResultsString = function(point) {
    var html = this.buildResultsHTML(point);
    resultsTextHolder.innerHTML = html;
  }

  // Private bar graph variables
  var currentBarMarkerPercent = 55
  , barMarker = document.getElementById('kh-bmicalc-graph-bar-marker')
  , barMarkerTextPercent = document.getElementById('kh-bmicalc-graph-bar-text-percent')
  , barMarkerTextStatus = document.getElementById('kh-bmicalc-graph-bar-text-status')
  , barMarkerContainer = document.getElementById('kh-bmicalc-graph-bar-container')
  , barMarkerContainerEmpty = document.getElementById('kh-bmicalc-graph-bar-container-empty')
  , barImage = document.getElementById('kh-bmicalc-graph-top')

  /**
   * updateHorizontalGraph(point)
   *
   * Takes a data point from this.dataPoints and updates the horizontal scale.
   */
  this.updateHorizontalGraph = function(point) {

    barMarker.setAttribute('class', '');

		var tempMonth = parseInt(point.date.getMonth() + 1);

		if(tempMonth < 10) {
			tempMonth = "0" + tempMonth;
		}

    resultsTextDateMonth.innerHTML = tempMonth;
    resultsTextDateYear.innerHTML = point.date.getFullYear();

    var classification = percentileHelper.getBMIClassification(point.percentile)
    , percNum = percentileHelper.calculate(isMale, point.age, point.bmi);

    if(classification == "U") {
      var status = "underweight";
    } else if( classification == "N") {
      var status = "healthy weight";
    } else if(classification == "R") {
      var status = "overweight";
    } else if(classification == "O") {
      var status = "obese";
    } else {
      var status = "";
    }

		// If the percentage is above the 95th percentile, just show "> 95%"
		if(percNum > 95) {
			percNum = 95;
			barMarkerTextPercent.innerHTML = "> 95 %";
		// If the percentage is below the 5th percentile, just show "< 5%"
		} else if(percNum < 5) {
			percNum = 5;
			barMarkerTextPercent.innerHTML = "< 5 %";
		// Otherwise display the percentage as calculated
		} else {
			barMarkerTextPercent.innerHTML = percNum + "%";
		}

    barMarkerTextStatus.innerHTML = "(" + status + ")";

    this.barGraphPositionMarker(percNum);

    if(percNum == -1) {
      barMarker.setAttribute('class', 'kh-bmicalc-hide');
		}
  }

  /**
   * barGraphPositionMarker(percent)
   *
   * Takes in a percent and postion the marker on the bar graph accordingly
   */
  this.barGraphPositionMarker = function(percent) {
    if (percent >= 0 && percent <= 100) {
      currentBarMarkerPercent = percent; // Update the percent so we can keep track on resize
      barMarker.style.left = ((barImage.offsetWidth*percent)/100)-(barMarker.offsetWidth/2) + "px";
    }
  };

  // Private line graph variables
  var lineGraphContainer = document.getElementById('kh-bmicalc-graph-line-container')
  , lineGraphMale = document.getElementById('kh-bmicalc-graph-line-male')
  , lineGraphFemale = document.getElementById('kh-bmicalc-graph-line-female')
  , lineGraphEmpty = document.getElementById('kh-bmicalc-graph-line-empty')
  , lineGraphPoints = document.getElementById('kh-bmicalc-graph-points')
  , lineGraphDefaultPoint = document.getElementById('kh-bmicalc-graph-point-default')
  , lgGraphPointDefault = 29
  , lgImgH = 634
  , lgImgW = 600
  , lgScaleX = 18
  , lgScaleY = 21
  , lgImgStartX = 6   // Xpx the graph starts at
  , lgImgEndX = 540 // Xpx the graph ends at
  , lgImgStartY = 7   // Ypx the graph starts at
  , lgImgEndY = 580 // Ypx the graph ends at
  , lgXMin = 2
  , lgXMax = 20
  , lgYMin = 11
  , lgYMax = 32
  , lgCurStartX = 6
  , lgCurEndX = 540
  , lgCurStartY = 7
  , lgCurEndY = 584
  , lgCurWidth = (lgCurEndX - lgCurStartX)
  , lgCurHeight = (lgCurEndY - lgCurStartY)
  , lgCurXInc = lgCurWidth/lgScaleX
  , lgCurYInc = lgCurHeight/lgScaleY
  , lgCurPointWidth = lgGraphPointDefault;

  /**
   * computeCurrentScale()
   *
   * computes the boundaries of the line graph
   */
  this.computeCurrentScale = function() {
    var containerW = lineGraphContainer.offsetWidth
    , containerH = lineGraphContainer.offsetHeight;
    lgCurStartX = (lgImgStartX * containerW) / lgImgW;
    lgCurStartY = (lgImgStartY * containerH) / lgImgH;
    lgCurEndX = (lgImgEndX * containerW) / lgImgW;
    lgCurEndY = (lgImgEndY * containerH) / lgImgH;
    lgCurWidth = (lgCurEndX - lgCurStartX);
    lgCurHeight = (lgCurEndY - lgCurStartY);
    lgCurXInc = lgCurWidth / lgScaleX;
    lgCurYInc = lgCurHeight / lgScaleY;
    lgCurPointWidth = Math.round(lgGraphPointDefault * lgCurWidth / lgImgW);
    var points = document.querySelectorAll('.graph-point');
    for(var i = 0; i < points.length; i++) {
      points[i].style.width = lgCurPointWidth + "px";
      points[i].style.height = lgCurPointWidth + "px";
      points[i].children[0].style.width = lgCurPointWidth + "px";
      points[i].children[0].style.height = lgCurPointWidth + "px";
    }
  }

  var graphResultsVisible = true
  , graphResultsContainer = document.getElementById('kh-bmicalc-graphs-container');

  /**
   * showGraphResults()
   *
   * Show the results on the graph
   */
  this.showGraphResults = function() {
    barMarkerContainer.style.display = "block";
    barMarkerContainerEmpty.style.display = "none";
    graphResultsContainer.style.display = "block";
    //helper.log("Graph", g= graphResultsContainer)
  };

  /**
   * hideGraphresults()
   *
   * Hides the graph results
   */
  this.hideGraphResults = function() {
    graphResultsContainer.style.display = "none";
  };

  if (!alwaysShowGraphs)
    this.hideGraphResults();

  /**
   * lineGraphClear()
   *
   * Clears all points and lines from the graph
   */
  this.lineGraphClear = function() {
    while (lineGraphPoints.firstChild) {
      lineGraphPoints.removeChild(lineGraphPoints.firstChild);
    }
  };

  /**
   * lineGraphComputeXScale()
   *
   * Computes Left/X position of LineGraph x coordinates
   */
  this.lineGraphComputeXScale = function(x) {
    return Math.round((x * lgCurXInc) - (lgXMin * lgCurXInc) - 3); // -3 for left margin plus border?
  };

  /**
   * lineGraphComputeYScale
   *
   * Computes Top/Y position of LineGraph y coords
   */
  this.lineGraphComputeYScale = function(y) {
    var op = (y * lgCurYInc) - (lgYMin * lgCurYInc);
    return Math.round((-op) + lgCurHeight - 2); // -2 for top margin plus border?
  };

  // Adds a point to the graph
  /**
   * lineGraphAddPoint
   *
   * adds a point to the line graph
   */
  this.lineGraphAddPoint = function(data_point) {
    data_point.true_age = data_point.age
    data_point.true_bmi = data_point.bmi

    if (data_point.age > lgXMax)
      data_point.age = lgXMax;

    if (data_point.age < lgXMin)
      data_point.age = lgXMin;

    if (data_point.bmi > lgYMax)
      data_point.bmi = lgYMax;

    if (data_point.bmi < lgYMin)
      data_point.bmi = lgYMin;

    var pointX = this.lineGraphComputeXScale(data_point.age)
    , pointY = this.lineGraphComputeYScale(data_point.bmi)
    , point = lineGraphDefaultPoint.cloneNode(true);

    point.id = "graph-point-" + data_point.index;
    point.style.display = "block";
    point.style.left = pointX + 'px';
    point.style.top = pointY + 'px';

		helper.addEvent('mouseenter', point, function(e) {
			var idx = parseInt(e.target.id.substr(12, e.target.id.length),10)
			that.updateHorizontalGraph(that.dataPoints[idx]);
			that.updateResultsString(that.dataPoints[idx]);
		});

    //helper.log("Added Point #" + point.id + " BMI: " + data_point.bmi + " AGE: " + data_point.age);
    lineGraphPoints.appendChild(point);
    o = new Opentip("#" + point.id, "BMI: " + data_point.true_bmi.toPrecision(3), "", {tipJoint: "left", style:"glass"});
    return { data: data_point, point: point };
  };

  /**
   * lineGraphDraw()
   *
   * Draw the line graph
   */
  this.lineGraphDraw = function() {
    if (showGraphs) {
      lineGraphEmpty.style.display = "none";
      lgM = lineGraphMale;
      if (isMale) {
        lineGraphMale.style.display = "block";
        lineGraphFemale.style.display = "none";
        //lineGraphMale.children[0].style.width = lineGraphMale.children[0].clientWidth + "px";
      } else {
        lineGraphMale.style.display = "none";
        lineGraphFemale.style.display = "block";
        //lineGraphFemale.children[0].style.width = lineGraphFemale.children[0].clientWidth + "px";
      }
    } else {
      lineGraphMale.style.display = "none";
      lineGraphFemale.style.display = "none";
      lineGraphEmpty.style.display = "block";
    }

    this.lineGraphClear();
    this.computeCurrentScale();

    var localPoints = [];
    for(var i = 0; i < this.dataPoints.length; i++) {
      var added_point = this.lineGraphAddPoint(this.dataPoints[i]);
      if(added_point) {
        //helper.log("Added a point!", added_point);
        localPoints.push(added_point);
      }
    }

		// Grab Internet Explorer version if using IE for use in the below function
		var rv = -1;
		var ua = navigator.userAgent;
		var re  = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");

		if(re.exec(ua) != null) {
			rv = parseFloat(RegExp.$1);
		}

		// If the user is using a non-IE browser or if IE is 9 or above, display the line
    if(!helper.isIE() || rv >= 9) {
      for(var i = 0; i < localPoints.length; i++) {
        if(i != 0) {
          that.lineGraphConnect(localPoints[i-1].point, localPoints[i].point);
        }
      }
    }
  };

  /**
   * lineGraphConnect(p1, p2)
   *
   * Connects one element from another on the dom
   */
  this.lineGraphConnect = function(p1, p2) {
    var thickness = 2
    , off1 = that.lgGetOffset(p1)
    , off2 = that.lgGetOffset(p2);
    // bottom right
    var x1 = off1.left + off1.width
    , y1 = off1.top + off1.height / 2;
    // top right
    var x2 = off2.left + off2.width
    , y2 = off2.top + off2.height / 2;
    // distance
    var length = Math.sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));
    // center
    var cx = (((x1 + x2) / 2) - (length / 2) - (off1.width - 14) / 3)
    , cy = (((y1 + y2) / 2) - (thickness / 2) - (off1.width - 14) / 3);
    // angle
    var angle = Math.atan2((y1 - y2), (x1 - x2)) * (180 / Math.PI);
    // make hr

    cy = cy + (lgCurPointWidth / 2);
    cx = cx + (lgCurPointWidth / 12);
    var newEl = document.createElement('div');
    newEl.innerHTML= "<div class=\"kh-graph-point-line\" style=\"padding:0px; margin:0px; border-top: 1px solid  #333; border-bottom: 1px solid  #333; line-height:1px; position:absolute; left:" + cx + "px; top:" + cy + "px; width:" + length + "px; -moz-transform:rotate(" + angle + "deg); -webkit-transform:rotate(" + angle + "deg); -o-transform:rotate(" + angle + "deg); -ms-transform:rotate(" + angle + "deg); transform:rotate(" + angle + "deg);\" />";
    //
    newEl.style.position = "relative";
    newEl.style['z-index'] = "400";
    lineGraphPoints.appendChild(newEl);
  }

  /**
   * lgGetOffset(el)
   *
   * Returns helper object for offset coordinates when drawing lines
   */
  this.lgGetOffset = function( el ) {
    return { top: (el.offsetTop - (lgCurPointWidth / 2)), left: (el.offsetLeft - (lgCurPointWidth / 2)), width: el.offsetWidth, height: el.offsetHeight }
  };

  // If debugging is enabled draw the testGraphCoverage square
  if (helper.debugAll) {
    this.testGraphCoverage();
  }

  // Graph User Interface Functions
  this.drawGraphs = function() {
    if (showGraphs) {
      this.barGraphPositionMarker(currentBarMarkerPercent);
      this.lineGraphDraw();
    }
  }

  // Select boxes for date of birth, entry height, and toggle sex
  that.selectBirthMonth = document.getElementById('kh-bmicalc-dob-month');
  that.selectBirthYear  = document.getElementById('kh-bmicalc-dob-year');
  that.selectBoxUnitIn  = document.getElementById('kh-bmicalc-select-unit-in');
  that.selectBoxUnitCm  = document.getElementById('kh-bmicalc-select-unit-cm');
  that.radioSexMale     = document.getElementById('kh-bmicalc-radio-sex-male');
  that.radioSexFemale   = document.getElementById('kh-bmicalc-radio-sex-female');

  // Sets the minimum birth year to be 2 years from the user's birth date
  //that.selectBirthYear.onchange = function(event) {
//    var yr = this.value;
//    if (yr != "--") {
//      var yrInt = parseInt(yr, 10);
//      var opts = that.tableEntryDefault.children[0].children[1].options;
//
//      for(var i = 0; i < (opts.length-1); i++) {
//        opts[(i+1)].value = yrInt+(i+2);
//        opts[(i+1)].text  = yrInt+(i+2);
//      }
//
//      that.tableToggleUnits(tableUnits);
//    }
//  };


  /**
   * genderToggled(event)
   *
   * Called when gender radio buttons are toggled
   */
  function genderToggled(event) {
    that.showGraphResults();
    showGraphs = true;
    isMale = false;
    if(event.currentTarget.id == "kh-bmicalc-radio-sex-male") isMale = true;

		// Recalculate the results based on the new gender toggled
		that.calculateTableBMI();
		that.showGraphResults();
  };

  helper.addEvent('click', that.radioSexMale, genderToggled);
  helper.addEvent('click', that.radioSexFemale, genderToggled);

  // Data Table Buttons and Cells
  that.btnAddEntry          = document.getElementById('kh-bmicalc-btn-add-entry');
  that.btnResetData         = document.getElementById('kh-bmicalc-btn-reset-data');
  that.btnResetAllData      = document.getElementById('kh-bmicalc-btn-reset-all');
  that.tableBody            = document.getElementById('kh-bmicalc-table-data');
  that.tableCellHeight      = document.getElementById('kh-bmicalc-table-cell-height');
  that.tableEntryFirst      = document.getElementById('kh-bmicalc-table-data-0');
  that.tableToggleStandard  = document.getElementById('kh-bmicalc-table-toggle-in');
  that.tableToggleMetric    = document.getElementById('kh-bmicalc-table-toggle-cm');
  that.tableEntryDefault    = that.tableEntryFirst.cloneNode(true);
  that.tableEntryDefault.id = 'kh-bmicalc-table-data-';
  that.tableEntryTotal      = 0;

  /**
   * tableToggleUnits(tableUnits)
   *
   * Sets the table unit defaults
   */
  this.tableToggleUnits(tableUnits);
  var tableUnitsToggled = function(event) {
    that.tableToggleUnits(event.target.value);

		that.resetAllData();
  };

  /*
   * Reset All Data
   *
   * Resets all the data on the table.
   */
  this.resetAllData = function(event) {
    that.tableResetEntries();
    showGraphs = false;
    that.lineGraphDraw();
    document.getElementById('kh-bmicalc-step-one-form').reset()
    calculatedLookBelow.style.display = "none";
    barMarkerContainer.style.display = "none";
    barMarkerContainerEmpty.style.display = "block";
		document.getElementById("kh-bmicalc-results-date-month").innerHTML = "--";
		document.getElementById("kh-bmicalc-results-date-year").innerHTML = "----";
		document.getElementById("kh-bmicalc-bar-arrow").style.display = "none";
		document.getElementById("kh-bmicalc-results-description").style.display = "block";
		document.getElementById("kh-bmicalc-printer").style.display = "none";
    that.lineGraphClear();
    resultsTextHolder.innerHTML = "";
  };

  helper.addEvent('click', this.tableToggleStandard, tableUnitsToggled);
  helper.addEvent('click', this.tableToggleMetric, tableUnitsToggled);
  helper.addEvent('click', this.btnAddEntry, this.tableAddEntry);
  helper.addEvent('click', this.btnResetData, this.tableResetEntries);
  helper.addEvent('click', this.btnResetAllData, this.resetAllData);


  /**
   * getCurrentBirthDateString()
   *
   * Returns the current birth date in string format: "MM/YYYY"
   */
  this.getCurrentBirthDateString = function() {
    return that.selectBirthYear.value + "/" + that.selectBirthMonth.value;
  };

  /**
   * getCurrentBirthDate()
   *
   * Returns a date time object of the current birth date
   */
  this.getCurrentBirthDate = function() {
    return that.getDateTimeObject(that.getCurrentBirthDateString());
  };


  // Event function and listener for when the Calculate BMI button is called.
  this.calculateBmiButton = document.getElementById('kh-bmicalc-btn-calculate');


  /**
   * calculateBmiClicked(event)
   *
   * Calculates the BMI
   */
  this.calculateBmiClicked = function(event) {
    var errorMessages = that.getErrorMessages();
    if (errorMessages.hasErrors) {
      var errorHtml = "";
      for (var i = 0; i < errorMessages.errors.length; i++) {
        errorHtml = errorHtml + "<li>" + errorMessages.errors[i] + "</li>";
      }

      errorHtml = "<h3>Errors</h3><ul>"+errorHtml+"</ul>";

      Modal.open({ content: errorHtml });
    } else {
      that.birthDate = that.getCurrentBirthDate();
      that.calculateTableBMI();
      that.showGraphResults();
      calculatedLookBelow.style.display="block";
			document.getElementById('kh-bmicalc-bar-arrow').style.display = "block";
			document.getElementById("kh-bmicalc-results-description").style.display = "none";

			// If the user is not on a mobile device, display print option
			if(!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
				document.getElementById("kh-bmicalc-printer").style.display = "block";
			}

      showGraphs = true;
      window.onresize();
    }
  };

  helper.addEvent('click', that.calculateBmiButton, that.calculateBmiClicked);

  /**
   * getErrorMessages()
   *
   * Returns an object with a hasErrors bool and error array, called before bmi calculation
   */
  this.getErrorMessages = function() {
    var results = {
      hasErrors: false,
      errors: []
    };

    if((!this.radioSexMale.checked && !this.radioSexFemale.checked) || isNaN(this.selectBirthMonth.value) || isNaN(this.selectBirthYear.value)) {
      results.hasErrors = true;
      results.errors.push("Please provide your gender, birth month, and birth year.<br />(See Step 1)");
    }

    var entries = this.tableBody.children;
    for(var i = 0; i < entries.length; i++) {
      ee = entries[i];
      var weight = entries[i].children[2].children[0].value
      , entry_mo = entries[i].children[0].children[0].options[entries[i].children[0].children[0].selectedIndex].value
      , entry_yr = entries[i].children[0].children[1].options[entries[i].children[0].children[1].selectedIndex].value
      , entryStr = entry_mo + " " + entry_yr + "."
			, height = entries[i].children[1].children[0].value;

      // Calculate the age for age validation
      var date = this.getDateTimeObject(entry_yr + "/" + entry_mo)
      , age = this.computeAge(this.getCurrentBirthDate(), date);

			// Check to see if all the data has been entered and is valid
      if((age < 2 || age > 20) || isNaN(entry_mo) || isNaN(entry_yr) || (isNaN(weight) || weight == "") || (isNaN(height) || height == "")) {
        results.hasErrors = true;
        results.errors.push("It appears one or more entries contain errors or are missing information.<br /><br />NOTE: This calculator is for children and teens, ages 2 to 20 years.");
        //results.errors.push("Entry #" + (i+1) + " is not within the proper age range for this calculator.");
      }
    }

    return results;
  };

  var printContainer = document.getElementById('kh-bmicalc-print')

  /**
   * buildSinglePrintResult(point)
   *
   * Builds the HTML for insertion into the DOM for a single point on the graph
   */
  this.buildSinglePrintResult = function(point) {
    var date = point.date.getStringMonth() + " " + point.date.getFullYear();
    var height, weight;

    if(tableUnits == "inches") {
      height = point.height + " inches";
      weight = point.weight + " lbs";
    } else {
      height = point.height + " cm";
      weight = point.weight + " kgs"
    }

    var sentence = this.buildResultsHTML(point);

    var html = "<div class=\"kh-bmicalc-print-box kh-bmicalc-print-measurement\"><div class=\"kh-bmicalc-print-third\"><label class=\"kh-bmicalc-print-label\">Date of Measure:</label><div class=\"kh-bmicalc-print-value\">" + date + "</div></div><div class=\"kh-bmicalc-print-quarter\"><label class=\"kh-bmicalc-print-label\">Age:</label><div class=\"kh-bmicalc-print-value\">" + Math.floor(point.age) + " years </div></div><div class=\"kh-bmicalc-print-quarter\"><label class=\"kh-bmicalc-print-label\">Height:</label><div class=\"kh-bmicalc-print-value\">" + height + "</div></div><div class=\"kh-bmicalc-print-quarter\"><label class=\"kh-bmicalc-print-label\">Weight:</label><div class=\"kh-bmicalc-print-value\">" + weight + "</div></div><div class=\"kh-bmicalc-print-results\"><label class=\"kh-bmicalc-print-label\">Results:</label><div class=\"kh-bmicalc-print-value\">" + sentence + "</div></div></div>"

    return html;
  }

	/**
	 * printResults()
	 *
	 * Prints the results
	 */
	this.printResults = function() {
		var gender;
    isMale ? gender = "Male" : gender = "Female";

    var birthdate = that.selectBirthMonth.value + "/" + that.selectBirthYear.value;
    var recorded = "";

		recorded += kh_current_month + "/" + kh_current_year;

		var bmiDescription = "<div id=\"kh-bmicalc-print-description\"><p>The chart shows BMI results for the measurements you entered at different ages.  This allows you to see trends in your weight.</p> <p>BMI charts use percentiles to help look at their BMI compared with a very large group of people the same age and gender.  For example, if a person has a BMI in the 60th percentile, 59% of people the same age and gender have a lower BMI.</p><p>Kids and teens can grow quickly.  If your measurements aren't recent or accurate, this BMI information may not be correct for you now.</p><p>When it comes to weight problems in kids and teens, BMI numbers are just part of the story.  Only a medical expert can say for sure if a kid or teen has a weight problem.  To put BMI numbers in perspective, discuss your results with a doctor, nurse, or other medical expert.</p></div>";

		var popup_window =  window.open("", "", "width=670,height=400,toolbar=no,location=no,resizable=yes");
		var temp_html = "<html><head>";
		temp_html += "<link rel=\"stylesheet\" href=\"//familysurvey.org/misc/javascript/js_apps/bmi-calculator/print.css\" type=\"text/css\" />";
		temp_html += "<!--[if lte IE 9 ]>";
		temp_html += "<style type=\"text/css\">";
		temp_html += ".kh-graph-point-line {";
		temp_html += "display: none;";
		temp_html += "}";
		temp_html += "</style>";
		temp_html += "<![endif]-->";
		temp_html += "</head><body>";
		temp_html += "<div id=\"print-container\">";
		temp_html += printer_friendly_logo + "<h1 class=\"kh-bmicalc-print-header\">BMI Calculator</h1>";
		temp_html += "<div id=\"kh-bmicalc-print-text\"><div id=\"kh-bmicalc-print-description\">" + bmiDescription + "</div></div>";
		temp_html += "<div class=\"kh-bmicalc-responsive\" id=\"kh-bmicalc-graph-line-container\">" + document.getElementById("kh-bmicalc-graph-line-container").innerHTML + "</div><br class=\"kh-bmicalc-clear\" /><div class=\"kh-bmicalc-print-info-container\"><h3>User Information</h3><div class=\"kh-bmicalc-print-box\"><div class=\"kh-bmicalc-print-third\"><label class=\"kh-bmicalc-print-label\">Gender:</label><div class=\"kh-bmicalc-print-value\">"+ gender +"</div></div><div class=\"kh-bmicalc-print-third\"><label class=\"kh-bmicalc-print-label\">Birthdate:</label><div class=\"kh-bmicalc-print-value\">" + birthdate + "</div></div><div class=\"kh-bmicalc-print-third\"><label class=\"kh-bmicalc-print-label\">Recorded:</label><div class=\"kh-bmicalc-print-value\">" + recorded + "</div></div><br class=\"kh-bmicalc-clear\" /></div><div><h3>Measurement Information</h3>";

		for(var i = 0; i < this.dataPoints.length; i++) {
      temp_html += this.buildSinglePrintResult(this.dataPoints[i]);
    }

		temp_html += "<div class=\"kh-bmicalc-print-footer\">";

		if(uriLicID !== "undefined" && uriLicID !== "" && uriLicID == "1") {
			temp_html += "<div class=\"kh-bmicalc-print-footer-logo\">" + "<img src=\"http://familysurvey.org/misc/javascript/js_apps/bmi-calculator/kh-from-nemours.jpg\" />" + "</div>";
		} else {
			temp_html += "<div class=\"kh-bmicalc-print-footer-logo\">" + "<img src=\"http://familysurvey.org/misc/javascript/js_apps/bmi-calculator/kh-education-partner.jpg\" />" + "</div>";
		}

		temp_html += "<div class=\"kh-bmicalc-print-footer-text\">Note: All information is for educational purposes only. For specific medical advice, diagnoses, and treatment, consult your doctor. &copy; 1995-" + kh_current_year + " The Nemours Foundation/KidsHealth. All rights reserved.</div><br class=\"kh-bmicalc-clear\" /></div></div></div></div>";
		temp_html += "<script type=\"text/javascript\">var currentGraphWidth = " + lineGraphContainer.offsetWidth + "; var currentGraphHeight = " + lineGraphContainer.offsetHeight + ";</script>";
		temp_html += "<script src=\"//familysurvey.org/misc/javascript/js_apps/bmi-calculator/print.js\" type=\"text/javascript\"></script>";
		temp_html += "</body></html>";

		popup_window.document.write(temp_html);

		popup_window.onload = function() {
			popup_window.focus();
			popup_window.print();
			//popup_window.close();
		}

		popup_window.document.close();
	}

  // When the window gets resized, redraw the graphs
  window.onresize = function() {
    that.drawGraphs();
  };

};

// Listen for when the document is loaded
document.onreadystatechange = function(e) {
  if (document.readyState == "complete") {
    bc = new BMICalculator();
    window.bc = bc;
  }
};

// Added by Marc | 06/06/2014
// load stylesheet:
bmiCSS = "//familysurvey.org/misc/javascript/js_apps/bmi-calculator/style.css";
bmiPrintCSS = "//familysurvey.org/misc/javascript/js_apps/bmi-calculator/print.css";
function loadBMIcss(sourceStyle, sourceMedia) {
	var head = document.getElementsByTagName('head')[0],
	link = document.createElement('link');
	link.type = "text/css";
	link.rel = "stylesheet";
	link.href = sourceStyle;
	link.media = sourceMedia;
	head.appendChild(link);
	return link;
}

loadBMIcss(bmiCSS, 'screen');
//loadBMIcss(bmiPrintCSS, 'print');

// Date of Birth - Year Dropdown Select
var birth_year_select = "<select class=\"kh-bmicalc-select\" id=\"kh-bmicalc-dob-year\" name=\"year\" autocomplete=\"off\"><option value=\"--\" selected=\"selected\">----</option>";

for(var i = 18; i >= 0; i--) {
	birth_year_select += "<option value=\"" + ((kh_current_year - i) - 2) + "\">" + ((kh_current_year - i) - 2) + "</option>";
}

birth_year_select += "</select>";

// Date of Measurements - Year Dropdown Select
var entry_year_select = "<select class=\"kh-bmicalc-select\" name=\"year\"><option value=\"--\">----</option>";

for(var i = 18; i >= 0; i--) {
	entry_year_select += "<option value=\"" + (kh_current_year - i) + "\">" + (kh_current_year - i) + "</option>";
}

entry_year_select += "</select>";

theFullCalc = "<div class=\"kh-bmicalc-section\"><div class=\"kh-bmicalc-description\"><h3>The KidsHealth BMI Calculator</h3><p> This calculator is for children and teens between 2 and 20 years old. It allows you to figure out your body mass index (BMI) and see how your result compares to others of the same age and gender. The calculator also gives you the option of entering multiple sets of measurements so you can view BMI as a trend over time. A trend may suggest whether a person is losing or gaining weight at a health rate. </p></div><div class=\"kh-bmicalc-instructions\"><h4>Instructions for entering one set of measurements:</h4><ol><li>Select gender (male or female) and enter birth date (month/year).</li><li>Enter height, weight, and the date the measurements were taken.</li><li>Click \"Calculate BMI\" and then look at the charts below for the results.</li></ol><h4>Instructions for entering more than one set of measurements:</h4><ol><li>Select gender (male or female) and enter birth date (month/year).</li><li>Enter height, weight, and the date for each set of measurements and click the \"Add Entry\" button to create additional rows.</li><li>Click \"Calculate BMI\" and then look at the charts below for the results.</li></ol></div><div class=\"kh-bmicalc-tab-container\"><button class=\"kh-bmicalc-tab kh-bmicalc-tab-active\" id=\"kh-bmicalc-table-toggle-in\" name=\"data-unit\" onclick=\"toggleTab(this);\" value=\"inches\">US Standard (lb/in)</button><button class=\"kh-bmicalc-tab\" id=\"kh-bmicalc-table-toggle-cm\" name=\"data-unit\" onclick=\"toggleTab(this);\" value=\"centimeters\">Metric (kg/cm)</button></div><noscript>Please turn on your javascript otherwise this will not work.</noscript><div class=\"kh-bmicalc\"><div class=\"kh-bmicalc-step\"><form id=\"kh-bmicalc-step-one-form\"><div class=\"kh-bmicalc-step-label\">Step 1:</div><div class=\"kh-bmicalc-field kh-bmicalc-gender\"><label>Gender:</label><div class=\"contain\"><input id=\"kh-bmicalc-radio-sex-male\" name=\"sex\" type=\"radio\" value=\"male\" autocomplete=\"off\" /><label for=\"kh-bmicalc-radio-sex-male\">Male</label></div><div class=\"contain\"><input id=\"kh-bmicalc-radio-sex-female\" name=\"sex\" type=\"radio\" value=\"female\" autocomplete=\"off\" /><label for=\"kh-bmicalc-radio-sex-female\">Female</label></div></div><div class=\"kh-bmicalc-field kh-bmicalc-age\"><label>Birth Date:</label><br/><select class=\"kh-bmicalc-select\" id=\"kh-bmicalc-dob-month\" name=\"month\" autocomplete=\"off\"><option value=\"--\" selected=\"selected\">---</option><option value=\"01\">Jan</option><option value=\"02\">Feb</option><option value=\"03\">Mar</option><option value=\"04\">Apr</option><option value=\"05\">May</option><option value=\"06\">Jun</option><option value=\"07\">Jul</option><option value=\"08\">Aug</option><option value=\"09\">Sep</option><option value=\"10\">Oct</option><option value=\"11\">Nov</option><option value=\"12\">Dec</option></select>" + birth_year_select + "</div></form></div><div class=\"kh-bmicalc-step\"><div class=\"kh-bmicalc-step-label\">Step 2:</div><div class=\"kh-bmicalc-entry\"><button class=\"kh-bmicalc-button\" id=\"kh-bmicalc-btn-add-entry\">Add Entry</button><button class=\"kh-bmicalc-button\" id=\"kh-bmicalc-btn-reset-data\">Reset Data</button><br/><div class=\"kh-bmicalc-clear\"></div></div><div class=\"kh-bmicalc-entry-table-header\"><div class=\"kh-bmicalc-date-header\">Date of Measurements</div><div class=\"kh-bmicalc-height-header\">Height</div><div class=\"kh-bmicalc-weight-header\">Weight</div></div><div class=\"kh-bmicalc-entry-table\"><table><tbody id=\"kh-bmicalc-table-data\"><tr id=\"kh-bmicalc-table-data-0\"><td class=\"kh-bmicalc-forty\"><select class=\"kh-bmicalc-select\" name=\"month\"><option value=\"--\">---</option><option value=\"01\">Jan</option><option value=\"02\">Feb</option><option value=\"03\">Mar</option><option value=\"04\">Apr</option><option value=\"05\">May</option><option value=\"06\">Jun</option><option value=\"07\">Jul</option><option value=\"08\">Aug</option><option value=\"09\">Sep</option><option value=\"10\">Oct</option><option value=\"11\">Nov</option><option value=\"12\">Dec</option></select>" + entry_year_select + "</td><td class=\"kh-bmicalc-thirty\" id=\"kh-bmicalc-table-cell-height\"></td><td class=\"kh-bmicalc-thirty\" id=\"kh-bmicalc-table-cell-weight\"><input type=\"text\"/>&nbsp;<span class=\"table-cell-weight\">lbs</span></td></tr></tbody></table></div></div><div class=\"kh-bmicalc-step\"><div class=\"kh-bmicalc-step-label\">Step 3:</div><div class=\"kh-bmicalc-center\"><span id=\"kh-bmicalc-look-below\"> BMI calculated - see results below </span><br/><button class=\"kh-bmicalc-button\" id=\"kh-bmicalc-btn-calculate\"> Calculate BMI </button><button class=\"kh-bmicalc-button\" id=\"kh-bmicalc-btn-reset-all\"> Reset All </button></div></div></div><div class=\"kh-bmicalc-results\"><h3>Results</h3><div id=\"kh-bmicalc-results-description\"><p> Please fill out the form above to find out whether your weight is in a healthy range. After clicking the \"Calculate BMI\" button, return here for your results. </p></div><a id=\"kh-bmicalc-printer\" href=\"javascript:bc.printResults()\"><img src=\"http://familysurvey.org/misc/javascript/js_apps/bmi-calculator/print.png\" class=\"kh-bmicalc-printer-icon\"/><span class=\"kh-bmicalc-printer-text\" href=\"javascript:bc.printResults()\">print results</span></a><div class=\"graph-point\" id=\"kh-bmicalc-graph-point-default\" style=\"display: none;\"><img src=\"http://familysurvey.org/misc/javascript/js_apps/bmi-calculator/point.png\" /></div><div class=\"graphs\" id=\"kh-bmicalc-graphs-container\"><div id=\"kh-bmicalc-graph-bar-results\"></div><p class=\"kh-bmicalc-moreinfo\"> For more information on BMI, <a id=\"kh-bmicalc-modal\">click here.</a></p><div id=\"kh-bmicalc-graph-bar-container-empty\"><img alt=\"Horizontal bar graph for BMI Percentile\" class=\"kh-bmicalc-responsive\" id=\"kh-bmicalc-graph-top-empty\" src=\"http://familysurvey.org/misc/javascript/js_apps/bmi-calculator/bar-empty.jpg\"/></div><div id=\"kh-bmicalc-graph-bar-container\" style=\"display: none;\"><div id=\"kh-bmicalc-graph-bar-marker\"><div class=\"graph-bar-bubble\" id=\"kh-bmicalc-graph-bar-text-percent\"></div><div class=\"graph-bar-bubble\" id=\"kh-bmicalc-graph-bar-text-status\"></div><img src=\"http://familysurvey.org/misc/javascript/js_apps/bmi-calculator/bar-arrow.png\" id=\"kh-bmicalc-bar-arrow\"/></div><img alt=\"Horizontal bar graph for BMI Percentile\" class=\"kh-bmicalc-responsive\" id=\"kh-bmicalc-graph-top\" src=\"http://familysurvey.org/misc/javascript/js_apps/bmi-calculator/bar-color.jpg\"/></div><div id=\"kh-bmicalc-graph-bar-container-results\"><p id=\"kh-bmicalc-results-date\"> (Based on measurement recorded: <span id=\"kh-bmicalc-results-date-month\">--</span> / <span id=\"kh-bmicalc-results-date-year\">----</span> ) </p><p id=\"kh-bmicalc-results-text\"></p></div>" + printer_friendly_logo + "<h1 class=\"kh-bmicalc-print-header\">BMI Calculator</h1><div class=\"kh-bmicalc-responsive\" id=\"kh-bmicalc-graph-line-container\"><div id=\"kh-bmicalc-graph-points\"></div><div class=\"kh-bmicalc-responsive\" id=\"kh-bmicalc-graph-line-male\" style=\"display:none\"><img alt=\"BMI Bar Graph for Males\" class=\"kh-bmicalc-responsive\" id=\"kh-bmicalc-graph-male-img\" src=\"http://familysurvey.org/misc/javascript/js_apps/bmi-calculator/graph-male.jpg\"/></div><div class=\"kh-bmicalc-responsive\" id=\"kh-bmicalc-graph-line-female\" style=\"display:none\"><img alt=\"BMI Bar Graph for Females\" class=\"kh-bmicalc-responsive\" id=\"kh-bmicalc-graph-female-img\" src=\"http://familysurvey.org/misc/javascript/js_apps/bmi-calculator/graph-female.jpg\"/></div><div class=\"kh-bmicalc-responsive\" id=\"kh-bmicalc-graph-line-empty\"><img alt=\"BMI Bar Graph\" class=\"kh-bmicalc-responsive\" id=\"kh-bmicalc-graph-empty-img\" src=\"http://familysurvey.org/misc/javascript/js_apps/bmi-calculator/graph-empty.jpg\" /></div></div></div></div><div class=\"select-containers\" style=\"display:none;\"><select class=\"kh-bmicalc-select\" id=\"kh-bmicalc-select-unit-in\" name=\"height\"><option value=\"--\">-- ft -- in (--in)</option><option value=\"24\">2 ft 0 in (24in)</option><option value=\"25\">2 ft 1 in (25in)</option><option value=\"26\">2 ft 2 in (26in)</option><option value=\"27\">2 ft 3 in (27in)</option><option value=\"28\">2 ft 4 in (28in)</option><option value=\"29\">2 ft 5 in (29in)</option><option value=\"30\">2 ft 6 in (30in)</option><option value=\"31\">2 ft 7 in (31in)</option><option value=\"32\">2 ft 8 in (32in)</option><option value=\"33\">2 ft 9 in (33in)</option><option value=\"34\">2 ft 10 in (34in)</option><option value=\"35\">2 ft 11 in (35in)</option><option value=\"36\">3 ft 0 in (36in)</option><option value=\"37\">3 ft 1 in (37in)</option><option value=\"38\">3 ft 2 in (38in)</option><option value=\"39\">3 ft 3 in (39in)</option><option value=\"40\">3 ft 4 in (40in)</option><option value=\"41\">3 ft 5 in (41in)</option><option value=\"42\">3 ft 6 in (42in)</option><option value=\"43\">3 ft 7 in (43in)</option><option value=\"44\">3 ft 8 in (44in)</option><option value=\"45\">3 ft 9 in (45in)</option><option value=\"46\">3 ft 10 in (46in)</option><option value=\"47\">3 ft 11 in (47in)</option><option value=\"48\">4 ft 0 in (48in)</option><option value=\"49\">4 ft 1 in (49in)</option><option value=\"50\">4 ft 2 in (50in)</option><option value=\"51\">4 ft 3 in (51in)</option><option value=\"52\">4 ft 4 in (52in)</option><option value=\"53\">4 ft 5 in (53in)</option><option value=\"54\">4 ft 6 in (54in)</option><option value=\"55\">4 ft 7 in (55in)</option><option value=\"56\">4 ft 8 in (56in)</option><option value=\"57\">4 ft 9 in (57in)</option><option value=\"58\">4 ft 10 in (58in)</option><option value=\"59\">4 ft 11 in (59in)</option><option value=\"60\">5 ft 0 in (60in)</option><option value=\"61\">5 ft 1 in (61in)</option><option value=\"62\">5 ft 2 in (62in)</option><option value=\"63\">5 ft 3 in (63in)</option><option value=\"64\">5 ft 4 in (64in)</option><option value=\"65\">5 ft 5 in (65in)</option><option value=\"66\">5 ft 6 in (66in)</option><option value=\"67\">5 ft 7 in (67in)</option><option value=\"68\">5 ft 8 in (68in)</option><option value=\"69\">5 ft 9 in (69in)</option><option value=\"70\">5 ft 10 in (70in)</option><option value=\"71\">5 ft 11 in (71in)</option><option value=\"72\">6 ft 0 in (72in)</option><option value=\"73\">6 ft 1 in (73in)</option><option value=\"74\">6 ft 2 in (74in)</option><option value=\"75\">6 ft 3 in (75in)</option><option value=\"76\">6 ft 4 in (76in)</option><option value=\"77\">6 ft 5 in (77in)</option><option value=\"78\">6 ft 6 in (78in)</option><option value=\"79\">6 ft 7 in (79in)</option><option value=\"80\">6 ft 8 in (80in)</option><option value=\"81\">6 ft 9 in (81in)</option><option value=\"82\">6 ft 10 in (82in)</option><option value=\"83\">6 ft 11 in (83in)</option><option value=\"84\">7 ft 0 in (84in)</option></select><select class=\"kh-bmicalc-select\" id=\"kh-bmicalc-select-unit-cm\" name=\"height\"><option value=\"--\">-- cm</option><option value=\"61\">61 cm</option><option value=\"62\">62 cm</option><option value=\"63\">63 cm</option><option value=\"64\">64 cm</option><option value=\"65\">65 cm</option><option value=\"66\">66 cm</option><option value=\"67\">67 cm</option><option value=\"68\">68 cm</option><option value=\"69\">69 cm</option><option value=\"70\">70 cm</option><option value=\"71\">71 cm</option><option value=\"72\">72 cm</option><option value=\"73\">73 cm</option><option value=\"74\">74 cm</option><option value=\"75\">75 cm</option><option value=\"76\">76 cm</option><option value=\"77\">77 cm</option><option value=\"78\">78 cm</option><option value=\"79\">79 cm</option><option value=\"80\">80 cm</option><option value=\"81\">81 cm</option><option value=\"82\">82 cm</option><option value=\"83\">83 cm</option><option value=\"84\">84 cm</option><option value=\"85\">85 cm</option><option value=\"86\">86 cm</option><option value=\"87\">87 cm</option><option value=\"88\">88 cm</option><option value=\"89\">89 cm</option><option value=\"90\">90 cm</option><option value=\"91\">91 cm</option><option value=\"92\">92 cm</option><option value=\"93\">93 cm</option><option value=\"94\">94 cm</option><option value=\"95\">95 cm</option><option value=\"96\">96 cm</option><option value=\"97\">97 cm</option><option value=\"98\">98 cm</option><option value=\"99\">99 cm</option><option value=\"100\">100 cm</option><option value=\"101\">101 cm</option><option value=\"102\">102 cm</option><option value=\"103\">103 cm</option><option value=\"104\">104 cm</option><option value=\"105\">105 cm</option><option value=\"106\">106 cm</option><option value=\"107\">107 cm</option><option value=\"108\">108 cm</option><option value=\"109\">109 cm</option><option value=\"110\">110 cm</option><option value=\"111\">111 cm</option><option value=\"112\">112 cm</option><option value=\"113\">113 cm</option><option value=\"114\">114 cm</option><option value=\"115\">115 cm</option><option value=\"116\">116 cm</option><option value=\"117\">117 cm</option><option value=\"118\">118 cm</option><option value=\"119\">119 cm</option><option value=\"120\">120 cm</option><option value=\"121\">121 cm</option><option value=\"122\">122 cm</option><option value=\"123\">123 cm</option><option value=\"124\">124 cm</option><option value=\"125\">125 cm</option><option value=\"126\">126 cm</option><option value=\"127\">127 cm</option><option value=\"128\">128 cm</option><option value=\"129\">129 cm</option><option value=\"130\">130 cm</option><option value=\"131\">131 cm</option><option value=\"132\">132 cm</option><option value=\"133\">133 cm</option><option value=\"134\">134 cm</option><option value=\"135\">135 cm</option><option value=\"136\">136 cm</option><option value=\"137\">137 cm</option><option value=\"138\">138 cm</option><option value=\"139\">139 cm</option><option value=\"140\">140 cm</option><option value=\"141\">141 cm</option><option value=\"142\">142 cm</option><option value=\"143\">143 cm</option><option value=\"144\">144 cm</option><option value=\"145\">145 cm</option><option value=\"146\">146 cm</option><option value=\"147\">147 cm</option><option value=\"148\">148 cm</option><option value=\"149\">149 cm</option><option value=\"150\">150 cm</option><option value=\"151\">151 cm</option><option value=\"152\">152 cm</option><option value=\"153\">153 cm</option><option value=\"154\">154 cm</option><option value=\"155\">155 cm</option><option value=\"156\">156 cm</option><option value=\"157\">157 cm</option><option value=\"158\">158 cm</option><option value=\"159\">159 cm</option><option value=\"160\">160 cm</option><option value=\"161\">161 cm</option><option value=\"162\">162 cm</option><option value=\"163\">163 cm</option><option value=\"164\">164 cm</option><option value=\"165\">165 cm</option><option value=\"166\">166 cm</option><option value=\"167\">167 cm</option><option value=\"168\">168 cm</option><option value=\"169\">169 cm</option><option value=\"170\">170 cm</option><option value=\"171\">171 cm</option><option value=\"172\">172 cm</option><option value=\"173\">173 cm</option><option value=\"174\">174 cm</option><option value=\"175\">175 cm</option><option value=\"176\">176 cm</option><option value=\"177\">177 cm</option><option value=\"178\">178 cm</option><option value=\"179\">179 cm</option><option value=\"180\">180 cm</option><option value=\"181\">181 cm</option><option value=\"182\">182 cm</option><option value=\"183\">183 cm</option><option value=\"184\">184 cm</option><option value=\"185\">185 cm</option><option value=\"186\">186 cm</option><option value=\"187\">187 cm</option><option value=\"188\">188 cm</option><option value=\"189\">189 cm</option><option value=\"190\">190 cm</option><option value=\"191\">191 cm</option><option value=\"192\">192 cm</option><option value=\"193\">193 cm</option><option value=\"194\">194 cm</option><option value=\"195\">195 cm</option><option value=\"196\">196 cm</option><option value=\"197\">197 cm</option><option value=\"198\">198 cm</option><option value=\"199\">199 cm</option><option value=\"200\">200 cm</option><option value=\"201\">201 cm</option><option value=\"202\">202 cm</option><option value=\"203\">203 cm</option><option value=\"204\">204 cm</option><option value=\"205\">205 cm</option><option value=\"206\">206 cm</option><option value=\"207\">207 cm</option><option value=\"208\">208 cm</option><option value=\"209\">209 cm</option><option value=\"210\">210 cm</option><option value=\"211\">211 cm</option><option value=\"212\">212 cm</option><option value=\"213\">213 cm</option><option value=\"214\">214 cm</option><option value=\"215\">215 cm</option><option value=\"216\">216 cm</option><option value=\"217\">217 cm</option><option value=\"218\">218 cm</option></select></div><div id=\"kh-bmicalc-print\"></div><div class=\"kh-bmicalc-footer\"><p> This growth chart shows BMI percentiles from the Center for Disease Control and Prevention (CDC). Your BMI is shown as a point on the chat. If you entered more than one set of measurements, you will see one point for each measurement. Move your mouse over any point to see the BMI number and, on the precent bar abone, the related percentile. </p><br/><strong>KidsHealth BMI Calculator</strong><br/>&copy; " + kh_current_year + " The Nemours Foundation/KidsHealth. All rights reserved. </div></div>";

// Initialize the BMI Calculator
document.write(theFullCalc);

//function bmiCalcu() {
//	var bmiCalc = new BMICalculator();
//	window.bmiCalc = bmiCalc;
//}

//window.onload = bmiCalcu();

document.getElementById('kh-bmicalc-modal').onclick = function() {
	var more_about_bmi_content = "<h2>More About BMI</h2><strong>What's a Percentile?</strong><p>A person's BMI percentile is a way of showing how his or her measurements compare to people of the same age.  For example, if a person has a BMI in the 60th percentile, 59% of those of the same gender and age have a lower BMI.</p><br /><strong>Where BMI Can Fall Short</strong><p>BMI can give you an idea of how much body fat you have, but it's not perfect. For example, it's normal to gain weight quickly - and have your BMI go up - during puberty.  A doctor can help you figure out whether this weight gain is a normal part of development or whether it is something to be concerned about.   If you think you're  gaining weight too fast or believe you're becoming overweight, talk to your doctor or school nurse.  A person can also have a high BMI because he or she has a large frame or a lot of muscle (like a body builder) instead of excess fat.  And a person with a small frame may have a normal BMI but might have too much body fat.</p><br /><strong>The Right Measurements Are Important</strong><br /><p>When you're figuring out your BMI, look at your measurements over time.  It's also important to use height and weight measurements that have been taken in a doctor's office or by a school nurse or other medical professional.  Home measurements are not always right.  Because of the way BMI is calculated, a small mistake in measurement can result in a large mistake in your BMI result.</p>";

	// If mobile, open in a new window. Otherwise, display a modal popup
	//Check if we're on mobile or desktop
	if(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
		var opened = window.open("");
		opened.document.write("<html><head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"></head><body style=\"font-family: arial,sans-serif; font-size: 14px; color: #555; text-align: center;\">" + more_about_bmi_content + "</body></html>");
	} else {
		Modal.open({
			content: more_about_bmi_content,
			draggable: true,
		});
	}
}
